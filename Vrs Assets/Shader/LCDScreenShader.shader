Shader "Custom/LCDShader" {
Properties {
 _MainTex ("Albedo (RGB)", 2D) = "white" { }
 _Glossiness ("Smoothness", Range(0.000000,1.000000)) = 0.500000
 _EmissionStrength ("Emission Strength", Range(0.000000,1.000000)) = 0.500000
 _PixelEffect ("PixelEffect", Range(0.000000,1.000000)) = 0.180000
 _ScanlineEffect ("ScanlineAlpha", Range(0.000000,1.000000)) = 0.326000
 _ScanSpeed ("Scanline Speed", Range(0.000000,100.000000)) = 5.900000
 _NumPixelsX ("LCD X Resolution", Float) = 128.000000
 _NumPixelsY ("LCD Y Resolution", Float) = 9.500000
}
SubShader { 
 LOD 200
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  GpuProgramID 41983
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_SHBr          c10      1
					//   unity_SHBg          c11      1
					//   unity_SHBb          c12      1
					//   unity_SHC           c13      1
					//   _MainTex_ST         c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c10, r2
					    dp4 r1.y, c11, r2
					    dp4 r1.z, c12, r2
					    mad o4.xyz, c13, r0.x, r1
					    mov o5, c15.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_LightmapST    c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.xy, v3, c10, c10.zwzw
					    mov o4.zw, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_LightmapST        c10      1
					//   unity_DynamicLightmapST c11      1
					//   _MainTex_ST             c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v4.xyxy, c11.xyxy, c11
					    mad o4.xy, v3, c10, c10.zwzw
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_SHBr          c12      1
					//   unity_SHBg          c13      1
					//   unity_SHBb          c14      1
					//   unity_SHC           c15      1
					//   _MainTex_ST         c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c16, c16.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c12, r2
					    dp4 r1.y, c13, r2
					    dp4 r1.z, c14, r2
					    mad o4.xyz, c15, r0.x, r1
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c17.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c17.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6, c17.y
					
					// approximately 30 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_LightmapST    c12      1
					//   _MainTex_ST         c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o4.zw, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_LightmapST        c12      1
					//   unity_DynamicLightmapST c13      1
					//   _MainTex_ST             c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v4.xyxy, c13.xyxy, c13
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c15.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c15.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   unity_4LightPosX0         c14      1
					//   unity_4LightPosY0         c15      1
					//   unity_4LightPosZ0         c16      1
					//   unity_4LightAtten0        c17      1
					//   unity_SHBr                c18      1
					//   unity_SHBg                c19      1
					//   unity_SHBb                c20      1
					//   unity_SHC                 c21      1
					//   unity_ColorSpaceLuminance c22      1
					//   _MainTex_ST               c23      1
					//
					
					    vs_3_0
					    def c24, 1, 0, 0.305306017, 0.682171106
					    def c25, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c24.xxxy, c24.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.z, c6, r0
					    dp4 o0.w, c7, r0
					    mad o1.xy, v2, c23, c23.zwzw
					    dp4 r0.x, c8, v0
					    add r1, -r0.x, c14
					    dp4 r0.y, c9, v0
					    add r2, -r0.y, c15
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r2, r4.y
					    mul r2, r2, r2
					    mad r2, r1, r1, r2
					    mad r1, r1, r4.x, r3
					    dp4 r0.z, c10, v0
					    add r3, -r0.z, c16
					    mov o3.xyz, r0
					    mad r0, r3, r4.z, r1
					    mad r1, r3, r3, r2
					    rsq r2.x, r1.x
					    rsq r2.y, r1.y
					    rsq r2.z, r1.z
					    rsq r2.w, r1.w
					    mov r3.x, c24.x
					    mad r1, r1, c17, r3.x
					    mul r0, r0, r2
					    max r0, r0, c24.y
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c24.z, c24.w
					    mad r1.xyz, r0, r1, c25.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c22.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r2.x, c18, r1
					    dp4 r2.y, c19, r1
					    dp4 r2.z, c20, r1
					    mad r1.xyz, c21, r0.w, r2
					    add o4.xyz, r0, r1
					    mov o5, c24.y
					
					// approximately 58 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat0.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat15 = u_xlat0.y * u_xlat0.y;
					    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					int u_xlati15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _ProjectionParams         c14      1
					//   _ScreenParams             c15      1
					//   unity_4LightPosX0         c16      1
					//   unity_4LightPosY0         c17      1
					//   unity_4LightPosZ0         c18      1
					//   unity_4LightAtten0        c19      1
					//   unity_SHBr                c20      1
					//   unity_SHBg                c21      1
					//   unity_SHBb                c22      1
					//   unity_SHC                 c23      1
					//   unity_ColorSpaceLuminance c24      1
					//   _MainTex_ST               c25      1
					//
					
					    vs_3_0
					    def c26, 1, 0, 0.305306017, 0.682171106
					    def c27, 0.0125228781, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c25, c25.zwzw
					    dp4 r0.x, c8, v0
					    add r1, -r0.x, c16
					    dp4 r0.y, c9, v0
					    add r2, -r0.y, c17
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r2, r4.y
					    mul r2, r2, r2
					    mad r2, r1, r1, r2
					    mad r1, r1, r4.x, r3
					    dp4 r0.z, c10, v0
					    add r3, -r0.z, c18
					    mov o3.xyz, r0
					    mad r0, r3, r4.z, r1
					    mad r1, r3, r3, r2
					    rsq r2.x, r1.x
					    rsq r2.y, r1.y
					    rsq r2.z, r1.z
					    rsq r2.w, r1.w
					    mov r3.x, c26.x
					    mad r1, r1, c19, r3.x
					    mul r0, r0, r2
					    max r0, r0, c26.y
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c26.z, c26.w
					    mad r1.xyz, r0, r1, c27.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c24.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o4.xyz, r0, r1
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c27.y
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c27.y
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c15.zwzw, r2.xwzw
					    mov o6, c26.y
					
					// approximately 64 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat3 * u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[1].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[2].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat19 = u_xlat1.y * u_xlat1.y;
					    u_xlat19 = u_xlat1.x * u_xlat1.x + (-u_xlat19);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat3);
					    u_xlat1.y = dot(unity_SHBg, u_xlat3);
					    u_xlat1.z = dot(unity_SHBb, u_xlat3);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					int u_xlati12;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat3 * u_xlat0;
					    u_xlat3.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD4.zw = u_xlat1.zw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_SHBr          c10      1
					//   unity_SHBg          c11      1
					//   unity_SHBb          c12      1
					//   unity_SHC           c13      1
					//   _MainTex_ST         c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c10, r2
					    dp4 r1.y, c11, r2
					    dp4 r1.z, c12, r2
					    mad o4.xyz, c13, r0.y, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o6, c15.y
					
					// approximately 26 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_LightmapST    c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.xy, v3, c10, c10.zwzw
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o4.zw, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_LightmapST        c10      1
					//   unity_DynamicLightmapST c11      1
					//   _MainTex_ST             c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5.x
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.zw, v4.xyxy, c11.xyxy, c11
					    mad o4.xy, v3, c10, c10.zwzw
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_SHBr          c12      1
					//   unity_SHBg          c13      1
					//   unity_SHBb          c14      1
					//   unity_SHC           c15      1
					//   _MainTex_ST         c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    dcl_texcoord6 o7
					    mad o1.xy, v2, c16, c16.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c12, r2
					    dp4 r1.y, c13, r2
					    dp4 r1.z, c14, r2
					    mad o4.xyz, c15, r0.x, r1
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c17.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c17.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o7, c17.y
					
					// approximately 31 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat6 = u_xlat1.y * u_xlat1.y;
					    u_xlat6 = u_xlat1.x * u_xlat1.x + (-u_xlat6);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat6 = u_xlat1.y * u_xlat1.y;
					    u_xlat6 = u_xlat1.x * u_xlat1.x + (-u_xlat6);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_LightmapST    c12      1
					//   _MainTex_ST         c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o4.zw, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_LightmapST        c12      1
					//   unity_DynamicLightmapST c13      1
					//   _MainTex_ST             c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v4.xyxy, c13.xyxy, c13
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c15.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c15.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   unity_4LightPosX0         c14      1
					//   unity_4LightPosY0         c15      1
					//   unity_4LightPosZ0         c16      1
					//   unity_4LightAtten0        c17      1
					//   unity_SHBr                c18      1
					//   unity_SHBg                c19      1
					//   unity_SHBb                c20      1
					//   unity_SHC                 c21      1
					//   unity_ColorSpaceLuminance c22      1
					//   _MainTex_ST               c23      1
					//
					
					    vs_3_0
					    def c24, 1, 0, 0.305306017, 0.682171106
					    def c25, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad r0, v0.xyzx, c24.xxxy, c24.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.w, c7, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c23, c23.zwzw
					    dp4 r1.x, c8, v0
					    add r2, -r1.x, c14
					    dp4 r1.y, c9, v0
					    add r3, -r1.y, c15
					    mul r0.yzw, c12.xxyz, v1.y
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r4.xyz, r0.yzww
					    mul r5, r3, r4.y
					    mul r3, r3, r3
					    mad r3, r2, r2, r3
					    mad r2, r2, r4.x, r5
					    dp4 r1.z, c10, v0
					    add r5, -r1.z, c16
					    mov o3.xyz, r1
					    mad r1, r5, r4.z, r2
					    mad r2, r5, r5, r3
					    rsq r3.x, r2.x
					    rsq r3.y, r2.y
					    rsq r3.z, r2.z
					    rsq r3.w, r2.w
					    mov r5.x, c24.x
					    mad r2, r2, c17, r5.x
					    mul r1, r1, r3
					    max r1, r1, c24.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    rcp r3.w, r2.w
					    mul r1, r1, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c24.z, c24.w
					    mad r1.xyz, r0.yzww, r1, c25.x
					    mad r1.xyz, r0.yzww, r1, -r0.yzww
					    abs r1.w, c22.w
					    sge r1.w, -r1.w, r1.w
					    mad r0.yzw, r1.w, r1.xxyz, r0
					    mul r1.x, r4.y, r4.y
					    mad r1.x, r4.x, r4.x, -r1.x
					    mul r2, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r3.x, c18, r2
					    dp4 r3.y, c19, r2
					    dp4 r3.z, c20, r2
					    mad r1.xyz, c21, r1.x, r3
					    add o4.xyz, r0.yzww, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o6, c24.y
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat0.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat15 = u_xlat0.y * u_xlat0.y;
					    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					int u_xlati15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _ProjectionParams         c14      1
					//   _ScreenParams             c15      1
					//   unity_4LightPosX0         c16      1
					//   unity_4LightPosY0         c17      1
					//   unity_4LightPosZ0         c18      1
					//   unity_4LightAtten0        c19      1
					//   unity_SHBr                c20      1
					//   unity_SHBg                c21      1
					//   unity_SHBb                c22      1
					//   unity_SHC                 c23      1
					//   unity_ColorSpaceLuminance c24      1
					//   _MainTex_ST               c25      1
					//
					
					    vs_3_0
					    def c26, 1, 0, 0.305306017, 0.682171106
					    def c27, 0.0125228781, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    dcl_texcoord6 o7
					    mad o1.xy, v2, c25, c25.zwzw
					    dp4 r0.x, c8, v0
					    add r1, -r0.x, c16
					    dp4 r0.y, c9, v0
					    add r2, -r0.y, c17
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r2, r4.y
					    mul r2, r2, r2
					    mad r2, r1, r1, r2
					    mad r1, r1, r4.x, r3
					    dp4 r0.z, c10, v0
					    add r3, -r0.z, c18
					    mov o3.xyz, r0
					    mad r0, r3, r4.z, r1
					    mad r1, r3, r3, r2
					    rsq r2.x, r1.x
					    rsq r2.y, r1.y
					    rsq r2.z, r1.z
					    rsq r2.w, r1.w
					    mov r3.x, c26.x
					    mad r1, r1, c19, r3.x
					    mul r0, r0, r2
					    max r0, r0, c26.y
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c26.z, c26.w
					    mad r1.xyz, r0, r1, c27.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c24.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o4.xyz, r0, r1
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c27.y
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c27.y
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c15.zwzw, r2.xwzw
					    mov o7, c26.y
					
					// approximately 65 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat3 * u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[1].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[2].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat12 = u_xlat1.y * u_xlat1.y;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat12);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[8];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					int u_xlati12;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z;
					    vs_TEXCOORD4.zw = u_xlat1.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat3 * u_xlat0;
					    u_xlat3.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
// Platform d3d9 had shader errors
//   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlatb36 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb36){
					        u_xlatb36 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat36 = u_xlat4.y * 0.25;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat5.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat36 = max(u_xlat36, u_xlat15);
					        u_xlat4.x = min(u_xlat5.x, u_xlat36);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat6.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz;
					        u_xlat7.w = 1.0;
					        u_xlat5.x = dot(u_xlat5, u_xlat7);
					        u_xlat5.y = dot(u_xlat6, u_xlat7);
					        u_xlat5.z = dot(u_xlat4, u_xlat7);
					    } else {
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat4.xyz = u_xlat5.xyz + vs_TEXCOORD3.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat5.xyz = log2(u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat5.xyz : u_xlat4.xyz;
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat37);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat37 = min(u_xlat6.z, u_xlat37);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat37 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat37 = u_xlat35 * u_xlat37;
					    u_xlat37 = u_xlat37 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat37);
					    u_xlat38 = log2(u_xlat5.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb39){
					        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb39){
					            u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat39 = inversesqrt(u_xlat39);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat39);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat39 = min(u_xlat8.z, u_xlat39);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					        }
					        u_xlat7 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat37);
					        u_xlat3.x = log2(u_xlat7.w);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.y;
					        u_xlat3.x = exp2(u_xlat3.x);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat7.xyz * u_xlat3.xxx;
					        u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x * u_xlat0.x;
					    u_xlat23 = dot(vec2(u_xlat23), vec2(u_xlat35));
					    u_xlat23 = u_xlat23 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlat33 = max(u_xlat22, 9.99999975e-05);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat22 = (u_xlatb36) ? u_xlat33 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat33 = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat12.x = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb36) ? u_xlat11 : u_xlat12.x;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat22 * u_xlat12.x;
					    u_xlat12.x = (-unity_ColorSpaceDielectricSpec.w) + _Glossiness;
					    u_xlat12.x = u_xlat12.x + 1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat3.xyz = _LightColor0.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat7.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat7.xyz * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat4.xyz;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat3.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat12.xyz = u_xlat12.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlatb36 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb36){
					        u_xlatb36 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat36 = u_xlat4.y * 0.25;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat5.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat36 = max(u_xlat36, u_xlat15);
					        u_xlat4.x = min(u_xlat5.x, u_xlat36);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat6.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz;
					        u_xlat7.w = 1.0;
					        u_xlat5.x = dot(u_xlat5, u_xlat7);
					        u_xlat5.y = dot(u_xlat6, u_xlat7);
					        u_xlat5.z = dot(u_xlat4, u_xlat7);
					    } else {
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat4.xyz = u_xlat5.xyz + vs_TEXCOORD3.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat5.xyz = log2(u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat5.xyz : u_xlat4.xyz;
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat37);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat37 = min(u_xlat6.z, u_xlat37);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat37 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat37 = u_xlat35 * u_xlat37;
					    u_xlat37 = u_xlat37 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat37);
					    u_xlat38 = log2(u_xlat5.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb39){
					        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb39){
					            u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat39 = inversesqrt(u_xlat39);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat39);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat39 = min(u_xlat8.z, u_xlat39);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					        }
					        u_xlat7 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat37);
					        u_xlat3.x = log2(u_xlat7.w);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.y;
					        u_xlat3.x = exp2(u_xlat3.x);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat7.xyz * u_xlat3.xxx;
					        u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x * u_xlat0.x;
					    u_xlat23 = dot(vec2(u_xlat23), vec2(u_xlat35));
					    u_xlat23 = u_xlat23 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlat33 = max(u_xlat22, 9.99999975e-05);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat22 = (u_xlatb36) ? u_xlat33 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat33 = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat12.x = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb36) ? u_xlat11 : u_xlat12.x;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat22 * u_xlat12.x;
					    u_xlat12.x = (-unity_ColorSpaceDielectricSpec.w) + _Glossiness;
					    u_xlat12.x = u_xlat12.x + 1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat3.xyz = _LightColor0.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat7.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat7.xyz * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat4.xyz;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat3.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat12.xyz = u_xlat12.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat32 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat32 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat36 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat36 = u_xlat36 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
					    u_xlat36 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat36);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat36 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat36 = u_xlat36 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
					    u_xlat36 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat36);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb3){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat3.x = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat3.x = max(u_xlat3.x, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat3.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = u_xlat15.xyz * vec3(u_xlat40);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat40);
					        u_xlat15.x = log2(u_xlat8.w);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.y;
					        u_xlat15.x = exp2(u_xlat15.x);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.x;
					        u_xlat15.xyz = u_xlat8.xyz * u_xlat15.xxx;
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat15.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat15.xyz;
					    }
					    u_xlat15.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat15.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat15.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat15.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat15.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb3) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat15.y;
					    u_xlat12 = (u_xlatb3) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-unity_ColorSpaceDielectricSpec.w) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat4.xyz;
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = u_xlat13.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb3){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat3.x = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat3.x = max(u_xlat3.x, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat3.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = u_xlat15.xyz * vec3(u_xlat40);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat40);
					        u_xlat15.x = log2(u_xlat8.w);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.y;
					        u_xlat15.x = exp2(u_xlat15.x);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.x;
					        u_xlat15.xyz = u_xlat8.xyz * u_xlat15.xxx;
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat15.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat15.xyz;
					    }
					    u_xlat15.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat15.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat15.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat15.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat15.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb3) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat15.y;
					    u_xlat12 = (u_xlatb3) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-unity_ColorSpaceDielectricSpec.w) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat4.xyz;
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = u_xlat13.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat3.x = u_xlat3.x + 0.5;
					    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
					    u_xlat3.x = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat3.xxx;
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat3.x = u_xlat3.x + 0.5;
					    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
					    u_xlat3.x = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat3.xxx;
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlatb36 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb36){
					        u_xlatb36 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat36 = u_xlat4.y * 0.25;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat5.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat36 = max(u_xlat36, u_xlat15);
					        u_xlat4.x = min(u_xlat5.x, u_xlat36);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat6.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz;
					        u_xlat7.w = 1.0;
					        u_xlat5.x = dot(u_xlat5, u_xlat7);
					        u_xlat5.y = dot(u_xlat6, u_xlat7);
					        u_xlat5.z = dot(u_xlat4, u_xlat7);
					    } else {
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat4.xyz = u_xlat5.xyz + vs_TEXCOORD3.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat5.xyz = log2(u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat5.xyz : u_xlat4.xyz;
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat37);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat37 = min(u_xlat6.z, u_xlat37);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat37 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat37 = u_xlat35 * u_xlat37;
					    u_xlat37 = u_xlat37 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat37);
					    u_xlat38 = log2(u_xlat5.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb39){
					        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb39){
					            u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat39 = inversesqrt(u_xlat39);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat39);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat39 = min(u_xlat8.z, u_xlat39);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					        }
					        u_xlat7 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat37);
					        u_xlat3.x = log2(u_xlat7.w);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.y;
					        u_xlat3.x = exp2(u_xlat3.x);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat7.xyz * u_xlat3.xxx;
					        u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x * u_xlat0.x;
					    u_xlat23 = dot(vec2(u_xlat23), vec2(u_xlat35));
					    u_xlat23 = u_xlat23 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlat33 = max(u_xlat22, 9.99999975e-05);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat22 = (u_xlatb36) ? u_xlat33 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat33 = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat12.x = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb36) ? u_xlat11 : u_xlat12.x;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat22 * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat12.x = u_xlat3.x + _Glossiness;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat4.xyz = _LightColor0.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat0.xzw = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat7.xyz;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat12.xyz = u_xlat12.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlatb36 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb36){
					        u_xlatb36 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat36 = u_xlat4.y * 0.25;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat5.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat36 = max(u_xlat36, u_xlat15);
					        u_xlat4.x = min(u_xlat5.x, u_xlat36);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					        u_xlat6.xyz = u_xlat4.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat4.xyz = u_xlat4.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz;
					        u_xlat7.w = 1.0;
					        u_xlat5.x = dot(u_xlat5, u_xlat7);
					        u_xlat5.y = dot(u_xlat6, u_xlat7);
					        u_xlat5.z = dot(u_xlat4, u_xlat7);
					    } else {
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat4.xyz = u_xlat5.xyz + vs_TEXCOORD3.xyz;
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat5.xyz = log2(u_xlat4.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = (bool(u_xlatb36)) ? u_xlat5.xyz : u_xlat4.xyz;
					    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb37){
					        u_xlat37 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat37 = inversesqrt(u_xlat37);
					        u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat37);
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat37 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat37 = min(u_xlat6.z, u_xlat37);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat37) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat37 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat37 = u_xlat35 * u_xlat37;
					    u_xlat37 = u_xlat37 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat37);
					    u_xlat38 = log2(u_xlat5.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb39){
					        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb39){
					            u_xlat39 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat39 = inversesqrt(u_xlat39);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat39);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat39 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat39 = min(u_xlat8.z, u_xlat39);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
					        }
					        u_xlat7 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat37);
					        u_xlat3.x = log2(u_xlat7.w);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.y;
					        u_xlat3.x = exp2(u_xlat3.x);
					        u_xlat3.x = u_xlat3.x * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat7.xyz * u_xlat3.xxx;
					        u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x * u_xlat0.x;
					    u_xlat23 = dot(vec2(u_xlat23), vec2(u_xlat35));
					    u_xlat23 = u_xlat23 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlat33 = max(u_xlat22, 9.99999975e-05);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat22 = (u_xlatb36) ? u_xlat33 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat33 = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat12.x = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb36) ? u_xlat11 : u_xlat12.x;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat22 * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat12.x = u_xlat3.x + _Glossiness;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat4.xyz = _LightColor0.xyz * vec3(u_xlat33) + u_xlat4.xyz;
					    u_xlat7.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat0.xzw = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat7.xyz;
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat12.xyz = u_xlat12.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat32 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat32;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat32 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat32 = log2(u_xlat4.w);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.y;
					    u_xlat32 = exp2(u_xlat32);
					    u_xlat32 = u_xlat32 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat32);
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat2.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat36 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat36 = u_xlat36 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
					    u_xlat36 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat36);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat14;
					bvec2 u_xlatb14;
					float u_xlat22;
					float u_xlat23;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					uint u_xlatu34;
					bool u_xlatb34;
					float u_xlat35;
					int u_xlati35;
					uint u_xlatu35;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					float u_xlat38;
					bool u_xlatb38;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat34 = u_xlat3.x * 3.0;
					    u_xlatu34 = uint(u_xlat34);
					    //null = uintBitsToFloat(u_xlatu34 / 3u);
					    u_xlatu34 = u_xlatu34 % 3u;
					    u_xlat35 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu35 = uint(u_xlat35);
					    u_xlati35 = int(u_xlatu35 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat34 = float(int(u_xlatu34));
					    u_xlatb14.xy = equal(vec4(u_xlat34), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb14.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat34 = u_xlatb14.y ? 1.0 : float(0.0);
					    u_xlat14.xyz = (u_xlatb14.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat14.xyz = vec3(u_xlat34) * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat14.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat34 = float(u_xlati35);
					    u_xlatb34 = u_xlat34==0.0;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat34 = u_xlat34 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat34) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = (-_Glossiness) + 1.0;
					    u_xlat3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat3.x = u_xlat3.x + u_xlat3.x;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-u_xlat3.xxx) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat36 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat36);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat36 = dot(vs_TEXCOORD1.xyz, u_xlat5.xyz);
					    u_xlat36 = u_xlat36 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;
					    u_xlat36 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat36);
					    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb36){
					        u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat36 = inversesqrt(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat36 = min(u_xlat6.z, u_xlat36);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat36 = (-u_xlat35) * 0.699999988 + 1.70000005;
					    u_xlat36 = u_xlat35 * u_xlat36;
					    u_xlat36 = u_xlat36 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat36);
					    u_xlat37 = log2(u_xlat5.w);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.y;
					    u_xlat37 = exp2(u_xlat37);
					    u_xlat37 = u_xlat37 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat37);
					    u_xlatb38 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb38){
					        u_xlatb38 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb38){
					            u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat38 = inversesqrt(u_xlat38);
					            u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat38);
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat38 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat38 = min(u_xlat8.z, u_xlat38);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat38) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat36);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat37) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11 = u_xlat35 * u_xlat35;
					    u_xlat22 = (-u_xlat35) * u_xlat35 + 1.0;
					    u_xlat12.x = u_xlat1.x * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat1.w * u_xlat22 + u_xlat11;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat22 = u_xlat1.w * u_xlat12.x + u_xlat22;
					    u_xlat22 = u_xlat22 + 9.99999975e-06;
					    u_xlat22 = 2.0 / u_xlat22;
					    u_xlat12.x = u_xlat11 * u_xlat11;
					    u_xlat33 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat11) * vec2(u_xlat11) + vec2(-1.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat3.x + 1.0;
					    u_xlat23 = u_xlat33 * 3.14159274;
					    u_xlat33 = u_xlat23 * u_xlat33 + 1.00000001e-07;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat12.x = u_xlat1.y * u_xlat23;
					    u_xlat23 = u_xlat1.x * u_xlat1.x;
					    u_xlat23 = u_xlat23 * u_xlat23;
					    u_xlat1.x = u_xlat1.x * u_xlat23;
					    u_xlat23 = u_xlat0.x + u_xlat0.x;
					    u_xlat23 = u_xlat0.x * u_xlat23;
					    u_xlat23 = u_xlat23 * u_xlat35 + -0.5;
					    u_xlat12.x = u_xlat23 * u_xlat12.x + 1.0;
					    u_xlat23 = u_xlat23 * u_xlat1.x + 1.0;
					    u_xlat12.x = u_xlat23 * u_xlat12.x;
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat22 = u_xlat22 * 0.785398185;
					    u_xlatb33 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat23 = max(u_xlat22, 9.99999975e-05);
					    u_xlat23 = sqrt(u_xlat23);
					    u_xlat22 = (u_xlatb33) ? u_xlat23 : u_xlat22;
					    u_xlat22 = u_xlat1.w * u_xlat22;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat12.x = u_xlat1.w * u_xlat12.x;
					    u_xlat11 = u_xlat11 * u_xlat35;
					    u_xlat11 = (-u_xlat11) * 0.280000001 + 1.0;
					    u_xlat23 = float(1.0) / u_xlat3.y;
					    u_xlat11 = (u_xlatb33) ? u_xlat11 : u_xlat23;
					    u_xlat33 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb33 = u_xlat33!=0.0;
					    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
					    u_xlat22 = u_xlat33 * u_xlat22;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat33 = u_xlat3.x + _Glossiness;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat0.x;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat0.x = u_xlat0.x * u_xlat22;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat12.xyz = u_xlat5.xyz * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat11);
					    u_xlat3.xyz = vec3(u_xlat33) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb3){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat3.x = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat3.x = max(u_xlat3.x, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat3.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = u_xlat15.xyz * vec3(u_xlat40);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat40);
					        u_xlat15.x = log2(u_xlat8.w);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.y;
					        u_xlat15.x = exp2(u_xlat15.x);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.x;
					        u_xlat15.xyz = u_xlat8.xyz * u_xlat15.xxx;
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat15.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat15.xyz;
					    }
					    u_xlat15.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat15.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat15.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat15.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat15.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb3) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat15.y;
					    u_xlat12 = (u_xlatb3) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-unity_ColorSpaceDielectricSpec.w) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat4.xyz;
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = u_xlat13.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlatb3 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb3){
					        u_xlatb3 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat3.x = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat3.x = max(u_xlat3.x, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat3.x);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb3)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = u_xlat15.xyz * vec3(u_xlat40);
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat40);
					        u_xlat15.x = log2(u_xlat8.w);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.y;
					        u_xlat15.x = exp2(u_xlat15.x);
					        u_xlat15.x = u_xlat15.x * unity_SpecCube1_HDR.x;
					        u_xlat15.xyz = u_xlat8.xyz * u_xlat15.xxx;
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat15.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat15.xyz;
					    }
					    u_xlat15.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15.x = inversesqrt(u_xlat15.x);
					    u_xlat15.xyz = u_xlat15.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat15.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat15.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat15.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat15.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb3) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat15.y;
					    u_xlat12 = (u_xlatb3) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-unity_ColorSpaceDielectricSpec.w) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat5.xyz * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat4.xyz;
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat3.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = u_xlat13.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat12;
					bvec2 u_xlatb12;
					float u_xlat20;
					bool u_xlatb20;
					float u_xlat30;
					uint u_xlatu30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					uint u_xlatu31;
					bool u_xlatb31;
					float u_xlat33;
					bool u_xlatb33;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;
					    u_xlat30 = u_xlat2.x * 3.0;
					    u_xlatu30 = uint(u_xlat30);
					    //null = uintBitsToFloat(u_xlatu30 / 3u);
					    u_xlatu30 = u_xlatu30 % 3u;
					    u_xlat31 = _Time.x * _ScanSpeed + u_xlat2.y;
					    u_xlatu31 = uint(u_xlat31);
					    u_xlati31 = int(u_xlatu31 & 3u);
					    u_xlat2.x = (-_PixelEffect) + 1.0;
					    u_xlat30 = float(int(u_xlatu30));
					    u_xlatb12.xy = equal(vec4(u_xlat30), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat3.xyz = (u_xlatb12.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat30 = u_xlatb12.y ? 1.0 : float(0.0);
					    u_xlat12.xyz = (u_xlatb12.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat12.xyz = vec3(u_xlat30) * u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat12.xyz, u_xlat2.xxx);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat30 = float(u_xlati31);
					    u_xlatb30 = u_xlat30==0.0;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = u_xlat30 * _ScanlineEffect;
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = (-_Glossiness) + 1.0;
					    u_xlat31 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat12.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat31)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat31 = log2(u_xlat3.w);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.y;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat31 = u_xlat31 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat31);
					    u_xlat31 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat33 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = u_xlat31 * u_xlat33;
					    u_xlat5.xyz = (-vec3(u_xlat31)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb31 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb31){
					        u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat31 = inversesqrt(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat31 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat31 = min(u_xlat5.z, u_xlat31);
					        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat31 = (-u_xlat30) * 0.699999988 + 1.70000005;
					    u_xlat31 = u_xlat30 * u_xlat31;
					    u_xlat31 = u_xlat31 * 6.0;
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
					    u_xlat2.x = log2(u_xlat4.w);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.y;
					    u_xlat2.x = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat2.xxx;
					    u_xlatb33 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb33){
					        u_xlatb33 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb33){
					            u_xlat33 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat33 = inversesqrt(u_xlat33);
					            u_xlat6.xyz = u_xlat12.xyz * vec3(u_xlat33);
					            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat33 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat33 = min(u_xlat7.z, u_xlat33);
					            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat33) + u_xlat7.xyz;
					        }
					        u_xlat6 = textureLod(unity_SpecCube1, u_xlat12.xyz, u_xlat31);
					        u_xlat31 = log2(u_xlat6.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz + (-u_xlat12.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat12.xyz;
					    }
					    u_xlat31 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * vs_TEXCOORD1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat10.x = u_xlat30 * u_xlat30;
					    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat30 = u_xlat10.x * u_xlat30;
					    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.0;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat10.x = (u_xlatb20) ? u_xlat30 : u_xlat10.x;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = u_xlat20 + _Glossiness;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat3.x = u_xlat3.x + 0.5;
					    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
					    u_xlat3.x = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat3.xxx;
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat37;
					uint u_xlatu37;
					bool u_xlatb37;
					float u_xlat38;
					int u_xlati38;
					uint u_xlatu38;
					float u_xlat39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat3.xy = u_xlat3.xy * vs_TEXCOORD0.xy;
					    u_xlat37 = u_xlat3.x * 3.0;
					    u_xlatu37 = uint(u_xlat37);
					    //null = uintBitsToFloat(u_xlatu37 / 3u);
					    u_xlatu37 = u_xlatu37 % 3u;
					    u_xlat38 = _Time.x * _ScanSpeed + u_xlat3.y;
					    u_xlatu38 = uint(u_xlat38);
					    u_xlati38 = int(u_xlatu38 & 3u);
					    u_xlat3.x = (-_PixelEffect) + 1.0;
					    u_xlat37 = float(int(u_xlatu37));
					    u_xlatb15.xy = equal(vec4(u_xlat37), vec4(0.0, 2.0, 0.0, 0.0)).xy;
					    u_xlat4.xyz = (u_xlatb15.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat37 = u_xlatb15.y ? 1.0 : float(0.0);
					    u_xlat15.xyz = (u_xlatb15.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat15.xyz = vec3(u_xlat37) * u_xlat15.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat15.xyz, u_xlat3.xxx);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat37 = float(u_xlati38);
					    u_xlatb37 = u_xlat37==0.0;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat37 = u_xlat37 * _ScanlineEffect;
					    u_xlat2.xyz = vec3(u_xlat37) * (-u_xlat2.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat15.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat15.xyz = vs_TEXCOORD1.xyz * (-u_xlat15.xxx) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat3.x = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat3.xxx;
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat3.x = u_xlat3.x + 0.5;
					    u_xlat5.xyz = u_xlat3.xxx * u_xlat5.xyz;
					    u_xlat3.x = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / u_xlat3.xxx;
					    u_xlatb3 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb3){
					        u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat3.x = inversesqrt(u_xlat3.x);
					        u_xlat6.xyz = u_xlat3.xxx * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat3.x = min(u_xlat7.y, u_xlat7.x);
					        u_xlat3.x = min(u_xlat7.z, u_xlat3.x);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xxx + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat3.x = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat3.x = u_xlat38 * u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat3.x);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat15.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, u_xlat3.x);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat3.x = inversesqrt(u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat3.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat3.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x + u_xlat0.x;
					    u_xlat25 = u_xlat0.x * u_xlat25;
					    u_xlat25 = u_xlat25 * u_xlat38 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat3.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat36 = u_xlat3.x + _Glossiness;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat24);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat3.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat6.xyz * u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat36) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat13.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(_EmissionStrength) + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  ZWrite Off
  Blend One One
  GpuProgramID 71969
Program "vp" {
// Platform d3d9 skipped due to earlier errors
SubProgram "d3d11 " {
Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    gl_Position = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[20];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[20];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    gl_Position = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[20];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[20];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[16];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
}
Program "fp" {
// Platform d3d9 had shader errors
//   Keywords { "POINT" }
//   Keywords { "DIRECTIONAL" }
//   Keywords { "SPOT" }
//   Keywords { "POINT_COOKIE" }
//   Keywords { "DIRECTIONAL_COOKIE" }
//   Keywords { "SPOT" "SHADOWS_DEPTH" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
//   Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
//   Keywords { "POINT" "SHADOWS_CUBE" }
//   Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
//   Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
//   Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
//   Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
//   Keywords { "POINT" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "FOG_EXP2" }
//   Keywords { "SPOT" "FOG_EXP2" }
//   Keywords { "POINT_COOKIE" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
//   Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
//   Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
//   Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
//   Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
//   Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
//   Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
//   Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
SubProgram "d3d11 " {
Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat7.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat7.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat5;
					float u_xlat6;
					float u_xlat8;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD1.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat5 = (-_Glossiness) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat2.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat2.x * u_xlat12 + 1.00000001e-07;
					    u_xlat2.x = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat2.x / u_xlat12;
					    u_xlat2.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat6 = u_xlat1.x * u_xlat2.x + u_xlat9;
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat9 = u_xlat10 * u_xlat2.x + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat9 = u_xlat10 * u_xlat6 + u_xlat9;
					    u_xlat9 = u_xlat9 + 9.99999975e-06;
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat9 = max(u_xlat12, 9.99999975e-05);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb2) ? u_xlat9 : u_xlat12;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat9 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb9 = u_xlat9!=0.0;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat2.xyw = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat9 = u_xlat12 * u_xlat12;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat3.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat12) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
					    u_xlat5 = (-u_xlat10) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyw;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat5;
					float u_xlat6;
					float u_xlat8;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD1.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat5 = (-_Glossiness) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat2.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat2.x * u_xlat12 + 1.00000001e-07;
					    u_xlat2.x = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat2.x / u_xlat12;
					    u_xlat2.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat6 = u_xlat1.x * u_xlat2.x + u_xlat9;
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat9 = u_xlat10 * u_xlat2.x + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat9 = u_xlat10 * u_xlat6 + u_xlat9;
					    u_xlat9 = u_xlat9 + 9.99999975e-06;
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat9 = max(u_xlat12, 9.99999975e-05);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb2) ? u_xlat9 : u_xlat12;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat9 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb9 = u_xlat9!=0.0;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat2.xyw = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat9 = u_xlat12 * u_xlat12;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat3.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat12) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
					    u_xlat5 = (-u_xlat10) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyw;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat7.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat7.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat2.xyw = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat2.xyw = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb18 = u_xlat1.x<u_xlat18;
					    u_xlat18 = (u_xlatb18) ? _LightShadowData.x : 1.0;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb18 = u_xlat1.x<u_xlat18;
					    u_xlat18 = (u_xlatb18) ? _LightShadowData.x : 1.0;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat18 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat18 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_10;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_16;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat7.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[1].xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * u_xlat1.xxxx + _LightShadowData.xxxx;
					    u_xlat1.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_10;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_16;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat7.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[1].xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * u_xlat1.xxxx + _LightShadowData.xxxx;
					    u_xlat1.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat7.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, vec2(u_xlat11));
					    u_xlat7.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat5;
					float u_xlat6;
					float u_xlat8;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD1.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat5 = (-_Glossiness) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat2.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat2.x * u_xlat12 + 1.00000001e-07;
					    u_xlat2.x = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat2.x / u_xlat12;
					    u_xlat2.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat6 = u_xlat1.x * u_xlat2.x + u_xlat9;
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat9 = u_xlat10 * u_xlat2.x + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat9 = u_xlat10 * u_xlat6 + u_xlat9;
					    u_xlat9 = u_xlat9 + 9.99999975e-06;
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat9 = max(u_xlat12, 9.99999975e-05);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb2) ? u_xlat9 : u_xlat12;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat9 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb9 = u_xlat9!=0.0;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat2.xyw = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat9 = u_xlat12 * u_xlat12;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat3.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat12) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
					    u_xlat5 = (-u_xlat10) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat5;
					float u_xlat6;
					float u_xlat8;
					float u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD1.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat5 = (-_Glossiness) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat2.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat12 = u_xlat12 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat12 * 3.14159274;
					    u_xlat12 = u_xlat2.x * u_xlat12 + 1.00000001e-07;
					    u_xlat2.x = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat2.x / u_xlat12;
					    u_xlat2.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat6 = u_xlat1.x * u_xlat2.x + u_xlat9;
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat9 = u_xlat10 * u_xlat2.x + u_xlat9;
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat9 = u_xlat10 * u_xlat6 + u_xlat9;
					    u_xlat9 = u_xlat9 + 9.99999975e-06;
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat12 = u_xlat12 * 0.785398185;
					    u_xlat9 = max(u_xlat12, 9.99999975e-05);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12 = (u_xlatb2) ? u_xlat9 : u_xlat12;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat9 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb9 = u_xlat9!=0.0;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat2.xyw = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat9 = u_xlat12 * u_xlat12;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat12 = u_xlat12 * u_xlat9;
					    u_xlat3.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat12) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat2.xyw = u_xlat2.xyw * u_xlat3.xyz;
					    u_xlat12 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat1.x * u_xlat12;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + -0.5;
					    u_xlat12 = u_xlat1.x * u_xlat12 + 1.0;
					    u_xlat5 = (-u_xlat10) + 1.0;
					    u_xlat9 = u_xlat5 * u_xlat5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5 = u_xlat5 * u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = u_xlat10 * u_xlat12;
					    u_xlat1.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyw;
					    u_xlat12 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat12 = u_xlat12 * (-u_xlat12);
					    u_xlat12 = exp2(u_xlat12);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat7.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat7.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat7.x * u_xlat15 + 1.00000001e-07;
					    u_xlat7.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat7.x / u_xlat15;
					    u_xlat7.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat12 = u_xlat1.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat2.x * u_xlat7.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat2.x * u_xlat12 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb7) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat7.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unity_WorldToLight[3].xyz;
					    u_xlat11 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat3 = texture(_LightTexture0, u_xlat7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat11));
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat7.xyz = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat2.x) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat2.x * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.www * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat7 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + _LightShadowData.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyw = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat2.xyw = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					int u_xlati5;
					bool u_xlatb5;
					float u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat12;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati5 = int(u_xlatu0.y & 3u);
					    u_xlat5 = float(u_xlati5);
					    u_xlatb5 = u_xlat5==0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat5 = u_xlat5 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat10 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat10) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat5) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlati15 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat6 = (-_Glossiness) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat2.x = u_xlat11 * u_xlat11 + -1.0;
					    u_xlat15 = u_xlat15 * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat15 * 3.14159274;
					    u_xlat15 = u_xlat2.x * u_xlat15 + 1.00000001e-07;
					    u_xlat2.x = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat2.x / u_xlat15;
					    u_xlat2.x = (-u_xlat6) * u_xlat6 + 1.0;
					    u_xlat7 = u_xlat1.x * u_xlat2.x + u_xlat11;
					    u_xlat12 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat11 = u_xlat12 * u_xlat2.x + u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat11 = u_xlat12 * u_xlat7 + u_xlat11;
					    u_xlat11 = u_xlat11 + 9.99999975e-06;
					    u_xlat11 = 2.0 / u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat15 = u_xlat15 * 0.785398185;
					    u_xlat11 = max(u_xlat15, 9.99999975e-05);
					    u_xlat11 = sqrt(u_xlat11);
					    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat15 = (u_xlatb2) ? u_xlat11 : u_xlat15;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat11 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb11 = u_xlat11!=0.0;
					    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat2.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + unity_WorldToLight[3].xy;
					    u_xlat3 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlat2.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat11 = u_xlat3.w * u_xlat4.x;
					    u_xlat2.xyw = vec3(u_xlat11) * _LightColor0.xyz;
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat15 = (-u_xlat1.w) + 1.0;
					    u_xlat11 = u_xlat15 * u_xlat15;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat15 = u_xlat15 * u_xlat11;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat15) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat15 = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15;
					    u_xlat15 = u_xlat1.x * u_xlat15;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -0.5;
					    u_xlat15 = u_xlat1.x * u_xlat15 + 1.0;
					    u_xlat6 = (-u_xlat12) + 1.0;
					    u_xlat11 = u_xlat6 * u_xlat6;
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6 = u_xlat6 * u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat12 * u_xlat15;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat15 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb18 = u_xlat1.x<u_xlat18;
					    u_xlat18 = (u_xlatb18) ? _LightShadowData.x : 1.0;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb18 = u_xlat1.x<u_xlat18;
					    u_xlat18 = (u_xlatb18) ? _LightShadowData.x : 1.0;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat18 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat18 = u_xlat1.w * u_xlat2.x;
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;
					    u_xlat1.x = u_xlat1.x * 0.970000029;
					    u_xlat2 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb1 = u_xlat2.x<u_xlat1.x;
					    u_xlat1.x = (u_xlatb1) ? _LightShadowData.x : 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat14 = u_xlat18 * u_xlat18;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.x = u_xlat19 + u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat2.x;
					    u_xlat19 = u_xlat19 * u_xlat8 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_10;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_16;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat7.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[1].xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * u_xlat1.xxxx + _LightShadowData.xxxx;
					    u_xlat1.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_10;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_16;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb18 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat7.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat7.xyz + unused_0_7[1].xyz;
					    u_xlat7.xyz = u_xlat7.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * u_xlat1.xxxx + _LightShadowData.xxxx;
					    u_xlat1.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						vec4 unused_0_8;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_4_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					int u_xlati6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati6 = int(u_xlatu0.y & 3u);
					    u_xlat6 = float(u_xlati6);
					    u_xlatb6 = u_xlat6==0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6 = u_xlat6 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat12 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat18 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat18 * _LightPositionRange.w;
					    u_xlat18 = u_xlat18 * 0.970000029;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xyz);
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat2.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat18));
					    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);
					    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);
					    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);
					    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);
					    u_xlat18 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat19));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat1.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat4.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat2.w = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat2.xw = max(u_xlat2.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat8 = (-_Glossiness) + 1.0;
					    u_xlat14 = u_xlat8 * u_xlat8;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat3.x + 1.0;
					    u_xlat3.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat3.x * u_xlat18 + 1.00000001e-07;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat18 = u_xlat3.x / u_xlat18;
					    u_xlat3.x = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat9 = u_xlat2.x * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat2.w * u_xlat3.x + u_xlat14;
					    u_xlat14 = u_xlat14 * u_xlat2.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat2.w * u_xlat9 + u_xlat14;
					    u_xlat14 = u_xlat14 + 9.99999975e-06;
					    u_xlat14 = 2.0 / u_xlat14;
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat14 = max(u_xlat18, 9.99999975e-05);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlatb3 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb3) ? u_xlat14 : u_xlat18;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat14 = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb14 = u_xlat14!=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat14;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat19) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat19 = dot(vec2(u_xlat19), vec2(u_xlat8));
					    u_xlat19 = u_xlat19 + -0.5;
					    u_xlat8 = u_xlat18 * u_xlat18;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat8;
					    u_xlat4.xyz = (-unity_ColorSpaceDielectricSpec.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat18) + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat2.x * u_xlat2.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat2.w) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.w * u_xlat18;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" }
  GpuProgramID 190545
Program "vp" {
// Platform d3d9 skipped due to earlier errors
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
// Platform d3d9 had shader errors
//   Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
//   Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
//   Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
//   Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
//   Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
//   Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
//   Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
//   Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						vec4 unused_0_5;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_12[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					uint u_xlatu1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					bvec2 u_xlatb11;
					float u_xlat15;
					uint u_xlatu15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD0.xy;
					    u_xlat15 = u_xlat1.x * 3.0;
					    u_xlatu15 = uint(u_xlat15);
					    //null = uintBitsToFloat(u_xlatu15 / 3u);
					    u_xlatu15 = u_xlatu15 % 3u;
					    u_xlat1.x = _Time.x * _ScanSpeed + u_xlat1.y;
					    u_xlatu1 = uint(u_xlat1.x);
					    u_xlati1 = int(u_xlatu1 & 3u);
					    u_xlat6.x = (-_PixelEffect) + 1.0;
					    u_xlat15 = float(int(u_xlatu15));
					    u_xlatb11.xy = equal(vec4(u_xlat15), vec4(0.0, 2.0, 0.0, 2.0)).xy;
					    u_xlat2.xyz = (u_xlatb11.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat15 = u_xlatb11.y ? 1.0 : float(0.0);
					    u_xlat3.xyz = (u_xlatb11.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat6.xyz = max(u_xlat6.xxx, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat15 = float(u_xlati1);
					    u_xlatb15 = u_xlat15==0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * _ScanlineEffect;
					    u_xlat0.xyz = vec3(u_xlat15) * (-u_xlat0.xyz) + u_xlat0.xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat1.y * 0.25;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat2.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat15 = max(u_xlat15, u_xlat6.x);
					        u_xlat1.x = min(u_xlat2.x, u_xlat15);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat3.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat2, u_xlat4);
					        u_xlat2.y = dot(u_xlat3, u_xlat4);
					        u_xlat2.z = dot(u_xlat1, u_xlat4);
					    } else {
					        u_xlat1.xyz = vs_TEXCOORD1.xyz;
					        u_xlat1.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat1);
					        u_xlat2.y = dot(unity_SHAg, u_xlat1);
					        u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						vec4 unused_0_5;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_12[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					uint u_xlatu1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					bvec2 u_xlatb11;
					float u_xlat15;
					uint u_xlatu15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD0.xy;
					    u_xlat15 = u_xlat1.x * 3.0;
					    u_xlatu15 = uint(u_xlat15);
					    //null = uintBitsToFloat(u_xlatu15 / 3u);
					    u_xlatu15 = u_xlatu15 % 3u;
					    u_xlat1.x = _Time.x * _ScanSpeed + u_xlat1.y;
					    u_xlatu1 = uint(u_xlat1.x);
					    u_xlati1 = int(u_xlatu1 & 3u);
					    u_xlat6.x = (-_PixelEffect) + 1.0;
					    u_xlat15 = float(int(u_xlatu15));
					    u_xlatb11.xy = equal(vec4(u_xlat15), vec4(0.0, 2.0, 0.0, 2.0)).xy;
					    u_xlat2.xyz = (u_xlatb11.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat15 = u_xlatb11.y ? 1.0 : float(0.0);
					    u_xlat3.xyz = (u_xlatb11.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat6.xyz = max(u_xlat6.xxx, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat15 = float(u_xlati1);
					    u_xlatb15 = u_xlat15==0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * _ScanlineEffect;
					    u_xlat0.xyz = vec3(u_xlat15) * (-u_xlat0.xyz) + u_xlat0.xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat1.y * 0.25;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat2.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat15 = max(u_xlat15, u_xlat6.x);
					        u_xlat1.x = min(u_xlat2.x, u_xlat15);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat3.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat2, u_xlat4);
					        u_xlat2.y = dot(u_xlat3, u_xlat4);
					        u_xlat2.z = dot(u_xlat1, u_xlat4);
					    } else {
					        u_xlat1.xyz = vs_TEXCOORD1.xyz;
					        u_xlat1.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat1);
					        u_xlat2.y = dot(unity_SHAg, u_xlat1);
					        u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat12 = log2(u_xlat3.w);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat12 = log2(u_xlat3.w);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat12 = max(u_xlat3.w, 9.99999975e-05);
					    u_xlat13 = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat13 = u_xlat13 + 0.5;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat12);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat12 = max(u_xlat3.w, 9.99999975e-05);
					    u_xlat13 = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat13 = u_xlat13 + 0.5;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat12);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						vec4 unused_0_5;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_12[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					uint u_xlatu1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					bvec2 u_xlatb11;
					float u_xlat15;
					uint u_xlatu15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD0.xy;
					    u_xlat15 = u_xlat1.x * 3.0;
					    u_xlatu15 = uint(u_xlat15);
					    //null = uintBitsToFloat(u_xlatu15 / 3u);
					    u_xlatu15 = u_xlatu15 % 3u;
					    u_xlat1.x = _Time.x * _ScanSpeed + u_xlat1.y;
					    u_xlatu1 = uint(u_xlat1.x);
					    u_xlati1 = int(u_xlatu1 & 3u);
					    u_xlat6.x = (-_PixelEffect) + 1.0;
					    u_xlat15 = float(int(u_xlatu15));
					    u_xlatb11.xy = equal(vec4(u_xlat15), vec4(0.0, 2.0, 0.0, 2.0)).xy;
					    u_xlat2.xyz = (u_xlatb11.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat15 = u_xlatb11.y ? 1.0 : float(0.0);
					    u_xlat3.xyz = (u_xlatb11.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat6.xyz = max(u_xlat6.xxx, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat15 = float(u_xlati1);
					    u_xlatb15 = u_xlat15==0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * _ScanlineEffect;
					    u_xlat0.xyz = vec3(u_xlat15) * (-u_xlat0.xyz) + u_xlat0.xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat1.y * 0.25;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat2.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat15 = max(u_xlat15, u_xlat6.x);
					        u_xlat1.x = min(u_xlat2.x, u_xlat15);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat3.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat2, u_xlat4);
					        u_xlat2.y = dot(u_xlat3, u_xlat4);
					        u_xlat2.z = dot(u_xlat1, u_xlat4);
					    } else {
					        u_xlat1.xyz = vs_TEXCOORD1.xyz;
					        u_xlat1.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat1);
					        u_xlat2.y = dot(unity_SHAg, u_xlat1);
					        u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						vec4 unused_0_5;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_12[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					uint u_xlatu1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					bvec2 u_xlatb11;
					float u_xlat15;
					uint u_xlatu15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD0.xy;
					    u_xlat15 = u_xlat1.x * 3.0;
					    u_xlatu15 = uint(u_xlat15);
					    //null = uintBitsToFloat(u_xlatu15 / 3u);
					    u_xlatu15 = u_xlatu15 % 3u;
					    u_xlat1.x = _Time.x * _ScanSpeed + u_xlat1.y;
					    u_xlatu1 = uint(u_xlat1.x);
					    u_xlati1 = int(u_xlatu1 & 3u);
					    u_xlat6.x = (-_PixelEffect) + 1.0;
					    u_xlat15 = float(int(u_xlatu15));
					    u_xlatb11.xy = equal(vec4(u_xlat15), vec4(0.0, 2.0, 0.0, 2.0)).xy;
					    u_xlat2.xyz = (u_xlatb11.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat15 = u_xlatb11.y ? 1.0 : float(0.0);
					    u_xlat3.xyz = (u_xlatb11.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat6.xyz = max(u_xlat6.xxx, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xyz;
					    u_xlat15 = float(u_xlati1);
					    u_xlatb15 = u_xlat15==0.0;
					    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15 = u_xlat15 * _ScanlineEffect;
					    u_xlat0.xyz = vec3(u_xlat15) * (-u_xlat0.xyz) + u_xlat0.xyz;
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat1.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat1.y * 0.25;
					        u_xlat6.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat2.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat15 = max(u_xlat15, u_xlat6.x);
					        u_xlat1.x = min(u_xlat2.x, u_xlat15);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat3.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat4.xyz = vs_TEXCOORD1.xyz;
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat2, u_xlat4);
					        u_xlat2.y = dot(u_xlat3, u_xlat4);
					        u_xlat2.z = dot(u_xlat1, u_xlat4);
					    } else {
					        u_xlat1.xyz = vs_TEXCOORD1.xyz;
					        u_xlat1.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat1);
					        u_xlat2.y = dot(unity_SHAg, u_xlat1);
					        u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = log2(u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat12 = log2(u_xlat3.w);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						vec4 unused_0_7;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_14[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat12 = log2(u_xlat3.w);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat12 = max(u_xlat3.w, 9.99999975e-05);
					    u_xlat13 = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat13 = u_xlat13 + 0.5;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat12);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						vec4 unused_0_6;
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						vec4 unused_0_13[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati4 = int(u_xlatu0.y & 3u);
					    u_xlat4 = float(u_xlati4);
					    u_xlatb4 = u_xlat4==0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat4 = u_xlat4 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat8 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat8) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat12 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat12);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat3.xyz = u_xlat3.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat12 = max(u_xlat3.w, 9.99999975e-05);
					    u_xlat13 = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);
					    u_xlat13 = u_xlat13 + 0.5;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat12);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(_EmissionStrength) + u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 260507
Program "vp" {
// Platform d3d9 skipped due to earlier errors
// Platform d3d9 skipped due to earlier errors
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_3[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
// Platform d3d9 skipped due to earlier errors
// Platform d3d9 had shader errors
//   <no keywords>
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						float unity_UseLinearSpace;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat1.xyz, vec3(unity_MaxOutputValue));
					    u_xlat1.w = 1.0;
					    u_xlat1 = (unity_MetaFragmentControl.x) ? u_xlat1 : vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat2.x = max(u_xlat0.z, 0.0199999996);
					    u_xlat9 = max(u_xlat9, u_xlat2.x);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat2.w = u_xlat9 * 0.00392156886;
					    u_xlat2.xyz = u_xlat0.xyz / u_xlat2.www;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						float _PixelEffect;
						float _ScanlineEffect;
						float _ScanSpeed;
						float _EmissionStrength;
						int _NumPixelsX;
						int _NumPixelsY;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						float unity_UseLinearSpace;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					uvec2 u_xlatu0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xy = vec2(uvec2(ivec2(_NumPixelsX, _NumPixelsY)));
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.y = _Time.x * _ScanSpeed + u_xlat0.y;
					    u_xlatu0.xy = uvec2(u_xlat0.xy);
					    u_xlati3 = int(u_xlatu0.y & 3u);
					    u_xlat3 = float(u_xlati3);
					    u_xlatb3 = u_xlat3==0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat3 = u_xlat3 * _ScanlineEffect;
					    //null = uintBitsToFloat(u_xlatu0.x / 3u);
					    u_xlatu0.x = u_xlatu0.x % 3u;
					    u_xlat0.x = float(int(u_xlatu0.x));
					    u_xlatb0.xz = equal(u_xlat0.xxxx, vec4(0.0, 0.0, 2.0, 0.0)).xz;
					    u_xlat1.xyz = (u_xlatb0.x) ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);
					    u_xlat6 = u_xlatb0.z ? 1.0 : float(0.0);
					    u_xlat2.xyz = (u_xlatb0.x) ? vec3(0.0, -1.0, 1.0) : vec3(-1.0, 0.0, 1.0);
					    u_xlat0.xzw = vec3(u_xlat6) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.x = (-_PixelEffect) + 1.0;
					    u_xlat0.xzw = max(u_xlat0.xzw, u_xlat1.xxx);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat3) * (-u_xlat0.xzw) + u_xlat0.xzw;
					    u_xlat1.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(_EmissionStrength);
					    u_xlat9 = unity_OneOverOutputBoost;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = min(u_xlat1.xyz, vec3(unity_MaxOutputValue));
					    u_xlat1.w = 1.0;
					    u_xlat1 = (unity_MetaFragmentControl.x) ? u_xlat1 : vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(unity_UseLinearSpace);
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.010309278, 0.010309278, 0.010309278);
					    u_xlat9 = max(u_xlat0.y, u_xlat0.x);
					    u_xlat2.x = max(u_xlat0.z, 0.0199999996);
					    u_xlat9 = max(u_xlat9, u_xlat2.x);
					    u_xlat9 = u_xlat9 * 255.0;
					    u_xlat9 = ceil(u_xlat9);
					    u_xlat2.w = u_xlat9 * 0.00392156886;
					    u_xlat2.xyz = u_xlat0.xyz / u_xlat2.www;
					    SV_Target0 = (unity_MetaFragmentControl.y) ? u_xlat2 : u_xlat1;
					    return;
					}"
}
}
 }
}
Fallback "Diffuse"
}