Shader "Shader Forge/Particles/GhostSin" {
Properties {
 _Texture ("Texture", 2D) = "white" { }
 _Color ("Color", Color) = (0.500000,0.500000,0.500000,1.000000)
 _Wavelength ("Wavelength", Float) = 1.000000
 _Speed ("Speed", Float) = 1.000000
 _Amplitude ("Amplitude", Float) = 1.000000
 _Fresnel ("Fresnel", Float) = 0.200000
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="Transparent" }
  ZWrite Off
  Blend One One
  GpuProgramID 46202
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _Speed;
					//   float4 _Time;
					//   float4 _TimeEditor;
					//   float _Wavelength;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       4
					//   unity_WorldToObject c8       3
					//   _Time               c11      1
					//   _TimeEditor         c12      1
					//   _Wavelength         c13      1
					//   _Speed              c14      1
					//   _Amplitude          c15      1
					//
					
					    vs_3_0
					    def c16, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_color o4
					    dcl_texcoord3 o5.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov r0.y, c11.y
					    add r0.x, r0.y, c12.y
					    mul r0.x, r0.x, c14.x
					    mad r0.x, v2.x, c13.x, r0.x
					    mad r0.x, r0.x, c16.x, c16.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c16.z, c16.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c15.x
					    mul r0.x, r0.x, v3.x
					    mul r1.x, r0.x, c8.y
					    mul r1.y, r0.x, c9.y
					    mul r1.z, r0.x, c10.y
					    add r0.xyz, r1, v0
					    mov r0.w, v0.w
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o2.z, c6, r0
					    dp4 o2.w, c7, r0
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o1.xy, v2
					    mov o4, v3
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _TimeEditor;
						vec4 unused_0_2[2];
						float _Wavelength;
						float _Speed;
						float _Amplitude;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0.x = _TimeEditor.y + _Time.y;
					    u_xlat0.x = u_xlat0.x * _Speed;
					    u_xlat0.x = in_TEXCOORD0.x * _Wavelength + u_xlat0.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Amplitude;
					    u_xlat0.x = u_xlat0.x * in_COLOR0.x;
					    u_xlat0.xyz = unity_WorldToObject[1].xyz * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * u_xlat0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD2.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Texture_ST          c1       1
					//   _Color               c2       1
					//   _Fresnel             c3       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c4.x
					    pow r1.x, r0.y, c3.x
					    cmp r0.x, r0.x, r1.x, c4.x
					    mad r0.yz, v0.xxyw, c1.xxyw, c1.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c2.xxyz
					    mul r0.yzw, r0, c2.w
					    mul_pp oC0.xyz, r0.x, r0.yzww
					    mov_pp oC0.w, c4.x
					
					// approximately 19 instruction slots used (1 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Fresnel;
					//   sampler2D _Texture;
					//   float4 _Texture_ST;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   unity_FogParams      c1       1
					//   _Texture_ST          c2       1
					//   _Color               c3       1
					//   _Fresnel             c4       1
					//   _Texture             s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm r1.xyz, r0
					    nrm r0.xyz, v2
					    dp3 r0.x, r0, r1
					    add r0.y, -r0.x, c5.x
					    pow r1.x, r0.y, c4.x
					    cmp r0.x, r0.x, r1.x, c5.x
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s0
					    mul r0.yzw, r1.xxyz, c3.xxyz
					    mul r0.yzw, r0, c3.w
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul r0.w, c1.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c5.x
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _Texture_ST;
						vec4 _Color;
						float _Fresnel;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Texture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD2.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Fresnel;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _Texture_ST.xy + _Texture_ST.zw;
					    u_xlat1 = texture(_Texture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.www;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = vs_TEXCOORD3 * unity_FogParams.x;
					    u_xlat6 = u_xlat6 * (-u_xlat6);
					    u_xlat6 = exp2(u_xlat6);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
}
CustomEditor "ShaderForgeMaterialInspector"
}