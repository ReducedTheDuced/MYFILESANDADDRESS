Shader "Hidden/Image Effects/Cinematic/AmbientOcclusion" {
Properties {
 _MainTex ("", 2D) = "" { }
 _OcclusionTexture ("", 2D) = "" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 53933
Program "vp" {
SubProgram "d3d9 " {
Keywords { "_SOURCE_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_DEPTH" "_SAMPLECOUNT_LOWEST" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_DEPTH" "_SAMPLECOUNT_LOWEST" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_DEPTH" "_SAMPLECOUNT_LOWEST" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_DEPTHNORMALS" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_DEPTHNORMALS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_DEPTHNORMALS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_DEPTHNORMALS" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_DEPTHNORMALS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SAMPLECOUNT_LOWEST" "_SOURCE_DEPTHNORMALS" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_GBUFFER" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_GBUFFER" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SAMPLECOUNT_LOWEST" "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "_SOURCE_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float _Intensity;
					//   float _Radius;
					//   int _SampleCount;
					//   float4 _ScreenParams;
					//   float _TargetScale;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraProjection;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _SampleCount               i0       1
					//   unity_CameraProjection     c0       2
					//   _ScreenParams              c2       1
					//   _ZBufferParams             c3       1
					//   _SampleCount               c4       1
					//   _Intensity                 c5       1
					//   _Radius                    c6       1
					//   _TargetScale               c7       1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//
					
					    ps_3_0
					    def c8, 3.55539989, 0, -1.77769995, 1
					    def c9, 100000000, 0.0671105608, 0.00583714992, 0
					    def c10, 0, 1, 12.9898005, 78.2330017
					    def c11, 6.28318548, -3.14159274, 0.159154937, 0.5
					    def c12, 52.9829178, 12.451169, 0.5, 43758.5469
					    def c13, 0.00200000009, 9.99999975e-005, 0.600000024, 0
					    def c14, 2, -1, 1, -0.999989986
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mad r0.xyz, r0, c8.xxyw, c8.zzww
					    dp3 r0.z, r0, r0
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mul r1.xy, r0, r0.w
					    mad r1.z, r0.z, c14.x, c14.y
					    mul r0.xyz, r1, c14.zzyw
					    texld r1, v0, s0
					    mad r0.w, c3.z, r1.x, c3.w
					    rcp r0.w, r0.w
					    cmp r1.yz, v0.xxyw, c8.y, c8.w
					    dp2add r1.y, r1.yzzw, r1.yzzw, c8.y
					    add r1.zw, c8.w, -v0.xyxy
					    cmp r1.zw, r1, c8.y, c8.w
					    dp2add r1.z, r1.zwzw, r1.zwzw, c8.y
					    cmp r1.yz, -r1, c8.y, c8.w
					    add r1.y, r1.z, r1.y
					    add r1.x, r1.x, c14.w
					    cmp r1.x, r1.x, c8.w, c8.y
					    add r1.x, r1.x, r1.y
					    mad r0.w, r1.x, c9.x, r0.w
					    mad r1.xy, v0, c14.x, c14.y
					    mov r2.x, c0.z
					    mov r2.y, c1.z
					    add r1.xy, r1, -r2
					    rcp r3.x, c0.x
					    rcp r3.y, c1.y
					    mul r1.xy, r1, r3
					    mov r1.z, c8.w
					    mul r4.xyz, r0.w, r1
					    mul r2.zw, c7.x, v0.xyxy
					    mul r2.zw, r2, c2.xyxy
					    frc r3.zw, r2
					    add r2.zw, r2, -r3
					    dp2add r1.w, c9.yzzw, r2.zwzw, c9.w
					    frc r1.w, r1.w
					    mul r1.w, r1.w, c12.x
					    frc r1.w, r1.w
					    rcp r2.z, c4.x
					    mov r5.z, c8.w
					    mov r3.zw, c8.y
					    rep i0
					      mad r2.w, r3.w, c12.y, c12.z
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c11.x, c11.y
					      sincos r6.y, r2.w
					      mul r2.w, r6.y, c12.w
					      frc r2.w, r2.w
					      add r2.w, r1.w, r2.w
					      frc r2.w, r2.w
					      mad r6.z, r2.w, c14.x, c14.y
					      mad r7.xy, r3.w, c10, c10.zxzw
					      dp2add r2.w, r7, c10.ywzw, c10.x
					      mad r2.w, r2.w, c11.z, c11.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c11.x, c11.y
					      sincos r7.y, r2.w
					      mul r2.w, r7.y, c12.w
					      frc r2.w, r2.w
					      add r2.w, r1.w, r2.w
					      add r2.w, r2.w, c12.z
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c11.x, c11.y
					      sincos r7.xy, r2.w
					      mad r2.w, r6.z, -r6.z, c8.w
					      rsq r2.w, r2.w
					      rcp r2.w, r2.w
					      mul r6.xy, r2.w, r7
					      add r3.w, r3.w, c8.w
					      mul r2.w, r2.z, r3.w
					      rsq r2.w, r2.w
					      rcp r2.w, r2.w
					      mul r2.w, r2.w, c6.x
					      mul r6.xyz, r2.w, r6
					      dp3 r2.w, -r0, r6
					      cmp r2.w, r2.w, c8.w, c8.y
					      mul r7.xyz, r2.w, r6
					      mad r6.xyz, r7, -c14.x, r6
					      mad r6.xyz, r1, r0.w, r6
					      dp3 r7.x, c0, r6
					      dp3 r7.y, c1, r6
					      rcp r2.w, r6.z
					      mad r6.xy, r7, r2.w, c8.w
					      mul r6.zw, r6.xyxy, c12.z
					      texld r7, r6.zwzw, s0
					      mad r2.w, c3.z, r7.x, c3.w
					      rcp r2.w, r2.w
					      cmp r6.zw, r6.xyxy, c8.y, c8.w
					      dp2add r4.w, r6.zwzw, r6.zwzw, c8.y
					      cmp r4.w, -r4.w, c8.y, c8.w
					      add r6.zw, -r6.xyxy, c14.x
					      cmp r6.zw, r6, c8.y, c8.w
					      dp2add r5.w, r6.zwzw, r6.zwzw, c8.y
					      cmp r5.w, -r5.w, c8.y, c8.w
					      add r4.w, r4.w, r5.w
					      add r5.w, r7.x, c14.w
					      cmp r5.w, r5.w, c8.w, c8.y
					      add r4.w, r4.w, r5.w
					      mad r2.w, r4.w, c9.x, r2.w
					      add r6.xy, -r2, r6
					      add r6.xy, r6, -c8.w
					      mul r5.xy, r3, r6
					      mad r5.xyw, r5.xyzz, r2.w, -r4.xyzz
					      dp3 r2.w, r5.xyww, r0
					      mad r2.w, r0.w, -c13.x, r2.w
					      max r4.w, r2.w, c8.y
					      dp3 r2.w, r5.xyww, r5.xyww
					      add r2.w, r2.w, c13.y
					      rcp r2.w, r2.w
					      mad r3.z, r4.w, r2.w, r3.z
					    endrep
					    mul r0.x, r3.z, c6.x
					    mul r0.x, r0.x, c5.x
					    mul r0.x, r2.z, r0.x
					    log r0.x, r0.x
					    mul r0.x, r0.x, c13.z
					    exp_pp oC0, r0.x
					
					// approximately 148 instruction slots used (3 texture, 145 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						int _SampleCount;
						vec4 unused_0_2;
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[6];
						mat4x4 unity_CameraProjection;
						vec4 unused_2_2[12];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					float u_xlat10;
					ivec2 u_xlati10;
					bvec2 u_xlatb10;
					vec3 u_xlat13;
					int u_xlati15;
					bvec2 u_xlatb15;
					float u_xlat18;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat1.xy = u_xlat0.xy * vec2(u_xlat18);
					    u_xlat1.z = u_xlat18 + -1.0;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlatb10.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati10.x = int((uint(u_xlatb10.y) * 0xffffffffu) | (uint(u_xlatb10.x) * 0xffffffffu));
					    u_xlatb19.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati10.y = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlati10.xy = ivec2(uvec2(u_xlati10.xy) & uvec2(1u, 1u));
					    u_xlati10.x = u_xlati10.y + u_xlati10.x;
					    u_xlat10 = float(u_xlati10.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat10;
					    u_xlat27 = u_xlat1.x * 100000000.0 + u_xlat27;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy + (-unity_CameraProjection[2].xy);
					    u_xlat2.x = unity_CameraProjection[0].x;
					    u_xlat2.y = unity_CameraProjection[1].y;
					    u_xlat1.xy = u_xlat1.xy / u_xlat2.xy;
					    u_xlat1.z = 1.0;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat28 = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat28 = fract(u_xlat28);
					    u_xlat28 = u_xlat28 * 52.9829178;
					    u_xlat28 = fract(u_xlat28);
					    u_xlat20.x = float(_SampleCount);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat29 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<_SampleCount ; u_xlati_loop_1++)
					    {
					        u_xlat22 = float(u_xlati_loop_1);
					        u_xlat22 = u_xlat22 * 1.00010002;
					        u_xlat4.y = floor(u_xlat22);
					        u_xlat22 = u_xlat4.y * 78.2330017;
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat28 + u_xlat22;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat6.z = u_xlat22 * 2.0 + -1.0;
					        u_xlat22 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat28 + u_xlat22;
					        u_xlat22 = u_xlat22 * 6.28318548;
					        u_xlat7 = sin(u_xlat22);
					        u_xlat8.x = cos(u_xlat22);
					        u_xlat22 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat22 = sqrt(u_xlat22);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat22) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x / u_xlat20.x;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat13.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat32 = dot((-u_xlat0.xyz), u_xlat13.xyz);
					        u_xlatb32 = u_xlat32>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb32)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_CameraProjection[1].xy;
					        u_xlat13.xy = unity_CameraProjection[0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_CameraProjection[2].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat31 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat31 = float(1.0) / u_xlat31;
					        u_xlatb15.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb32 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb15.x = u_xlatb15.y || u_xlatb15.x;
					        u_xlati15 = u_xlatb15.x ? 1 : int(0);
					        u_xlati32 = u_xlati32 + u_xlati15;
					        u_xlat32 = float(u_xlati32);
					        u_xlatb6 = u_xlat6.x>=0.999989986;
					        u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					        u_xlat32 = u_xlat32 + u_xlat6.x;
					        u_xlat31 = u_xlat32 * 100000000.0 + u_xlat31;
					        u_xlat13.xy = u_xlat13.xy + (-unity_CameraProjection[2].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat31) + (-u_xlat3.xyz);
					        u_xlat5.x = dot(u_xlat13.xyz, u_xlat0.xyz);
					        u_xlat5.x = (-u_xlat27) * 0.00200000009 + u_xlat5.x;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat13.x = u_xlat5.x / u_xlat13.x;
					        u_xlat29 = u_xlat29 + u_xlat13.x;
					    }
					    u_xlat0.x = u_xlat29 * _Radius;
					    u_xlat0.x = u_xlat0.x * _Intensity;
					    u_xlat0.x = u_xlat0.x / u_xlat20.x;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    SV_Target0 = exp2(u_xlat0.xxxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						int _SampleCount;
						vec4 unused_0_2;
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[32];
						mat4x4 unity_StereoCameraProjection;
						vec4 unused_2_2[32];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat15;
					ivec2 u_xlati15;
					bvec2 u_xlatb15;
					float u_xlat19;
					ivec2 u_xlati19;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					int u_xlati22;
					bvec2 u_xlatb24;
					float u_xlat27;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat9.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat27 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat27 = 2.0 / u_xlat27;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat27);
					    u_xlat1.z = u_xlat27 + -1.0;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat10.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlatb19.xy = lessThan(vs_TEXCOORD0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati19.x = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), vs_TEXCOORD0.xyxx).xy;
					    u_xlati19.y = int((uint(u_xlatb2.y) * 0xffffffffu) | (uint(u_xlatb2.x) * 0xffffffffu));
					    u_xlati19.xy = ivec2(uvec2(u_xlati19.xy) & uvec2(1u, 1u));
					    u_xlati19.x = u_xlati19.y + u_xlati19.x;
					    u_xlat19 = float(u_xlati19.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat19;
					    u_xlat1.x = u_xlat1.x * 100000000.0 + u_xlat10.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = u_xlat10.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					    u_xlat2.x = unity_StereoCameraProjection[u_xlati0].x;
					    u_xlat2.y = unity_StereoCameraProjection[(u_xlati0 + 1)].y;
					    u_xlat3.xy = u_xlat10.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat10.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat20.x = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat20.x = u_xlat20.x * 52.9829178;
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat29 = float(_SampleCount);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat30 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<_SampleCount ; u_xlati_loop_1++)
					    {
					        u_xlat31 = float(u_xlati_loop_1);
					        u_xlat31 = u_xlat31 * 1.00010002;
					        u_xlat4.y = floor(u_xlat31);
					        u_xlat31 = u_xlat4.y * 78.2330017;
					        u_xlat31 = sin(u_xlat31);
					        u_xlat31 = u_xlat31 * 43758.5469;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat31 = u_xlat20.x + u_xlat31;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat6.z = u_xlat31 * 2.0 + -1.0;
					        u_xlat31 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat31 = sin(u_xlat31);
					        u_xlat31 = u_xlat31 * 43758.5469;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat31 = u_xlat20.x + u_xlat31;
					        u_xlat31 = u_xlat31 * 6.28318548;
					        u_xlat7 = sin(u_xlat31);
					        u_xlat8.x = cos(u_xlat31);
					        u_xlat31 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat31 = sqrt(u_xlat31);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat31) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x / u_xlat29;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat13.x = dot((-u_xlat9.xyz), u_xlat6.xyz);
					        u_xlatb13 = u_xlat13.x>=0.0;
					        u_xlat6.xyz = (bool(u_xlatb13)) ? (-u_xlat6.xyz) : u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat6.xyz;
					        u_xlat13.xz = u_xlat6.yy * unity_StereoCameraProjection[(u_xlati0 + 1)].xy;
					        u_xlat13.xz = unity_StereoCameraProjection[u_xlati0].xy * u_xlat6.xx + u_xlat13.xz;
					        u_xlat13.xz = unity_StereoCameraProjection[(u_xlati0 + 2)].xy * u_xlat6.zz + u_xlat13.xz;
					        u_xlat13.xz = u_xlat13.xz / u_xlat6.zz;
					        u_xlat13.xz = u_xlat13.xz + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xz * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat32 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat32 = float(1.0) / u_xlat32;
					        u_xlatb15.xy = lessThan(u_xlat13.xzxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlati15.x = int((uint(u_xlatb15.y) * 0xffffffffu) | (uint(u_xlatb15.x) * 0xffffffffu));
					        u_xlatb24.xy = lessThan(vec4(2.0, 2.0, 2.0, 2.0), u_xlat13.xzxz).xy;
					        u_xlati15.y = int((uint(u_xlatb24.y) * 0xffffffffu) | (uint(u_xlatb24.x) * 0xffffffffu));
					        u_xlati15.xy = ivec2(uvec2(u_xlati15.xy) & uvec2(1u, 1u));
					        u_xlati15.x = u_xlati15.y + u_xlati15.x;
					        u_xlat15 = float(u_xlati15.x);
					        u_xlatb6 = u_xlat6.x>=0.999989986;
					        u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					        u_xlat6.x = u_xlat6.x + u_xlat15;
					        u_xlat32 = u_xlat6.x * 100000000.0 + u_xlat32;
					        u_xlat13.xz = u_xlat13.xz + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					        u_xlat13.xz = u_xlat13.xz + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xz / u_xlat2.xy;
					        u_xlat5.xyw = u_xlat5.xyz * vec3(u_xlat32) + (-u_xlat10.xyz);
					        u_xlat13.x = dot(u_xlat5.xyw, u_xlat9.xyz);
					        u_xlat13.x = (-u_xlat1.x) * 0.00200000009 + u_xlat13.x;
					        u_xlat13.x = max(u_xlat13.x, 0.0);
					        u_xlat31 = dot(u_xlat5.xyw, u_xlat5.xyw);
					        u_xlat31 = u_xlat31 + 9.99999975e-05;
					        u_xlat13.x = u_xlat13.x / u_xlat31;
					        u_xlat30 = u_xlat30 + u_xlat13.x;
					    }
					    u_xlat0 = u_xlat30 * _Radius;
					    u_xlat0 = u_xlat0 * _Intensity;
					    u_xlat0 = u_xlat0 / u_xlat29;
					    u_xlat0 = log2(u_xlat0);
					    u_xlat0 = u_xlat0 * 0.600000024;
					    SV_Target0 = exp2(vec4(u_xlat0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_DEPTH" "_SAMPLECOUNT_LOWEST" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float _Intensity;
					//   float _Radius;
					//   float4 _ScreenParams;
					//   float _TargetScale;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraProjection;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_CameraProjection     c0       2
					//   _ScreenParams              c2       1
					//   _ZBufferParams             c3       1
					//   _Intensity                 c4       1
					//   _Radius                    c5       1
					//   _TargetScale               c6       1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//
					
					    ps_3_0
					    def c7, 3.55539989, 0, -1.77769995, 1
					    def c8, 2, -1, 1, -0.999989986
					    def c9, 100000000, 0.0671105608, 0.00583714992, 0
					    def c10, 0, 1, 12.9898005, 78.2330017
					    def c11, 6.28318548, -3.14159274, 43758.5469, 0.333333343
					    def c12, 0.159154937, 0.5, 0.00200000009, 9.99999975e-005
					    def c13, 52.9829178, 0, 12.451169, 0.5
					    def c14, 0.600000024, 0, 0, 0
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mad r0.xyz, r0, c7.xxyw, c7.zzww
					    dp3 r0.z, r0, r0
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mul r1.xy, r0, r0.w
					    mad r1.z, r0.z, c8.x, c8.y
					    mul r0.xyz, r1, c8.zzyw
					    texld r1, v0, s0
					    mad r0.w, c3.z, r1.x, c3.w
					    rcp r0.w, r0.w
					    cmp r1.yz, v0.xxyw, c7.y, c7.w
					    dp2add r1.y, r1.yzzw, r1.yzzw, c7.y
					    add r1.zw, c7.w, -v0.xyxy
					    cmp r1.zw, r1, c7.y, c7.w
					    dp2add r1.z, r1.zwzw, r1.zwzw, c7.y
					    cmp r1.yz, -r1, c7.y, c7.w
					    add r1.y, r1.z, r1.y
					    add r1.x, r1.x, c8.w
					    cmp r1.x, r1.x, c7.w, c7.y
					    add r1.x, r1.x, r1.y
					    mad r0.w, r1.x, c9.x, r0.w
					    mad r1.xy, v0, c8.x, c8.y
					    mov r2.x, c0.z
					    mov r2.y, c1.z
					    add r1.xy, r1, -r2
					    rcp r3.x, c0.x
					    rcp r3.y, c1.y
					    mul r1.xy, r1, r3
					    mov r1.z, c7.w
					    mul r4.xyz, r0.w, r1
					    mul r2.zw, c6.x, v0.xyxy
					    mul r2.zw, r2, c2.xyxy
					    frc r3.zw, r2
					    add r2.zw, r2, -r3
					    dp2add r1.w, c9.yzzw, r2.zwzw, c9.w
					    frc r1.w, r1.w
					    mul r1.w, r1.w, c13.x
					    frc r1.w, r1.w
					    mov r5.z, c7.w
					    mov r2.zw, c7.y
					    rep i0
					      mad r3.z, r2.w, c13.z, c13.w
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c11.x, c11.y
					      sincos r6.y, r3.z
					      mul r3.z, r6.y, c11.z
					      frc r3.z, r3.z
					      add r3.z, r1.w, r3.z
					      frc r3.z, r3.z
					      mad r6.z, r3.z, c8.x, c8.y
					      mad r3.zw, r2.w, c10.xyxy, c10.xyzx
					      dp2add r3.z, r3.zwzw, c10.ywzw, c10.x
					      mad r3.z, r3.z, c12.x, c12.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c11.x, c11.y
					      sincos r7.y, r3.z
					      mul r3.z, r7.y, c11.z
					      frc r3.z, r3.z
					      add r3.z, r1.w, r3.z
					      add r3.z, r3.z, c13.w
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c11.x, c11.y
					      sincos r7.xy, r3.z
					      mad r3.z, r6.z, -r6.z, c7.w
					      rsq r3.z, r3.z
					      rcp r3.z, r3.z
					      mul r6.xy, r3.z, r7
					      add r2.w, r2.w, c7.w
					      mul r3.z, r2.w, c11.w
					      rsq r3.z, r3.z
					      rcp r3.z, r3.z
					      mul r3.z, r3.z, c5.x
					      mul r6.xyz, r3.z, r6
					      dp3 r3.z, -r0, r6
					      cmp r3.z, r3.z, c7.w, c7.y
					      mul r7.xyz, r3.z, r6
					      mad r6.xyz, r7, -c8.x, r6
					      mad r6.xyz, r1, r0.w, r6
					      dp3 r7.x, c0, r6
					      dp3 r7.y, c1, r6
					      rcp r3.z, r6.z
					      mad r3.zw, r7.xyxy, r3.z, c7.w
					      mul r6.xy, r3.zwzw, c13.w
					      texld r6, r6, s0
					      mad r4.w, c3.z, r6.x, c3.w
					      rcp r4.w, r4.w
					      cmp r6.yz, r3.xzww, c7.y, c7.w
					      dp2add r5.w, r6.yzzw, r6.yzzw, c7.y
					      cmp r5.w, -r5.w, c7.y, c7.w
					      add r6.yz, -r3.xzww, c8.x
					      cmp r6.yz, r6, c7.y, c7.w
					      dp2add r6.y, r6.yzzw, r6.yzzw, c7.y
					      cmp r6.y, -r6.y, c7.y, c7.w
					      add r5.w, r5.w, r6.y
					      add r6.x, r6.x, c8.w
					      cmp r6.x, r6.x, c7.w, c7.y
					      add r5.w, r5.w, r6.x
					      mad r4.w, r5.w, c9.x, r4.w
					      add r3.zw, -r2.xyxy, r3
					      add r3.zw, r3, -c7.w
					      mul r5.xy, r3, r3.zwzw
					      mad r5.xyw, r5.xyzz, r4.w, -r4.xyzz
					      dp3 r3.z, r5.xyww, r0
					      mad r3.z, r0.w, -c12.z, r3.z
					      max r4.w, r3.z, c7.y
					      dp3 r3.z, r5.xyww, r5.xyww
					      add r3.z, r3.z, c12.w
					      rcp r3.z, r3.z
					      mad r2.z, r4.w, r3.z, r2.z
					    endrep
					    mul r0.x, r2.z, c5.x
					    mul r0.x, r0.x, c4.x
					    mul r0.x, r0.x, c11.w
					    log r0.x, r0.x
					    mul r0.x, r0.x, c14.x
					    exp_pp oC0, r0.x
					
					// approximately 147 instruction slots used (3 texture, 144 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_DEPTH" "_SAMPLECOUNT_LOWEST" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[6];
						mat4x4 unity_CameraProjection;
						vec4 unused_2_2[12];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat8;
					float u_xlat10;
					ivec2 u_xlati10;
					bvec2 u_xlatb10;
					vec3 u_xlat13;
					bvec2 u_xlatb15;
					float u_xlat18;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat27;
					float u_xlat28;
					int u_xlati29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat1.xy = u_xlat0.xy * vec2(u_xlat18);
					    u_xlat1.z = u_xlat18 + -1.0;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlatb10.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati10.x = int((uint(u_xlatb10.y) * 0xffffffffu) | (uint(u_xlatb10.x) * 0xffffffffu));
					    u_xlatb19.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati10.y = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlati10.xy = ivec2(uvec2(u_xlati10.xy) & uvec2(1u, 1u));
					    u_xlati10.x = u_xlati10.y + u_xlati10.x;
					    u_xlat10 = float(u_xlati10.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat10;
					    u_xlat27 = u_xlat1.x * 100000000.0 + u_xlat27;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy + (-unity_CameraProjection[2].xy);
					    u_xlat2.x = unity_CameraProjection[0].x;
					    u_xlat2.y = unity_CameraProjection[1].y;
					    u_xlat1.xy = u_xlat1.xy / u_xlat2.xy;
					    u_xlat1.z = 1.0;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat28 = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat28 = fract(u_xlat28);
					    u_xlat28 = u_xlat28 * 52.9829178;
					    u_xlat28 = fract(u_xlat28);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat20.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat30 = float(u_xlati_loop_1);
					        u_xlat30 = u_xlat30 * 1.00010002;
					        u_xlat4.y = floor(u_xlat30);
					        u_xlat30 = u_xlat4.y * 78.2330017;
					        u_xlat30 = sin(u_xlat30);
					        u_xlat30 = u_xlat30 * 43758.5469;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat30 = u_xlat28 + u_xlat30;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat6.z = u_xlat30 * 2.0 + -1.0;
					        u_xlat30 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat30 = sin(u_xlat30);
					        u_xlat30 = u_xlat30 * 43758.5469;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat30 = u_xlat28 + u_xlat30;
					        u_xlat30 = u_xlat30 * 6.28318548;
					        u_xlat7 = sin(u_xlat30);
					        u_xlat8.x = cos(u_xlat30);
					        u_xlat30 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat30 = sqrt(u_xlat30);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat30) * u_xlat8.xy;
					        u_xlat30 = u_xlat4.y + 1.0;
					        u_xlat30 = u_xlat30 * 0.333333343;
					        u_xlat30 = sqrt(u_xlat30);
					        u_xlat30 = u_xlat30 * _Radius;
					        u_xlat13.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					        u_xlat30 = dot((-u_xlat0.xyz), u_xlat13.xyz);
					        u_xlatb30 = u_xlat30>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb30)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_CameraProjection[1].xy;
					        u_xlat13.xy = unity_CameraProjection[0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_CameraProjection[2].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat30 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat30 = float(1.0) / u_xlat30;
					        u_xlatb15.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb31 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati31 = u_xlatb31 ? 1 : int(0);
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb32 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlati31 = u_xlati31 + u_xlati32;
					        u_xlat31 = float(u_xlati31);
					        u_xlatb32 = u_xlat6.x>=0.999989986;
					        u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
					        u_xlat31 = u_xlat31 + u_xlat32;
					        u_xlat30 = u_xlat31 * 100000000.0 + u_xlat30;
					        u_xlat13.xy = u_xlat13.xy + (-unity_CameraProjection[2].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat30) + (-u_xlat3.xyz);
					        u_xlat30 = dot(u_xlat13.xyz, u_xlat0.xyz);
					        u_xlat30 = (-u_xlat27) * 0.00200000009 + u_xlat30;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat30 = u_xlat30 / u_xlat13.x;
					        u_xlat20.x = u_xlat20.x + u_xlat30;
					    }
					    u_xlat0.x = u_xlat20.x * _Radius;
					    u_xlat0.x = u_xlat0.x * _Intensity;
					    u_xlat0.x = u_xlat0.x * 0.333333343;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    SV_Target0 = exp2(u_xlat0.xxxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_DEPTH" "_SAMPLECOUNT_LOWEST" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[32];
						mat4x4 unity_StereoCameraProjection;
						vec4 unused_2_2[32];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat13;
					int u_xlati15;
					bvec2 u_xlatb15;
					float u_xlat19;
					ivec2 u_xlati19;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat27;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat9.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat27 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat27 = 2.0 / u_xlat27;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat27);
					    u_xlat1.z = u_xlat27 + -1.0;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat10.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlatb19.xy = lessThan(vs_TEXCOORD0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati19.x = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), vs_TEXCOORD0.xyxx).xy;
					    u_xlati19.y = int((uint(u_xlatb2.y) * 0xffffffffu) | (uint(u_xlatb2.x) * 0xffffffffu));
					    u_xlati19.xy = ivec2(uvec2(u_xlati19.xy) & uvec2(1u, 1u));
					    u_xlati19.x = u_xlati19.y + u_xlati19.x;
					    u_xlat19 = float(u_xlati19.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat19;
					    u_xlat1.x = u_xlat1.x * 100000000.0 + u_xlat10.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = u_xlat10.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					    u_xlat2.x = unity_StereoCameraProjection[u_xlati0].x;
					    u_xlat2.y = unity_StereoCameraProjection[(u_xlati0 + 1)].y;
					    u_xlat3.xy = u_xlat10.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat10.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat20.x = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat20.x = u_xlat20.x * 52.9829178;
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat29 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat22 = float(u_xlati_loop_1);
					        u_xlat22 = u_xlat22 * 1.00010002;
					        u_xlat4.y = floor(u_xlat22);
					        u_xlat22 = u_xlat4.y * 78.2330017;
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat20.x + u_xlat22;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat6.z = u_xlat22 * 2.0 + -1.0;
					        u_xlat22 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat20.x + u_xlat22;
					        u_xlat22 = u_xlat22 * 6.28318548;
					        u_xlat7 = sin(u_xlat22);
					        u_xlat8.x = cos(u_xlat22);
					        u_xlat22 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat22 = sqrt(u_xlat22);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat22) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x * 0.333333343;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat13.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat32 = dot((-u_xlat9.xyz), u_xlat13.xyz);
					        u_xlatb32 = u_xlat32>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb32)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_StereoCameraProjection[(u_xlati0 + 1)].xy;
					        u_xlat13.xy = unity_StereoCameraProjection[u_xlati0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_StereoCameraProjection[(u_xlati0 + 2)].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat31 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat31 = float(1.0) / u_xlat31;
					        u_xlatb15.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb32 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb15.x = u_xlatb15.y || u_xlatb15.x;
					        u_xlati15 = u_xlatb15.x ? 1 : int(0);
					        u_xlati32 = u_xlati32 + u_xlati15;
					        u_xlat32 = float(u_xlati32);
					        u_xlatb6 = u_xlat6.x>=0.999989986;
					        u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					        u_xlat32 = u_xlat32 + u_xlat6.x;
					        u_xlat31 = u_xlat32 * 100000000.0 + u_xlat31;
					        u_xlat13.xy = u_xlat13.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat31) + (-u_xlat10.xyz);
					        u_xlat5.x = dot(u_xlat13.xyz, u_xlat9.xyz);
					        u_xlat5.x = (-u_xlat1.x) * 0.00200000009 + u_xlat5.x;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat13.x = u_xlat5.x / u_xlat13.x;
					        u_xlat29 = u_xlat29 + u_xlat13.x;
					    }
					    u_xlat0 = u_xlat29 * _Radius;
					    u_xlat0 = u_xlat0 * _Intensity;
					    u_xlat0 = u_xlat0 * 0.333333343;
					    u_xlat0 = log2(u_xlat0);
					    u_xlat0 = u_xlat0 * 0.600000024;
					    SV_Target0 = exp2(vec4(u_xlat0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_DEPTHNORMALS" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   float _Intensity;
					//   float4 _ProjectionParams;
					//   float _Radius;
					//   int _SampleCount;
					//   float4 _ScreenParams;
					//   float _TargetScale;
					//   row_major float4x4 unity_CameraProjection;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _SampleCount               i0       1
					//   unity_CameraProjection     c0       2
					//   _ProjectionParams          c2       1
					//   _ScreenParams              c3       1
					//   _SampleCount               c4       1
					//   _Intensity                 c5       1
					//   _Radius                    c6       1
					//   _TargetScale               c7       1
					//   _CameraDepthNormalsTexture s0       1
					//
					
					    ps_3_0
					    def c8, 3.55539989, 0, -1.77769995, 1
					    def c9, 2, -1, 1, 100000000
					    def c10, 1, 0.00392156886, 0, -0.999989986
					    def c11, 1.52587891e-005, 0.0671105608, 0.00583714992, 0
					    def c12, 0, 1, 12.9898005, 78.2330017
					    def c13, 6.28318548, -3.14159274, 0.159154937, 0.5
					    def c14, 52.9829178, 12.451169, 0.5, 43758.5469
					    def c15, 0.00200000009, 9.99999975e-005, 0.600000024, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r1.xyz, r0, c8.xxyw, c8.zzww
					    dp3 r0.x, r1, r1
					    rcp r0.x, r0.x
					    add r0.y, r0.x, r0.x
					    mul r1.xy, r1, r0.y
					    mad r1.z, r0.x, c9.x, c9.y
					    mul r1.xyz, r1, c9.zzyw
					    dp2add r0.x, r0.zwzw, c10, c10.z
					    cmp r2.xy, v0, c8.y, c8.w
					    dp2add r0.y, r2, r2, c8.y
					    cmp r0.y, -r0.y, c8.y, c8.w
					    add r2.xy, c8.w, -v0
					    cmp r2.xy, r2, c8.y, c8.w
					    dp2add r1.w, r2, r2, c8.y
					    cmp r1.w, -r1.w, c8.y, c8.w
					    add r0.y, r0.y, r1.w
					    dp2add r0.z, r0.zwzw, c10, c10.w
					    cmp r0.z, r0.z, c8.w, c8.y
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0.y, c9.w
					    mad r0.x, r0.x, c2.z, r0.y
					    mov r2.x, c11.x
					    mad r0.x, c2.z, -r2.x, r0.x
					    mad r0.yz, v0.xxyw, c9.x, c9.y
					    mov r2.x, c0.z
					    mov r2.y, c1.z
					    add r0.yz, r0, -r2.xxyw
					    rcp r3.x, c0.x
					    rcp r3.y, c1.y
					    mul r4.xy, r0.yzzw, r3
					    mov r4.z, c8.w
					    mul r0.yzw, r0.x, r4.xxyz
					    mul r2.zw, c7.x, v0.xyxy
					    mul r2.zw, r2, c3.xyxy
					    frc r3.zw, r2
					    add r2.zw, r2, -r3
					    dp2add r1.w, c11.yzzw, r2.zwzw, c11.w
					    frc r1.w, r1.w
					    mul r1.w, r1.w, c14.x
					    frc r1.w, r1.w
					    rcp r2.z, c4.x
					    mov r5.z, c8.w
					    mov r3.zw, c8.y
					    rep i0
					      mad r2.w, r3.w, c14.y, c14.z
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r6.y, r2.w
					      mul r2.w, r6.y, c14.w
					      frc r2.w, r2.w
					      add r2.w, r1.w, r2.w
					      frc r2.w, r2.w
					      mad r6.z, r2.w, c9.x, c9.y
					      mad r7.xy, r3.w, c12, c12.zxzw
					      dp2add r2.w, r7, c12.ywzw, c12.x
					      mad r2.w, r2.w, c13.z, c13.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r7.y, r2.w
					      mul r2.w, r7.y, c14.w
					      frc r2.w, r2.w
					      add r2.w, r1.w, r2.w
					      add r2.w, r2.w, c14.z
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r7.xy, r2.w
					      mad r2.w, r6.z, -r6.z, c8.w
					      rsq r2.w, r2.w
					      rcp r2.w, r2.w
					      mul r6.xy, r2.w, r7
					      add r3.w, r3.w, c8.w
					      mul r2.w, r2.z, r3.w
					      rsq r2.w, r2.w
					      rcp r2.w, r2.w
					      mul r2.w, r2.w, c6.x
					      mul r6.xyz, r2.w, r6
					      dp3 r2.w, -r1, r6
					      cmp r2.w, r2.w, c8.w, c8.y
					      mul r7.xyz, r2.w, r6
					      mad r6.xyz, r7, -c9.x, r6
					      mad r6.xyz, r4, r0.x, r6
					      dp3 r7.x, c0, r6
					      dp3 r7.y, c1, r6
					      rcp r2.w, r6.z
					      mad r6.xy, r7, r2.w, c8.w
					      mul r6.zw, r6.xyxy, c14.z
					      texld r7, r6.zwzw, s0
					      dp2add r2.w, r7.zwzw, c10, c10.z
					      cmp r6.zw, r6.xyxy, c8.y, c8.w
					      dp2add r4.w, r6.zwzw, r6.zwzw, c8.y
					      cmp r4.w, -r4.w, c8.y, c8.w
					      add r6.zw, -r6.xyxy, c9.x
					      cmp r6.zw, r6, c8.y, c8.w
					      dp2add r5.w, r6.zwzw, r6.zwzw, c8.y
					      cmp r5.w, -r5.w, c8.y, c8.w
					      add r4.w, r4.w, r5.w
					      dp2add r5.w, r7.zwzw, c10, c10.w
					      cmp r5.w, r5.w, c8.w, c8.y
					      add r4.w, r4.w, r5.w
					      mul r4.w, r4.w, c9.w
					      mad r2.w, r2.w, c2.z, r4.w
					      add r6.xy, -r2, r6
					      add r6.xy, r6, -c8.w
					      mul r5.xy, r3, r6
					      mad r5.xyw, r5.xyzz, r2.w, -r0.yzzw
					      dp3 r2.w, r5.xyww, r1
					      mad r2.w, r0.x, -c15.x, r2.w
					      max r4.w, r2.w, c8.y
					      dp3 r2.w, r5.xyww, r5.xyww
					      add r2.w, r2.w, c15.y
					      rcp r2.w, r2.w
					      mad r3.z, r4.w, r2.w, r3.z
					    endrep
					    mul r0.x, r3.z, c6.x
					    mul r0.x, r0.x, c5.x
					    mul r0.x, r2.z, r0.x
					    log r0.x, r0.x
					    mul r0.x, r0.x, c15.z
					    exp_pp oC0, r0.x
					
					// approximately 154 instruction slots used (2 texture, 152 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_DEPTHNORMALS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						int _SampleCount;
						vec4 unused_0_2;
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 _ScreenParams;
						vec4 unused_1_3[2];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[6];
						mat4x4 unity_CameraProjection;
						vec4 unused_2_2[12];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					int u_xlati6;
					bvec2 u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					ivec2 u_xlati9;
					bvec2 u_xlatb9;
					vec3 u_xlat13;
					float u_xlat18;
					bvec2 u_xlatb18;
					vec2 u_xlat20;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = 2.0 / u_xlat0.x;
					    u_xlat1.xy = u_xlat1.xy * u_xlat0.xx;
					    u_xlat1.z = u_xlat0.x + -1.0;
					    u_xlat0.x = dot(u_xlat0.zw, vec2(1.0, 0.00392156886));
					    u_xlatb9.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati9.x = int((uint(u_xlatb9.y) * 0xffffffffu) | (uint(u_xlatb9.x) * 0xffffffffu));
					    u_xlatb18.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati9.y = int((uint(u_xlatb18.y) * 0xffffffffu) | (uint(u_xlatb18.x) * 0xffffffffu));
					    u_xlati9.xy = ivec2(uvec2(u_xlati9.xy) & uvec2(1u, 1u));
					    u_xlati9.x = u_xlati9.y + u_xlati9.x;
					    u_xlat9.x = float(u_xlati9.x);
					    u_xlatb18.x = u_xlat0.x>=0.999989986;
					    u_xlat18 = u_xlatb18.x ? 1.0 : float(0.0);
					    u_xlat9.x = u_xlat18 + u_xlat9.x;
					    u_xlat9.x = u_xlat9.x * 100000000.0;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + u_xlat9.x;
					    u_xlat0.x = (-_ProjectionParams.z) * 1.52587891e-05 + u_xlat0.x;
					    u_xlat9.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9.xy = u_xlat9.xy + (-unity_CameraProjection[2].xy);
					    u_xlat2.x = unity_CameraProjection[0].x;
					    u_xlat2.y = unity_CameraProjection[1].y;
					    u_xlat3.xy = u_xlat9.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat9.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat28 = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat1.w = fract(u_xlat28);
					    u_xlat1 = u_xlat1 * vec4(1.0, 1.0, -1.0, 52.9829178);
					    u_xlat28 = fract(u_xlat1.w);
					    u_xlat20.x = float(_SampleCount);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat29 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<_SampleCount ; u_xlati_loop_1++)
					    {
					        u_xlat22 = float(u_xlati_loop_1);
					        u_xlat22 = u_xlat22 * 1.00010002;
					        u_xlat4.y = floor(u_xlat22);
					        u_xlat22 = u_xlat4.y * 78.2330017;
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat28 + u_xlat22;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat6.z = u_xlat22 * 2.0 + -1.0;
					        u_xlat22 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat28 + u_xlat22;
					        u_xlat22 = u_xlat22 * 6.28318548;
					        u_xlat7 = sin(u_xlat22);
					        u_xlat8.x = cos(u_xlat22);
					        u_xlat22 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat22 = sqrt(u_xlat22);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat22) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x / u_xlat20.x;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat13.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat32 = dot((-u_xlat1.xyz), u_xlat13.xyz);
					        u_xlatb32 = u_xlat32>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb32)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_CameraProjection[1].xy;
					        u_xlat13.xy = unity_CameraProjection[0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_CameraProjection[2].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthNormalsTexture, u_xlat6.xy);
					        u_xlat31 = dot(u_xlat6.zw, vec2(1.0, 0.00392156886));
					        u_xlatb6.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb32 = u_xlatb6.y || u_xlatb6.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlatb6.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb6.x = u_xlatb6.y || u_xlatb6.x;
					        u_xlati6 = u_xlatb6.x ? 1 : int(0);
					        u_xlati32 = u_xlati32 + u_xlati6;
					        u_xlat32 = float(u_xlati32);
					        u_xlatb6.x = u_xlat31>=0.999989986;
					        u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
					        u_xlat32 = u_xlat32 + u_xlat6.x;
					        u_xlat32 = u_xlat32 * 100000000.0;
					        u_xlat31 = u_xlat31 * _ProjectionParams.z + u_xlat32;
					        u_xlat13.xy = u_xlat13.xy + (-unity_CameraProjection[2].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat31) + (-u_xlat9.xyz);
					        u_xlat5.x = dot(u_xlat13.xyz, u_xlat1.xyz);
					        u_xlat5.x = (-u_xlat0.x) * 0.00200000009 + u_xlat5.x;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat13.x = u_xlat5.x / u_xlat13.x;
					        u_xlat29 = u_xlat29 + u_xlat13.x;
					    }
					    u_xlat0.x = u_xlat29 * _Radius;
					    u_xlat0.x = u_xlat0.x * _Intensity;
					    u_xlat0.x = u_xlat0.x / u_xlat20.x;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    SV_Target0 = exp2(u_xlat0.xxxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_DEPTHNORMALS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						int _SampleCount;
						vec4 unused_0_2;
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 _ScreenParams;
						vec4 unused_1_3[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[32];
						mat4x4 unity_StereoCameraProjection;
						vec4 unused_2_2[32];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					ivec2 u_xlati6;
					bvec2 u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					ivec2 u_xlati10;
					bvec2 u_xlatb10;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat15;
					bvec2 u_xlatb15;
					float u_xlat19;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					int u_xlati22;
					float u_xlat27;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat9.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat27 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat27 = 2.0 / u_xlat27;
					    u_xlat2.xy = u_xlat9.xy * vec2(u_xlat27);
					    u_xlat2.z = u_xlat27 + -1.0;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1.x = dot(u_xlat1.zw, vec2(1.0, 0.00392156886));
					    u_xlatb10.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati10.x = int((uint(u_xlatb10.y) * 0xffffffffu) | (uint(u_xlatb10.x) * 0xffffffffu));
					    u_xlatb19.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati10.y = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlati10.xy = ivec2(uvec2(u_xlati10.xy) & uvec2(1u, 1u));
					    u_xlati10.x = u_xlati10.y + u_xlati10.x;
					    u_xlat10.x = float(u_xlati10.x);
					    u_xlatb19.x = u_xlat1.x>=0.999989986;
					    u_xlat19 = u_xlatb19.x ? 1.0 : float(0.0);
					    u_xlat10.x = u_xlat19 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * 100000000.0;
					    u_xlat1.x = u_xlat1.x * _ProjectionParams.z + u_xlat10.x;
					    u_xlat1.x = (-_ProjectionParams.z) * 1.52587891e-05 + u_xlat1.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = u_xlat10.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					    u_xlat2.x = unity_StereoCameraProjection[u_xlati0].x;
					    u_xlat2.y = unity_StereoCameraProjection[(u_xlati0 + 1)].y;
					    u_xlat3.xy = u_xlat10.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat10.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat20.x = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat20.x = u_xlat20.x * 52.9829178;
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat29 = float(_SampleCount);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat30 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<_SampleCount ; u_xlati_loop_1++)
					    {
					        u_xlat31 = float(u_xlati_loop_1);
					        u_xlat31 = u_xlat31 * 1.00010002;
					        u_xlat4.y = floor(u_xlat31);
					        u_xlat31 = u_xlat4.y * 78.2330017;
					        u_xlat31 = sin(u_xlat31);
					        u_xlat31 = u_xlat31 * 43758.5469;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat31 = u_xlat20.x + u_xlat31;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat6.z = u_xlat31 * 2.0 + -1.0;
					        u_xlat31 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat31 = sin(u_xlat31);
					        u_xlat31 = u_xlat31 * 43758.5469;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat31 = u_xlat20.x + u_xlat31;
					        u_xlat31 = u_xlat31 * 6.28318548;
					        u_xlat7 = sin(u_xlat31);
					        u_xlat8.x = cos(u_xlat31);
					        u_xlat31 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat31 = sqrt(u_xlat31);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat31) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x / u_xlat29;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat13.x = dot((-u_xlat9.xyz), u_xlat6.xyz);
					        u_xlatb13 = u_xlat13.x>=0.0;
					        u_xlat6.xyz = (bool(u_xlatb13)) ? (-u_xlat6.xyz) : u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat6.xyz;
					        u_xlat13.xz = u_xlat6.yy * unity_StereoCameraProjection[(u_xlati0 + 1)].xy;
					        u_xlat13.xz = unity_StereoCameraProjection[u_xlati0].xy * u_xlat6.xx + u_xlat13.xz;
					        u_xlat13.xz = unity_StereoCameraProjection[(u_xlati0 + 2)].xy * u_xlat6.zz + u_xlat13.xz;
					        u_xlat13.xz = u_xlat13.xz / u_xlat6.zz;
					        u_xlat13.xz = u_xlat13.xz + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xz * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthNormalsTexture, u_xlat6.xy);
					        u_xlat32 = dot(u_xlat6.zw, vec2(1.0, 0.00392156886));
					        u_xlatb6.xy = lessThan(u_xlat13.xzxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlati6.x = int((uint(u_xlatb6.y) * 0xffffffffu) | (uint(u_xlatb6.x) * 0xffffffffu));
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xzxx).xy;
					        u_xlati6.y = int((uint(u_xlatb15.y) * 0xffffffffu) | (uint(u_xlatb15.x) * 0xffffffffu));
					        u_xlati6.xy = ivec2(uvec2(u_xlati6.xy) & uvec2(1u, 1u));
					        u_xlati6.x = u_xlati6.y + u_xlati6.x;
					        u_xlat6.x = float(u_xlati6.x);
					        u_xlatb15.x = u_xlat32>=0.999989986;
					        u_xlat15 = u_xlatb15.x ? 1.0 : float(0.0);
					        u_xlat6.x = u_xlat15 + u_xlat6.x;
					        u_xlat6.x = u_xlat6.x * 100000000.0;
					        u_xlat32 = u_xlat32 * _ProjectionParams.z + u_xlat6.x;
					        u_xlat13.xz = u_xlat13.xz + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					        u_xlat13.xz = u_xlat13.xz + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xz / u_xlat2.xy;
					        u_xlat5.xyw = u_xlat5.xyz * vec3(u_xlat32) + (-u_xlat10.xyz);
					        u_xlat13.x = dot(u_xlat5.xyw, u_xlat9.xyz);
					        u_xlat13.x = (-u_xlat1.x) * 0.00200000009 + u_xlat13.x;
					        u_xlat13.x = max(u_xlat13.x, 0.0);
					        u_xlat31 = dot(u_xlat5.xyw, u_xlat5.xyw);
					        u_xlat31 = u_xlat31 + 9.99999975e-05;
					        u_xlat13.x = u_xlat13.x / u_xlat31;
					        u_xlat30 = u_xlat30 + u_xlat13.x;
					    }
					    u_xlat0 = u_xlat30 * _Radius;
					    u_xlat0 = u_xlat0 * _Intensity;
					    u_xlat0 = u_xlat0 / u_xlat29;
					    u_xlat0 = log2(u_xlat0);
					    u_xlat0 = u_xlat0 * 0.600000024;
					    SV_Target0 = exp2(vec4(u_xlat0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_DEPTHNORMALS" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   float _Intensity;
					//   float4 _ProjectionParams;
					//   float _Radius;
					//   float4 _ScreenParams;
					//   float _TargetScale;
					//   row_major float4x4 unity_CameraProjection;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_CameraProjection     c0       2
					//   _ProjectionParams          c2       1
					//   _ScreenParams              c3       1
					//   _Intensity                 c4       1
					//   _Radius                    c5       1
					//   _TargetScale               c6       1
					//   _CameraDepthNormalsTexture s0       1
					//
					
					    ps_3_0
					    def c7, 3.55539989, 0, -1.77769995, 1
					    def c8, 2, -1, 1, 100000000
					    def c9, 1.52587891e-005, 0.0671105608, 0.00583714992, 0
					    def c10, 0, 1, 12.9898005, 78.2330017
					    def c11, 6.28318548, -3.14159274, 43758.5469, 0.333333343
					    def c12, 0.159154937, 0.5, 0.00200000009, 9.99999975e-005
					    def c13, 52.9829178, 0, 12.451169, 0.5
					    def c14, 1, 0.00392156886, 0, -0.999989986
					    def c15, 0.600000024, 0, 0, 0
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r1.xyz, r0, c7.xxyw, c7.zzww
					    dp3 r0.x, r1, r1
					    rcp r0.x, r0.x
					    add r0.y, r0.x, r0.x
					    mul r1.xy, r1, r0.y
					    mad r1.z, r0.x, c8.x, c8.y
					    mul r1.xyz, r1, c8.zzyw
					    dp2add r0.x, r0.zwzw, c14, c14.z
					    cmp r2.xy, v0, c7.y, c7.w
					    dp2add r0.y, r2, r2, c7.y
					    cmp r0.y, -r0.y, c7.y, c7.w
					    add r2.xy, c7.w, -v0
					    cmp r2.xy, r2, c7.y, c7.w
					    dp2add r1.w, r2, r2, c7.y
					    cmp r1.w, -r1.w, c7.y, c7.w
					    add r0.y, r0.y, r1.w
					    dp2add r0.z, r0.zwzw, c14, c14.w
					    cmp r0.z, r0.z, c7.w, c7.y
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0.y, c8.w
					    mad r0.x, r0.x, c2.z, r0.y
					    mov r2.x, c9.x
					    mad r0.x, c2.z, -r2.x, r0.x
					    mad r0.yz, v0.xxyw, c8.x, c8.y
					    mov r2.x, c0.z
					    mov r2.y, c1.z
					    add r0.yz, r0, -r2.xxyw
					    rcp r3.x, c0.x
					    rcp r3.y, c1.y
					    mul r4.xy, r0.yzzw, r3
					    mov r4.z, c7.w
					    mul r0.yzw, r0.x, r4.xxyz
					    mul r2.zw, c6.x, v0.xyxy
					    mul r2.zw, r2, c3.xyxy
					    frc r3.zw, r2
					    add r2.zw, r2, -r3
					    dp2add r1.w, c9.yzzw, r2.zwzw, c9.w
					    frc r1.w, r1.w
					    mul r1.w, r1.w, c13.x
					    frc r1.w, r1.w
					    mov r5.z, c7.w
					    mov r2.zw, c7.y
					    rep i0
					      mad r3.z, r2.w, c13.z, c13.w
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c11.x, c11.y
					      sincos r6.y, r3.z
					      mul r3.z, r6.y, c11.z
					      frc r3.z, r3.z
					      add r3.z, r1.w, r3.z
					      frc r3.z, r3.z
					      mad r6.z, r3.z, c8.x, c8.y
					      mad r3.zw, r2.w, c10.xyxy, c10.xyzx
					      dp2add r3.z, r3.zwzw, c10.ywzw, c10.x
					      mad r3.z, r3.z, c12.x, c12.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c11.x, c11.y
					      sincos r7.y, r3.z
					      mul r3.z, r7.y, c11.z
					      frc r3.z, r3.z
					      add r3.z, r1.w, r3.z
					      add r3.z, r3.z, c13.w
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c11.x, c11.y
					      sincos r7.xy, r3.z
					      mad r3.z, r6.z, -r6.z, c7.w
					      rsq r3.z, r3.z
					      rcp r3.z, r3.z
					      mul r6.xy, r3.z, r7
					      add r2.w, r2.w, c7.w
					      mul r3.z, r2.w, c11.w
					      rsq r3.z, r3.z
					      rcp r3.z, r3.z
					      mul r3.z, r3.z, c5.x
					      mul r6.xyz, r3.z, r6
					      dp3 r3.z, -r1, r6
					      cmp r3.z, r3.z, c7.w, c7.y
					      mul r7.xyz, r3.z, r6
					      mad r6.xyz, r7, -c8.x, r6
					      mad r6.xyz, r4, r0.x, r6
					      dp3 r7.x, c0, r6
					      dp3 r7.y, c1, r6
					      rcp r3.z, r6.z
					      mad r3.zw, r7.xyxy, r3.z, c7.w
					      mul r6.xy, r3.zwzw, c13.w
					      texld r6, r6, s0
					      dp2add r4.w, r6.zwzw, c14, c14.z
					      cmp r6.xy, r3.zwzw, c7.y, c7.w
					      dp2add r5.w, r6, r6, c7.y
					      cmp r5.w, -r5.w, c7.y, c7.w
					      add r6.xy, -r3.zwzw, c8.x
					      cmp r6.xy, r6, c7.y, c7.w
					      dp2add r6.x, r6, r6, c7.y
					      cmp r6.x, -r6.x, c7.y, c7.w
					      add r5.w, r5.w, r6.x
					      dp2add r6.x, r6.zwzw, c14, c14.w
					      cmp r6.x, r6.x, c7.w, c7.y
					      add r5.w, r5.w, r6.x
					      mul r5.w, r5.w, c8.w
					      mad r4.w, r4.w, c2.z, r5.w
					      add r3.zw, -r2.xyxy, r3
					      add r3.zw, r3, -c7.w
					      mul r5.xy, r3, r3.zwzw
					      mad r5.xyw, r5.xyzz, r4.w, -r0.yzzw
					      dp3 r3.z, r5.xyww, r1
					      mad r3.z, r0.x, -c12.z, r3.z
					      max r4.w, r3.z, c7.y
					      dp3 r3.z, r5.xyww, r5.xyww
					      add r3.z, r3.z, c12.w
					      rcp r3.z, r3.z
					      mad r2.z, r4.w, r3.z, r2.z
					    endrep
					    mul r0.x, r2.z, c5.x
					    mul r0.x, r0.x, c4.x
					    mul r0.x, r0.x, c11.w
					    log r0.x, r0.x
					    mul r0.x, r0.x, c15.x
					    exp_pp oC0, r0.x
					
					// approximately 153 instruction slots used (2 texture, 151 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_DEPTHNORMALS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 _ScreenParams;
						vec4 unused_1_3[2];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[6];
						mat4x4 unity_CameraProjection;
						vec4 unused_2_2[12];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					bvec2 u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					ivec2 u_xlati9;
					bvec2 u_xlatb9;
					vec3 u_xlat13;
					float u_xlat18;
					bvec2 u_xlatb18;
					vec2 u_xlat20;
					float u_xlat28;
					int u_xlati29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = 2.0 / u_xlat0.x;
					    u_xlat1.xy = u_xlat1.xy * u_xlat0.xx;
					    u_xlat1.z = u_xlat0.x + -1.0;
					    u_xlat0.x = dot(u_xlat0.zw, vec2(1.0, 0.00392156886));
					    u_xlatb9.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati9.x = int((uint(u_xlatb9.y) * 0xffffffffu) | (uint(u_xlatb9.x) * 0xffffffffu));
					    u_xlatb18.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati9.y = int((uint(u_xlatb18.y) * 0xffffffffu) | (uint(u_xlatb18.x) * 0xffffffffu));
					    u_xlati9.xy = ivec2(uvec2(u_xlati9.xy) & uvec2(1u, 1u));
					    u_xlati9.x = u_xlati9.y + u_xlati9.x;
					    u_xlat9.x = float(u_xlati9.x);
					    u_xlatb18.x = u_xlat0.x>=0.999989986;
					    u_xlat18 = u_xlatb18.x ? 1.0 : float(0.0);
					    u_xlat9.x = u_xlat18 + u_xlat9.x;
					    u_xlat9.x = u_xlat9.x * 100000000.0;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + u_xlat9.x;
					    u_xlat0.x = (-_ProjectionParams.z) * 1.52587891e-05 + u_xlat0.x;
					    u_xlat9.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9.xy = u_xlat9.xy + (-unity_CameraProjection[2].xy);
					    u_xlat2.x = unity_CameraProjection[0].x;
					    u_xlat2.y = unity_CameraProjection[1].y;
					    u_xlat3.xy = u_xlat9.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat9.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat28 = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat1.w = fract(u_xlat28);
					    u_xlat1 = u_xlat1 * vec4(1.0, 1.0, -1.0, 52.9829178);
					    u_xlat28 = fract(u_xlat1.w);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat20.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat30 = float(u_xlati_loop_1);
					        u_xlat30 = u_xlat30 * 1.00010002;
					        u_xlat4.y = floor(u_xlat30);
					        u_xlat30 = u_xlat4.y * 78.2330017;
					        u_xlat30 = sin(u_xlat30);
					        u_xlat30 = u_xlat30 * 43758.5469;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat30 = u_xlat28 + u_xlat30;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat6.z = u_xlat30 * 2.0 + -1.0;
					        u_xlat30 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat30 = sin(u_xlat30);
					        u_xlat30 = u_xlat30 * 43758.5469;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat30 = u_xlat28 + u_xlat30;
					        u_xlat30 = u_xlat30 * 6.28318548;
					        u_xlat7 = sin(u_xlat30);
					        u_xlat8.x = cos(u_xlat30);
					        u_xlat30 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat30 = sqrt(u_xlat30);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat30) * u_xlat8.xy;
					        u_xlat30 = u_xlat4.y + 1.0;
					        u_xlat30 = u_xlat30 * 0.333333343;
					        u_xlat30 = sqrt(u_xlat30);
					        u_xlat30 = u_xlat30 * _Radius;
					        u_xlat13.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					        u_xlat30 = dot((-u_xlat1.xyz), u_xlat13.xyz);
					        u_xlatb30 = u_xlat30>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb30)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat3.xyz * u_xlat0.xxx + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_CameraProjection[1].xy;
					        u_xlat13.xy = unity_CameraProjection[0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_CameraProjection[2].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthNormalsTexture, u_xlat6.xy);
					        u_xlat30 = dot(u_xlat6.zw, vec2(1.0, 0.00392156886));
					        u_xlatb6.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb31 = u_xlatb6.y || u_xlatb6.x;
					        u_xlati31 = u_xlatb31 ? 1 : int(0);
					        u_xlatb6.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb32 = u_xlatb6.y || u_xlatb6.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlati31 = u_xlati31 + u_xlati32;
					        u_xlat31 = float(u_xlati31);
					        u_xlatb32 = u_xlat30>=0.999989986;
					        u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
					        u_xlat31 = u_xlat31 + u_xlat32;
					        u_xlat31 = u_xlat31 * 100000000.0;
					        u_xlat30 = u_xlat30 * _ProjectionParams.z + u_xlat31;
					        u_xlat13.xy = u_xlat13.xy + (-unity_CameraProjection[2].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat30) + (-u_xlat9.xyz);
					        u_xlat30 = dot(u_xlat13.xyz, u_xlat1.xyz);
					        u_xlat30 = (-u_xlat0.x) * 0.00200000009 + u_xlat30;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat30 = u_xlat30 / u_xlat13.x;
					        u_xlat20.x = u_xlat20.x + u_xlat30;
					    }
					    u_xlat0.x = u_xlat20.x * _Radius;
					    u_xlat0.x = u_xlat0.x * _Intensity;
					    u_xlat0.x = u_xlat0.x * 0.333333343;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    SV_Target0 = exp2(u_xlat0.xxxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SAMPLECOUNT_LOWEST" "_SOURCE_DEPTHNORMALS" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 _ScreenParams;
						vec4 unused_1_3[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[32];
						mat4x4 unity_StereoCameraProjection;
						vec4 unused_2_2[32];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					int u_xlati6;
					bvec2 u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					ivec2 u_xlati10;
					bvec2 u_xlatb10;
					vec3 u_xlat13;
					float u_xlat19;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat27;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat9.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat27 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat27 = 2.0 / u_xlat27;
					    u_xlat2.xy = u_xlat9.xy * vec2(u_xlat27);
					    u_xlat2.z = u_xlat27 + -1.0;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1.x = dot(u_xlat1.zw, vec2(1.0, 0.00392156886));
					    u_xlatb10.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati10.x = int((uint(u_xlatb10.y) * 0xffffffffu) | (uint(u_xlatb10.x) * 0xffffffffu));
					    u_xlatb19.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati10.y = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlati10.xy = ivec2(uvec2(u_xlati10.xy) & uvec2(1u, 1u));
					    u_xlati10.x = u_xlati10.y + u_xlati10.x;
					    u_xlat10.x = float(u_xlati10.x);
					    u_xlatb19.x = u_xlat1.x>=0.999989986;
					    u_xlat19 = u_xlatb19.x ? 1.0 : float(0.0);
					    u_xlat10.x = u_xlat19 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * 100000000.0;
					    u_xlat1.x = u_xlat1.x * _ProjectionParams.z + u_xlat10.x;
					    u_xlat1.x = (-_ProjectionParams.z) * 1.52587891e-05 + u_xlat1.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = u_xlat10.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					    u_xlat2.x = unity_StereoCameraProjection[u_xlati0].x;
					    u_xlat2.y = unity_StereoCameraProjection[(u_xlati0 + 1)].y;
					    u_xlat3.xy = u_xlat10.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat10.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat20.x = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat20.x = u_xlat20.x * 52.9829178;
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat29 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat22 = float(u_xlati_loop_1);
					        u_xlat22 = u_xlat22 * 1.00010002;
					        u_xlat4.y = floor(u_xlat22);
					        u_xlat22 = u_xlat4.y * 78.2330017;
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat20.x + u_xlat22;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat6.z = u_xlat22 * 2.0 + -1.0;
					        u_xlat22 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat20.x + u_xlat22;
					        u_xlat22 = u_xlat22 * 6.28318548;
					        u_xlat7 = sin(u_xlat22);
					        u_xlat8.x = cos(u_xlat22);
					        u_xlat22 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat22 = sqrt(u_xlat22);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat22) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x * 0.333333343;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat13.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat32 = dot((-u_xlat9.xyz), u_xlat13.xyz);
					        u_xlatb32 = u_xlat32>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb32)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_StereoCameraProjection[(u_xlati0 + 1)].xy;
					        u_xlat13.xy = unity_StereoCameraProjection[u_xlati0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_StereoCameraProjection[(u_xlati0 + 2)].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthNormalsTexture, u_xlat6.xy);
					        u_xlat31 = dot(u_xlat6.zw, vec2(1.0, 0.00392156886));
					        u_xlatb6.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb32 = u_xlatb6.y || u_xlatb6.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlatb6.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb6.x = u_xlatb6.y || u_xlatb6.x;
					        u_xlati6 = u_xlatb6.x ? 1 : int(0);
					        u_xlati32 = u_xlati32 + u_xlati6;
					        u_xlat32 = float(u_xlati32);
					        u_xlatb6.x = u_xlat31>=0.999989986;
					        u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
					        u_xlat32 = u_xlat32 + u_xlat6.x;
					        u_xlat32 = u_xlat32 * 100000000.0;
					        u_xlat31 = u_xlat31 * _ProjectionParams.z + u_xlat32;
					        u_xlat13.xy = u_xlat13.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat31) + (-u_xlat10.xyz);
					        u_xlat5.x = dot(u_xlat13.xyz, u_xlat9.xyz);
					        u_xlat5.x = (-u_xlat1.x) * 0.00200000009 + u_xlat5.x;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat13.x = u_xlat5.x / u_xlat13.x;
					        u_xlat29 = u_xlat29 + u_xlat13.x;
					    }
					    u_xlat0 = u_xlat29 * _Radius;
					    u_xlat0 = u_xlat0 * _Intensity;
					    u_xlat0 = u_xlat0 * 0.333333343;
					    u_xlat0 = log2(u_xlat0);
					    u_xlat0 = u_xlat0 * 0.600000024;
					    SV_Target0 = exp2(vec4(u_xlat0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_GBUFFER" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float _Intensity;
					//   float _Radius;
					//   int _SampleCount;
					//   float4 _ScreenParams;
					//   float _TargetScale;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraProjection;
					//   row_major float4x4 unity_WorldToCamera;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _SampleCount           i0       1
					//   unity_WorldToCamera    c0       3
					//   unity_CameraProjection c3       2
					//   _ScreenParams          c5       1
					//   _ZBufferParams         c6       1
					//   _SampleCount           c7       1
					//   _Intensity             c8       1
					//   _Radius                c9       1
					//   _TargetScale           c10      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//
					
					    ps_3_0
					    def c11, 2, -1, 0, 1
					    def c12, -0.999989986, 100000000, 52.9829178, 43758.5469
					    def c13, 0.0671105608, 0.00583714992, 0, 0.5
					    def c14, 0.5, 12.9898005, 0, 0.159154937
					    def c15, 12.451169, 0, 1, 78.2330017
					    def c16, 6.28318548, -3.14159274, 0.00200000009, 9.99999975e-005
					    def c17, 0.600000024, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mad r0.xyz, r0, c11.x, c11.y
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    texld r0, v0, s1
					    mad r0.y, c6.z, r0.x, c6.w
					    rcp r0.y, r0.y
					    cmp r0.zw, v0.xyxy, c11.z, c11.w
					    dp2add r0.z, r0.zwzw, r0.zwzw, c11.z
					    add r2.xy, c11.w, -v0
					    cmp r2.xy, r2, c11.z, c11.w
					    dp2add r0.w, r2, r2, c11.z
					    cmp r0.zw, -r0, c11.z, c11.w
					    add r0.z, r0.w, r0.z
					    add r0.x, r0.x, c12.x
					    cmp r0.x, r0.x, c11.w, c11.z
					    add r0.x, r0.x, r0.z
					    mad r0.x, r0.x, c12.y, r0.y
					    mad r0.yz, v0.xxyw, c11.x, c11.y
					    mov r2.x, c3.z
					    mov r2.y, c4.z
					    add r0.yz, r0, -r2.xxyw
					    rcp r3.x, c3.x
					    rcp r3.y, c4.y
					    mul r4.xy, r0.yzzw, r3
					    mov r4.z, c11.w
					    mul r0.yzw, r0.x, r4.xxyz
					    mul r2.zw, c10.x, v0.xyxy
					    mul r2.zw, r2, c5.xyxy
					    frc r3.zw, r2
					    add r2.zw, r2, -r3
					    dp2add r1.w, c13, r2.zwzw, c13.z
					    frc r1.w, r1.w
					    mul r1.w, r1.w, c12.z
					    frc r1.w, r1.w
					    rcp r2.z, c7.x
					    mov r5.z, c11.w
					    mov r3.zw, c11.z
					    rep i0
					      mov r6.xyz, c15
					      mad r6.xyz, r3.w, r6, c14
					      frc r2.w, r6.x
					      mad r2.w, r2.w, c16.x, c16.y
					      sincos r7.y, r2.w
					      mul r2.w, r7.y, c12.w
					      frc r2.w, r2.w
					      add r2.w, r1.w, r2.w
					      frc r2.w, r2.w
					      mad r7.z, r2.w, c11.x, c11.y
					      dp2add r2.w, r6.yzzw, c15.zwzw, c15.y
					      mad r2.w, r2.w, c14.w, c14.x
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c16.x, c16.y
					      sincos r6.y, r2.w
					      mul r2.w, r6.y, c12.w
					      frc r2.w, r2.w
					      add r2.w, r1.w, r2.w
					      add r2.w, r2.w, c13.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c16.x, c16.y
					      sincos r6.xy, r2.w
					      mad r2.w, r7.z, -r7.z, c11.w
					      rsq r2.w, r2.w
					      rcp r2.w, r2.w
					      mul r7.xy, r2.w, r6
					      add r3.w, r3.w, c11.w
					      mul r2.w, r2.z, r3.w
					      rsq r2.w, r2.w
					      rcp r2.w, r2.w
					      mul r2.w, r2.w, c9.x
					      mul r6.xyz, r2.w, r7
					      dp3 r2.w, -r1, r6
					      cmp r2.w, r2.w, c11.w, c11.z
					      mul r7.xyz, r2.w, r6
					      mad r6.xyz, r7, -c11.x, r6
					      mad r6.xyz, r4, r0.x, r6
					      dp3 r7.x, c3, r6
					      dp3 r7.y, c4, r6
					      rcp r2.w, r6.z
					      mad r6.xy, r7, r2.w, c11.w
					      mul r6.zw, r6.xyxy, c13.w
					      texld r7, r6.zwzw, s1
					      mad r2.w, c6.z, r7.x, c6.w
					      rcp r2.w, r2.w
					      cmp r6.zw, r6.xyxy, c11.z, c11.w
					      dp2add r4.w, r6.zwzw, r6.zwzw, c11.z
					      cmp r4.w, -r4.w, c11.z, c11.w
					      add r6.zw, -r6.xyxy, c11.x
					      cmp r6.zw, r6, c11.z, c11.w
					      dp2add r5.w, r6.zwzw, r6.zwzw, c11.z
					      cmp r5.w, -r5.w, c11.z, c11.w
					      add r4.w, r4.w, r5.w
					      add r5.w, r7.x, c12.x
					      cmp r5.w, r5.w, c11.w, c11.z
					      add r4.w, r4.w, r5.w
					      mad r2.w, r4.w, c12.y, r2.w
					      add r6.xy, -r2, r6
					      add r6.xy, r6, c11.y
					      mul r5.xy, r3, r6
					      mad r5.xyw, r5.xyzz, r2.w, -r0.yzzw
					      dp3 r2.w, r5.xyww, r1
					      mad r2.w, r0.x, -c16.z, r2.w
					      max r4.w, r2.w, c11.z
					      dp3 r2.w, r5.xyww, r5.xyww
					      add r2.w, r2.w, c16.w
					      rcp r2.w, r2.w
					      mad r3.z, r4.w, r2.w, r3.z
					    endrep
					    mul r0.x, r3.z, c9.x
					    mul r0.x, r0.x, c8.x
					    mul r0.x, r2.z, r0.x
					    log r0.x, r0.x
					    mul r0.x, r0.x, c17.x
					    exp_pp oC0, r0.x
					
					// approximately 145 instruction slots used (3 texture, 142 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						int _SampleCount;
						vec4 unused_0_2;
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[6];
						mat4x4 unity_CameraProjection;
						vec4 unused_2_2[4];
						mat4x4 unity_WorldToCamera;
						vec4 unused_2_4[4];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					float u_xlat10;
					ivec2 u_xlati10;
					bvec2 u_xlatb10;
					vec3 u_xlat13;
					int u_xlati15;
					bvec2 u_xlatb15;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlat0 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat0.xyw = unity_WorldToCamera[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToCamera[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlatb10.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati10.x = int((uint(u_xlatb10.y) * 0xffffffffu) | (uint(u_xlatb10.x) * 0xffffffffu));
					    u_xlatb19.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati10.y = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlati10.xy = ivec2(uvec2(u_xlati10.xy) & uvec2(1u, 1u));
					    u_xlati10.x = u_xlati10.y + u_xlati10.x;
					    u_xlat10 = float(u_xlati10.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat10;
					    u_xlat27 = u_xlat1.x * 100000000.0 + u_xlat27;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy + (-unity_CameraProjection[2].xy);
					    u_xlat2.x = unity_CameraProjection[0].x;
					    u_xlat2.y = unity_CameraProjection[1].y;
					    u_xlat1.xy = u_xlat1.xy / u_xlat2.xy;
					    u_xlat1.z = 1.0;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat28 = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat28 = fract(u_xlat28);
					    u_xlat28 = u_xlat28 * 52.9829178;
					    u_xlat28 = fract(u_xlat28);
					    u_xlat20.x = float(_SampleCount);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat29 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<_SampleCount ; u_xlati_loop_1++)
					    {
					        u_xlat22 = float(u_xlati_loop_1);
					        u_xlat22 = u_xlat22 * 1.00010002;
					        u_xlat4.y = floor(u_xlat22);
					        u_xlat22 = u_xlat4.y * 78.2330017;
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat28 + u_xlat22;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat6.z = u_xlat22 * 2.0 + -1.0;
					        u_xlat22 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat28 + u_xlat22;
					        u_xlat22 = u_xlat22 * 6.28318548;
					        u_xlat7 = sin(u_xlat22);
					        u_xlat8.x = cos(u_xlat22);
					        u_xlat22 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat22 = sqrt(u_xlat22);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat22) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x / u_xlat20.x;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat13.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat32 = dot((-u_xlat0.xyz), u_xlat13.xyz);
					        u_xlatb32 = u_xlat32>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb32)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_CameraProjection[1].xy;
					        u_xlat13.xy = unity_CameraProjection[0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_CameraProjection[2].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat31 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat31 = float(1.0) / u_xlat31;
					        u_xlatb15.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb32 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb15.x = u_xlatb15.y || u_xlatb15.x;
					        u_xlati15 = u_xlatb15.x ? 1 : int(0);
					        u_xlati32 = u_xlati32 + u_xlati15;
					        u_xlat32 = float(u_xlati32);
					        u_xlatb6 = u_xlat6.x>=0.999989986;
					        u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					        u_xlat32 = u_xlat32 + u_xlat6.x;
					        u_xlat31 = u_xlat32 * 100000000.0 + u_xlat31;
					        u_xlat13.xy = u_xlat13.xy + (-unity_CameraProjection[2].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat31) + (-u_xlat3.xyz);
					        u_xlat5.x = dot(u_xlat13.xyz, u_xlat0.xyz);
					        u_xlat5.x = (-u_xlat27) * 0.00200000009 + u_xlat5.x;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat13.x = u_xlat5.x / u_xlat13.x;
					        u_xlat29 = u_xlat29 + u_xlat13.x;
					    }
					    u_xlat0.x = u_xlat29 * _Radius;
					    u_xlat0.x = u_xlat0.x * _Intensity;
					    u_xlat0.x = u_xlat0.x / u_xlat20.x;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    SV_Target0 = exp2(u_xlat0.xxxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						int _SampleCount;
						vec4 unused_0_2;
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[32];
						mat4x4 unity_StereoCameraProjection;
						vec4 unused_2_2[12];
						mat4x4 unity_StereoWorldToCamera;
						vec4 unused_2_4[16];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat15;
					ivec2 u_xlati15;
					bvec2 u_xlatb15;
					float u_xlat19;
					ivec2 u_xlati19;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					int u_xlati22;
					bvec2 u_xlatb24;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					bool u_xlatb31;
					float u_xlat32;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat9.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat9.yyy * unity_StereoWorldToCamera[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoWorldToCamera[u_xlati0].xyz * u_xlat9.xxx + u_xlat1.xyz;
					    u_xlat9.xyz = unity_StereoWorldToCamera[(u_xlati0 + 2)].xyz * u_xlat9.zzz + u_xlat1.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat10.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlatb19.xy = lessThan(vs_TEXCOORD0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati19.x = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), vs_TEXCOORD0.xyxx).xy;
					    u_xlati19.y = int((uint(u_xlatb2.y) * 0xffffffffu) | (uint(u_xlatb2.x) * 0xffffffffu));
					    u_xlati19.xy = ivec2(uvec2(u_xlati19.xy) & uvec2(1u, 1u));
					    u_xlati19.x = u_xlati19.y + u_xlati19.x;
					    u_xlat19 = float(u_xlati19.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat19;
					    u_xlat1.x = u_xlat1.x * 100000000.0 + u_xlat10.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = u_xlat10.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					    u_xlat2.x = unity_StereoCameraProjection[u_xlati0].x;
					    u_xlat2.y = unity_StereoCameraProjection[(u_xlati0 + 1)].y;
					    u_xlat3.xy = u_xlat10.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat10.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat20.x = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat20.x = u_xlat20.x * 52.9829178;
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat29 = float(_SampleCount);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat30 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<_SampleCount ; u_xlati_loop_1++)
					    {
					        u_xlat31 = float(u_xlati_loop_1);
					        u_xlat31 = u_xlat31 * 1.00010002;
					        u_xlat4.y = floor(u_xlat31);
					        u_xlat31 = u_xlat4.y * 78.2330017;
					        u_xlat31 = sin(u_xlat31);
					        u_xlat31 = u_xlat31 * 43758.5469;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat31 = u_xlat20.x + u_xlat31;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat6.z = u_xlat31 * 2.0 + -1.0;
					        u_xlat31 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat31 = sin(u_xlat31);
					        u_xlat31 = u_xlat31 * 43758.5469;
					        u_xlat31 = fract(u_xlat31);
					        u_xlat31 = u_xlat20.x + u_xlat31;
					        u_xlat31 = u_xlat31 * 6.28318548;
					        u_xlat7 = sin(u_xlat31);
					        u_xlat8.x = cos(u_xlat31);
					        u_xlat31 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat31 = sqrt(u_xlat31);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat31) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x / u_xlat29;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat13.x = dot((-u_xlat9.xyz), u_xlat6.xyz);
					        u_xlatb13 = u_xlat13.x>=0.0;
					        u_xlat6.xyz = (bool(u_xlatb13)) ? (-u_xlat6.xyz) : u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat6.xyz;
					        u_xlat13.xz = u_xlat6.yy * unity_StereoCameraProjection[(u_xlati0 + 1)].xy;
					        u_xlat13.xz = unity_StereoCameraProjection[u_xlati0].xy * u_xlat6.xx + u_xlat13.xz;
					        u_xlat13.xz = unity_StereoCameraProjection[(u_xlati0 + 2)].xy * u_xlat6.zz + u_xlat13.xz;
					        u_xlat13.xz = u_xlat13.xz / u_xlat6.zz;
					        u_xlat13.xz = u_xlat13.xz + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xz * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat32 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat32 = float(1.0) / u_xlat32;
					        u_xlatb15.xy = lessThan(u_xlat13.xzxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlati15.x = int((uint(u_xlatb15.y) * 0xffffffffu) | (uint(u_xlatb15.x) * 0xffffffffu));
					        u_xlatb24.xy = lessThan(vec4(2.0, 2.0, 2.0, 2.0), u_xlat13.xzxz).xy;
					        u_xlati15.y = int((uint(u_xlatb24.y) * 0xffffffffu) | (uint(u_xlatb24.x) * 0xffffffffu));
					        u_xlati15.xy = ivec2(uvec2(u_xlati15.xy) & uvec2(1u, 1u));
					        u_xlati15.x = u_xlati15.y + u_xlati15.x;
					        u_xlat15 = float(u_xlati15.x);
					        u_xlatb6 = u_xlat6.x>=0.999989986;
					        u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					        u_xlat6.x = u_xlat6.x + u_xlat15;
					        u_xlat32 = u_xlat6.x * 100000000.0 + u_xlat32;
					        u_xlat13.xz = u_xlat13.xz + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					        u_xlat13.xz = u_xlat13.xz + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xz / u_xlat2.xy;
					        u_xlat5.xyw = u_xlat5.xyz * vec3(u_xlat32) + (-u_xlat10.xyz);
					        u_xlat13.x = dot(u_xlat5.xyw, u_xlat9.xyz);
					        u_xlat13.x = (-u_xlat1.x) * 0.00200000009 + u_xlat13.x;
					        u_xlat13.x = max(u_xlat13.x, 0.0);
					        u_xlat31 = dot(u_xlat5.xyw, u_xlat5.xyw);
					        u_xlat31 = u_xlat31 + 9.99999975e-05;
					        u_xlat13.x = u_xlat13.x / u_xlat31;
					        u_xlat30 = u_xlat30 + u_xlat13.x;
					    }
					    u_xlat0 = u_xlat30 * _Radius;
					    u_xlat0 = u_xlat0 * _Intensity;
					    u_xlat0 = u_xlat0 / u_xlat29;
					    u_xlat0 = log2(u_xlat0);
					    u_xlat0 = u_xlat0 * 0.600000024;
					    SV_Target0 = exp2(vec4(u_xlat0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_GBUFFER" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float _Intensity;
					//   float _Radius;
					//   float4 _ScreenParams;
					//   float _TargetScale;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraProjection;
					//   row_major float4x4 unity_WorldToCamera;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   unity_WorldToCamera    c0       3
					//   unity_CameraProjection c3       2
					//   _ScreenParams          c5       1
					//   _ZBufferParams         c6       1
					//   _Intensity             c7       1
					//   _Radius                c8       1
					//   _TargetScale           c9       1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//
					
					    ps_3_0
					    def c10, -0.999989986, 100000000, 52.9829178, 0
					    def c11, 2, -1, 0, 1
					    def c12, 0.0671105608, 0.00583714992, 0, 43758.5469
					    def c13, 0, 1, 12.9898005, 78.2330017
					    def c14, 0.159154937, 0.5, 0.333333343, 0.00200000009
					    def c15, 12.451169, 0.5, 6.28318548, -3.14159274
					    def c16, 9.99999975e-005, 0.600000024, 0, 0
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mad r0.xyz, r0, c11.x, c11.y
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    texld r0, v0, s1
					    mad r0.y, c6.z, r0.x, c6.w
					    rcp r0.y, r0.y
					    cmp r0.zw, v0.xyxy, c11.z, c11.w
					    dp2add r0.z, r0.zwzw, r0.zwzw, c11.z
					    add r2.xy, c11.w, -v0
					    cmp r2.xy, r2, c11.z, c11.w
					    dp2add r0.w, r2, r2, c11.z
					    cmp r0.zw, -r0, c11.z, c11.w
					    add r0.z, r0.w, r0.z
					    add r0.x, r0.x, c10.x
					    cmp r0.x, r0.x, c11.w, c11.z
					    add r0.x, r0.x, r0.z
					    mad r0.x, r0.x, c10.y, r0.y
					    mad r0.yz, v0.xxyw, c11.x, c11.y
					    mov r2.x, c3.z
					    mov r2.y, c4.z
					    add r0.yz, r0, -r2.xxyw
					    rcp r3.x, c3.x
					    rcp r3.y, c4.y
					    mul r4.xy, r0.yzzw, r3
					    mov r4.z, c11.w
					    mul r0.yzw, r0.x, r4.xxyz
					    mul r2.zw, c9.x, v0.xyxy
					    mul r2.zw, r2, c5.xyxy
					    frc r3.zw, r2
					    add r2.zw, r2, -r3
					    dp2add r1.w, c12, r2.zwzw, c12.z
					    frc r1.w, r1.w
					    mul r1.w, r1.w, c10.z
					    frc r1.w, r1.w
					    mov r5.z, c11.w
					    mov r2.zw, c11.z
					    rep i0
					      mad r3.z, r2.w, c15.x, c15.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c15.z, c15.w
					      sincos r6.y, r3.z
					      mul r3.z, r6.y, c12.w
					      frc r3.z, r3.z
					      add r3.z, r1.w, r3.z
					      frc r3.z, r3.z
					      mad r6.z, r3.z, c11.x, c11.y
					      mad r3.zw, r2.w, c13.xyxy, c13.xyzx
					      dp2add r3.z, r3.zwzw, c13.ywzw, c13.x
					      mad r3.z, r3.z, c14.x, c14.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c15.z, c15.w
					      sincos r7.y, r3.z
					      mul r3.z, r7.y, c12.w
					      frc r3.z, r3.z
					      add r3.z, r1.w, r3.z
					      add r3.z, r3.z, c15.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c15.z, c15.w
					      sincos r7.xy, r3.z
					      mad r3.z, r6.z, -r6.z, c11.w
					      rsq r3.z, r3.z
					      rcp r3.z, r3.z
					      mul r6.xy, r3.z, r7
					      add r2.w, r2.w, c11.w
					      mul r3.z, r2.w, c14.z
					      rsq r3.z, r3.z
					      rcp r3.z, r3.z
					      mul r3.z, r3.z, c8.x
					      mul r6.xyz, r3.z, r6
					      dp3 r3.z, -r1, r6
					      cmp r3.z, r3.z, c11.w, c11.z
					      mul r7.xyz, r3.z, r6
					      mad r6.xyz, r7, -c11.x, r6
					      mad r6.xyz, r4, r0.x, r6
					      dp3 r7.x, c3, r6
					      dp3 r7.y, c4, r6
					      rcp r3.z, r6.z
					      mad r3.zw, r7.xyxy, r3.z, c11.w
					      mul r6.xy, r3.zwzw, c15.y
					      texld r6, r6, s1
					      mad r4.w, c6.z, r6.x, c6.w
					      rcp r4.w, r4.w
					      cmp r6.yz, r3.xzww, c11.z, c11.w
					      dp2add r5.w, r6.yzzw, r6.yzzw, c11.z
					      cmp r5.w, -r5.w, c11.z, c11.w
					      add r6.yz, -r3.xzww, c11.x
					      cmp r6.yz, r6, c11.z, c11.w
					      dp2add r6.y, r6.yzzw, r6.yzzw, c11.z
					      cmp r6.y, -r6.y, c11.z, c11.w
					      add r5.w, r5.w, r6.y
					      add r6.x, r6.x, c10.x
					      cmp r6.x, r6.x, c11.w, c11.z
					      add r5.w, r5.w, r6.x
					      mad r4.w, r5.w, c10.y, r4.w
					      add r3.zw, -r2.xyxy, r3
					      add r3.zw, r3, c11.y
					      mul r5.xy, r3, r3.zwzw
					      mad r5.xyw, r5.xyzz, r4.w, -r0.yzzw
					      dp3 r3.z, r5.xyww, r1
					      mad r3.z, r0.x, -c14.w, r3.z
					      max r4.w, r3.z, c11.z
					      dp3 r3.z, r5.xyww, r5.xyww
					      add r3.z, r3.z, c16.x
					      rcp r3.z, r3.z
					      mad r2.z, r4.w, r3.z, r2.z
					    endrep
					    mul r0.x, r2.z, c8.x
					    mul r0.x, r0.x, c7.x
					    mul r0.x, r0.x, c14.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, c16.y
					    exp_pp oC0, r0.x
					
					// approximately 144 instruction slots used (3 texture, 141 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SAMPLECOUNT_LOWEST" "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[6];
						mat4x4 unity_CameraProjection;
						vec4 unused_2_2[4];
						mat4x4 unity_WorldToCamera;
						vec4 unused_2_4[4];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat8;
					float u_xlat10;
					ivec2 u_xlati10;
					bvec2 u_xlatb10;
					vec3 u_xlat13;
					bvec2 u_xlatb15;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat27;
					float u_xlat28;
					int u_xlati29;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					int u_xlati31;
					bool u_xlatb31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlat0 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat0.xyw = unity_WorldToCamera[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToCamera[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat27 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat27 = float(1.0) / u_xlat27;
					    u_xlatb10.xy = lessThan(vs_TEXCOORD0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati10.x = int((uint(u_xlatb10.y) * 0xffffffffu) | (uint(u_xlatb10.x) * 0xffffffffu));
					    u_xlatb19.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), vs_TEXCOORD0.xyxy).xy;
					    u_xlati10.y = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlati10.xy = ivec2(uvec2(u_xlati10.xy) & uvec2(1u, 1u));
					    u_xlati10.x = u_xlati10.y + u_xlati10.x;
					    u_xlat10 = float(u_xlati10.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat10;
					    u_xlat27 = u_xlat1.x * 100000000.0 + u_xlat27;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy + (-unity_CameraProjection[2].xy);
					    u_xlat2.x = unity_CameraProjection[0].x;
					    u_xlat2.y = unity_CameraProjection[1].y;
					    u_xlat1.xy = u_xlat1.xy / u_xlat2.xy;
					    u_xlat1.z = 1.0;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat28 = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat28 = fract(u_xlat28);
					    u_xlat28 = u_xlat28 * 52.9829178;
					    u_xlat28 = fract(u_xlat28);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat20.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat30 = float(u_xlati_loop_1);
					        u_xlat30 = u_xlat30 * 1.00010002;
					        u_xlat4.y = floor(u_xlat30);
					        u_xlat30 = u_xlat4.y * 78.2330017;
					        u_xlat30 = sin(u_xlat30);
					        u_xlat30 = u_xlat30 * 43758.5469;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat30 = u_xlat28 + u_xlat30;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat6.z = u_xlat30 * 2.0 + -1.0;
					        u_xlat30 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat30 = sin(u_xlat30);
					        u_xlat30 = u_xlat30 * 43758.5469;
					        u_xlat30 = fract(u_xlat30);
					        u_xlat30 = u_xlat28 + u_xlat30;
					        u_xlat30 = u_xlat30 * 6.28318548;
					        u_xlat7 = sin(u_xlat30);
					        u_xlat8.x = cos(u_xlat30);
					        u_xlat30 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat30 = sqrt(u_xlat30);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat30) * u_xlat8.xy;
					        u_xlat30 = u_xlat4.y + 1.0;
					        u_xlat30 = u_xlat30 * 0.333333343;
					        u_xlat30 = sqrt(u_xlat30);
					        u_xlat30 = u_xlat30 * _Radius;
					        u_xlat13.xyz = vec3(u_xlat30) * u_xlat6.xyz;
					        u_xlat30 = dot((-u_xlat0.xyz), u_xlat13.xyz);
					        u_xlatb30 = u_xlat30>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb30)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat1.xyz * vec3(u_xlat27) + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_CameraProjection[1].xy;
					        u_xlat13.xy = unity_CameraProjection[0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_CameraProjection[2].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat30 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat30 = float(1.0) / u_xlat30;
					        u_xlatb15.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb31 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati31 = u_xlatb31 ? 1 : int(0);
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb32 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlati31 = u_xlati31 + u_xlati32;
					        u_xlat31 = float(u_xlati31);
					        u_xlatb32 = u_xlat6.x>=0.999989986;
					        u_xlat32 = u_xlatb32 ? 1.0 : float(0.0);
					        u_xlat31 = u_xlat31 + u_xlat32;
					        u_xlat30 = u_xlat31 * 100000000.0 + u_xlat30;
					        u_xlat13.xy = u_xlat13.xy + (-unity_CameraProjection[2].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat30) + (-u_xlat3.xyz);
					        u_xlat30 = dot(u_xlat13.xyz, u_xlat0.xyz);
					        u_xlat30 = (-u_xlat27) * 0.00200000009 + u_xlat30;
					        u_xlat30 = max(u_xlat30, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat30 = u_xlat30 / u_xlat13.x;
					        u_xlat20.x = u_xlat20.x + u_xlat30;
					    }
					    u_xlat0.x = u_xlat20.x * _Radius;
					    u_xlat0.x = u_xlat0.x * _Intensity;
					    u_xlat0.x = u_xlat0.x * 0.333333343;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    SV_Target0 = exp2(u_xlat0.xxxx);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SAMPLECOUNT_LOWEST" "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Intensity;
						float _Radius;
						float _TargetScale;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ScreenParams;
						vec4 _ZBufferParams;
						vec4 unused_1_3;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[32];
						mat4x4 unity_StereoCameraProjection;
						vec4 unused_2_2[12];
						mat4x4 unity_StereoWorldToCamera;
						vec4 unused_2_4[16];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec2 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat13;
					int u_xlati15;
					bvec2 u_xlatb15;
					float u_xlat19;
					ivec2 u_xlati19;
					bvec2 u_xlatb19;
					vec2 u_xlat20;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat29;
					int u_xlati30;
					float u_xlat31;
					float u_xlat32;
					int u_xlati32;
					bool u_xlatb32;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat9.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat9.yyy * unity_StereoWorldToCamera[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoWorldToCamera[u_xlati0].xyz * u_xlat9.xxx + u_xlat1.xyz;
					    u_xlat9.xyz = unity_StereoWorldToCamera[(u_xlati0 + 2)].xyz * u_xlat9.zzz + u_xlat1.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat10.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlatb19.xy = lessThan(vs_TEXCOORD0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlati19.x = int((uint(u_xlatb19.y) * 0xffffffffu) | (uint(u_xlatb19.x) * 0xffffffffu));
					    u_xlatb2.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), vs_TEXCOORD0.xyxx).xy;
					    u_xlati19.y = int((uint(u_xlatb2.y) * 0xffffffffu) | (uint(u_xlatb2.x) * 0xffffffffu));
					    u_xlati19.xy = ivec2(uvec2(u_xlati19.xy) & uvec2(1u, 1u));
					    u_xlati19.x = u_xlati19.y + u_xlati19.x;
					    u_xlat19 = float(u_xlati19.x);
					    u_xlatb1 = u_xlat1.x>=0.999989986;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat1.x + u_xlat19;
					    u_xlat1.x = u_xlat1.x * 100000000.0 + u_xlat10.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10.xy = u_xlat10.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					    u_xlat2.x = unity_StereoCameraProjection[u_xlati0].x;
					    u_xlat2.y = unity_StereoCameraProjection[(u_xlati0 + 1)].y;
					    u_xlat3.xy = u_xlat10.xy / u_xlat2.xy;
					    u_xlat3.z = 1.0;
					    u_xlat10.xyz = u_xlat1.xxx * u_xlat3.xyz;
					    u_xlat20.xy = vs_TEXCOORD0.xy * vec2(vec2(_TargetScale, _TargetScale));
					    u_xlat20.xy = u_xlat20.xy * _ScreenParams.xy;
					    u_xlat20.xy = floor(u_xlat20.xy);
					    u_xlat20.x = dot(vec2(0.0671105608, 0.00583714992), u_xlat20.xy);
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat20.x = u_xlat20.x * 52.9829178;
					    u_xlat20.x = fract(u_xlat20.x);
					    u_xlat4.x = 12.9898005;
					    u_xlat5.z = 1.0;
					    u_xlat29 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat22 = float(u_xlati_loop_1);
					        u_xlat22 = u_xlat22 * 1.00010002;
					        u_xlat4.y = floor(u_xlat22);
					        u_xlat22 = u_xlat4.y * 78.2330017;
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat20.x + u_xlat22;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat6.z = u_xlat22 * 2.0 + -1.0;
					        u_xlat22 = dot(u_xlat4.xy, vec2(1.0, 78.2330017));
					        u_xlat22 = sin(u_xlat22);
					        u_xlat22 = u_xlat22 * 43758.5469;
					        u_xlat22 = fract(u_xlat22);
					        u_xlat22 = u_xlat20.x + u_xlat22;
					        u_xlat22 = u_xlat22 * 6.28318548;
					        u_xlat7 = sin(u_xlat22);
					        u_xlat8.x = cos(u_xlat22);
					        u_xlat22 = (-u_xlat6.z) * u_xlat6.z + 1.0;
					        u_xlat22 = sqrt(u_xlat22);
					        u_xlat8.y = u_xlat7;
					        u_xlat6.xy = vec2(u_xlat22) * u_xlat8.xy;
					        u_xlat13.x = u_xlat4.y + 1.0;
					        u_xlat13.x = u_xlat13.x * 0.333333343;
					        u_xlat13.x = sqrt(u_xlat13.x);
					        u_xlat13.x = u_xlat13.x * _Radius;
					        u_xlat13.xyz = u_xlat13.xxx * u_xlat6.xyz;
					        u_xlat32 = dot((-u_xlat9.xyz), u_xlat13.xyz);
					        u_xlatb32 = u_xlat32>=0.0;
					        u_xlat13.xyz = (bool(u_xlatb32)) ? (-u_xlat13.xyz) : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat13.xyz;
					        u_xlat6.xy = u_xlat13.yy * unity_StereoCameraProjection[(u_xlati0 + 1)].xy;
					        u_xlat13.xy = unity_StereoCameraProjection[u_xlati0].xy * u_xlat13.xx + u_xlat6.xy;
					        u_xlat13.xy = unity_StereoCameraProjection[(u_xlati0 + 2)].xy * u_xlat13.zz + u_xlat13.xy;
					        u_xlat13.xy = u_xlat13.xy / u_xlat13.zz;
					        u_xlat13.xy = u_xlat13.xy + vec2(1.0, 1.0);
					        u_xlat6.xy = u_xlat13.xy * vec2(0.5, 0.5);
					        u_xlat6 = texture(_CameraDepthTexture, u_xlat6.xy);
					        u_xlat31 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					        u_xlat31 = float(1.0) / u_xlat31;
					        u_xlatb15.xy = lessThan(u_xlat13.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					        u_xlatb32 = u_xlatb15.y || u_xlatb15.x;
					        u_xlati32 = u_xlatb32 ? 1 : int(0);
					        u_xlatb15.xy = lessThan(vec4(2.0, 2.0, 0.0, 0.0), u_xlat13.xyxx).xy;
					        u_xlatb15.x = u_xlatb15.y || u_xlatb15.x;
					        u_xlati15 = u_xlatb15.x ? 1 : int(0);
					        u_xlati32 = u_xlati32 + u_xlati15;
					        u_xlat32 = float(u_xlati32);
					        u_xlatb6 = u_xlat6.x>=0.999989986;
					        u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					        u_xlat32 = u_xlat32 + u_xlat6.x;
					        u_xlat31 = u_xlat32 * 100000000.0 + u_xlat31;
					        u_xlat13.xy = u_xlat13.xy + (-unity_StereoCameraProjection[(u_xlati0 + 2)].xy);
					        u_xlat13.xy = u_xlat13.xy + vec2(-1.0, -1.0);
					        u_xlat5.xy = u_xlat13.xy / u_xlat2.xy;
					        u_xlat13.xyz = u_xlat5.xyz * vec3(u_xlat31) + (-u_xlat10.xyz);
					        u_xlat5.x = dot(u_xlat13.xyz, u_xlat9.xyz);
					        u_xlat5.x = (-u_xlat1.x) * 0.00200000009 + u_xlat5.x;
					        u_xlat5.x = max(u_xlat5.x, 0.0);
					        u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
					        u_xlat13.x = u_xlat13.x + 9.99999975e-05;
					        u_xlat13.x = u_xlat5.x / u_xlat13.x;
					        u_xlat29 = u_xlat29 + u_xlat13.x;
					    }
					    u_xlat0 = u_xlat29 * _Radius;
					    u_xlat0 = u_xlat0 * _Intensity;
					    u_xlat0 = u_xlat0 * 0.333333343;
					    u_xlat0 = log2(u_xlat0);
					    u_xlat0 = u_xlat0 * 0.600000024;
					    SV_Target0 = exp2(vec4(u_xlat0));
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 93792
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_GBUFFER" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurVector;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _MainTex_TexelSize         c0       1
					//   _BlurVector                c1       1
					//   _CameraDepthNormalsTexture s0       1
					//   _MainTex                   s1       1
					//
					
					    ps_3_0
					    def c2, 2, 3.23076916, -1, 1
					    def c3, 3.55539989, 0, -1.77769995, 1
					    def c4, 0.5, 50, 0.317180604, 0.198237881
					    def c5, 0.114537448, 0.370044053, 0.317180604, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c0
					    mad r0.zw, r0.xyxy, -c1.xyxy, v0.xyxy
					    texld r1, r0.zwzw, s0
					    texld r2, r0.zwzw, s1
					    mad r1.xyz, r1, c3.xxyw, c3.zzww
					    dp3 r0.z, r1, r1
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad r3.z, r0.z, c2.x, c2.z
					    mul r3.xy, r1, r0.w
					    mul_pp r1.xyz, r3, c2.wwzw
					    texld r3, v0, s0
					    mad r2.yzw, r3.xxyz, c3.xxxy, c3.xzzw
					    dp3 r0.z, r2.yzww, r2.yzww
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad r3.z, r0.z, c2.x, c2.z
					    mul r3.xy, r2.yzzw, r0.w
					    mul_pp r2.yzw, r3.xxyz, c2.xwwz
					    dp3_pp r0.z, r2.yzww, r1
					    add_pp r0.z, r0.z, c2.w
					    mul r0.z, r0.z, c4.x
					    pow_pp r1.x, r0.z, c4.y
					    mul_pp r0.z, r1.x, c4.z
					    mad_pp r0.w, r1.x, c5.z, c5.y
					    mul r0.z, r0.z, r2.x
					    texld r1, v0, s1
					    mad_pp r0.z, r1.x, c5.y, r0.z
					    mad r1.xy, r0, c1, v0
					    texld r3, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r3.xxyz, c3.xxxy, c3.xzzw
					    dp3 r1.w, r1.yzww, r1.yzww
					    rcp r1.w, r1.w
					    add r2.x, r1.w, r1.w
					    mad r3.z, r1.w, c2.x, c2.z
					    mul r3.xy, r1.yzzw, r2.x
					    mul_pp r1.yzw, r3.xxyz, c2.xwwz
					    dp3_pp r1.y, r2.yzww, r1.yzww
					    add_pp r1.y, r1.y, c2.w
					    mul r1.y, r1.y, c4.x
					    pow_pp r2.x, r1.y, c4.y
					    mul_pp r1.y, r2.x, c4.z
					    mad_pp r0.w, r2.x, c4.z, r0.w
					    mad_pp r0.z, r1.x, r1.y, r0.z
					    mul r0.xy, r0, c1
					    mad r1.xy, r0, -c2.x, v0
					    texld r3, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r3.xxyz, c3.xxxy, c3.xzzw
					    dp3 r1.w, r1.yzww, r1.yzww
					    rcp r1.w, r1.w
					    add r2.x, r1.w, r1.w
					    mad r3.z, r1.w, c2.x, c2.z
					    mul r3.xy, r1.yzzw, r2.x
					    mul_pp r1.yzw, r3.xxyz, c2.xwwz
					    dp3_pp r1.y, r2.yzww, r1.yzww
					    add_pp r1.y, r1.y, c2.w
					    mul r1.y, r1.y, c4.x
					    pow_pp r2.x, r1.y, c4.y
					    mul_pp r1.y, r2.x, c4.w
					    mad_pp r0.w, r2.x, c4.w, r0.w
					    mad_pp r0.z, r1.x, r1.y, r0.z
					    mad r1.xy, r0, c2.x, v0
					    texld r3, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r3.xxyz, c3.xxxy, c3.xzzw
					    dp3 r1.w, r1.yzww, r1.yzww
					    rcp r1.w, r1.w
					    add r2.x, r1.w, r1.w
					    mad r3.z, r1.w, c2.x, c2.z
					    mul r3.xy, r1.yzzw, r2.x
					    mul_pp r1.yzw, r3.xxyz, c2.xwwz
					    dp3_pp r1.y, r2.yzww, r1.yzww
					    add_pp r1.y, r1.y, c2.w
					    mul r1.y, r1.y, c4.x
					    pow_pp r2.x, r1.y, c4.y
					    mul_pp r1.y, r2.x, c4.w
					    mad_pp r0.w, r2.x, c4.w, r0.w
					    mad_pp r0.z, r1.x, r1.y, r0.z
					    mad r1.xy, r0, -c2.y, v0
					    mad r0.xy, r0, c2.y, v0
					    texld r3, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r3.xxyz, c3.xxxy, c3.xzzw
					    dp3 r1.w, r1.yzww, r1.yzww
					    rcp r1.w, r1.w
					    add r2.x, r1.w, r1.w
					    mad r3.z, r1.w, c2.x, c2.z
					    mul r3.xy, r1.yzzw, r2.x
					    mul_pp r1.yzw, r3.xxyz, c2.xwwz
					    dp3_pp r1.y, r2.yzww, r1.yzww
					    add_pp r1.y, r1.y, c2.w
					    mul r1.y, r1.y, c4.x
					    pow_pp r2.x, r1.y, c4.y
					    mul_pp r1.y, r2.x, c5.x
					    mad_pp r0.w, r2.x, c5.x, r0.w
					    mad_pp r0.z, r1.x, r1.y, r0.z
					    texld r1, r0, s0
					    texld r3, r0, s1
					    mad r1.xyz, r1, c3.xxyw, c3.zzww
					    dp3 r0.x, r1, r1
					    rcp r0.x, r0.x
					    add r0.y, r0.x, r0.x
					    mad r4.z, r0.x, c2.x, c2.z
					    mul r4.xy, r1, r0.y
					    mul_pp r1.xyz, r4, c2.wwzw
					    dp3_pp r0.x, r2.yzww, r1
					    add_pp r0.x, r0.x, c2.w
					    mul r0.x, r0.x, c4.x
					    pow_pp r1.x, r0.x, c4.y
					    mul_pp r0.x, r1.x, c5.x
					    mad_pp r0.y, r1.x, c5.x, r0.w
					    rcp r0.y, r0.y
					    mad_pp r0.x, r3.x, r0.x, r0.z
					    mul_pp oC0, r0.y, r0.x
					
					// approximately 128 instruction slots used (14 texture, 114 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat12 = 2.0 / u_xlat12;
					    u_xlat1.xy = u_xlat4.xy * vec2(u_xlat12);
					    u_xlat1.z = u_xlat12 + -1.0;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
					    u_xlat2.z = u_xlat9 + -1.0;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat8.x = u_xlat4.x * 0.317180604;
					    u_xlat4.x = u_xlat4.x * 0.317180604 + 0.370044053;
					    u_xlat0.x = u_xlat8.x * u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat2.x * 0.370044053 + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = 2.0 / u_xlat8.x;
					    u_xlat2.xy = u_xlat2.xy * u_xlat8.xx;
					    u_xlat2.z = u_xlat8.x + -1.0;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat12 = u_xlat8.x * 0.317180604;
					    u_xlat4.x = u_xlat8.x * 0.317180604 + u_xlat4.x;
					    u_xlat0.x = u_xlat3.x * u_xlat12 + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy;
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthNormalsTexture, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat3.xy = u_xlat6.xy * vec2(u_xlat13);
					    u_xlat3.z = u_xlat13 + -1.0;
					    u_xlat6.xyz = u_xlat3.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.198237881;
					    u_xlat4.x = u_xlat13 * 0.198237881 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2.xy = u_xlat8.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthNormalsTexture, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat3.xy = u_xlat6.xy * vec2(u_xlat13);
					    u_xlat3.z = u_xlat13 + -1.0;
					    u_xlat6.xyz = u_xlat3.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.198237881;
					    u_xlat4.x = u_xlat13 * 0.198237881 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat8.xy = u_xlat8.xy * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthNormalsTexture, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat3.xy = u_xlat6.xy * vec2(u_xlat13);
					    u_xlat3.z = u_xlat13 + -1.0;
					    u_xlat6.xyz = u_xlat3.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.114537448;
					    u_xlat4.x = u_xlat13 * 0.114537448 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = 2.0 / u_xlat8.x;
					    u_xlat2.xy = u_xlat2.xy * u_xlat8.xx;
					    u_xlat2.z = u_xlat8.x + -1.0;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat12 = u_xlat8.x * 0.114537448;
					    u_xlat4.x = u_xlat8.x * 0.114537448 + u_xlat4.x;
					    u_xlat0.x = u_xlat3.x * u_xlat12 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat12 = 2.0 / u_xlat12;
					    u_xlat1.xy = u_xlat4.xy * vec2(u_xlat12);
					    u_xlat1.z = u_xlat12 + -1.0;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
					    u_xlat2.z = u_xlat9 + -1.0;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat8.x = u_xlat4.x * 0.317180604;
					    u_xlat4.x = u_xlat4.x * 0.317180604 + 0.370044053;
					    u_xlat0.x = u_xlat8.x * u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat2.x * 0.370044053 + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = 2.0 / u_xlat8.x;
					    u_xlat2.xy = u_xlat2.xy * u_xlat8.xx;
					    u_xlat2.z = u_xlat8.x + -1.0;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat12 = u_xlat8.x * 0.317180604;
					    u_xlat4.x = u_xlat8.x * 0.317180604 + u_xlat4.x;
					    u_xlat0.x = u_xlat3.x * u_xlat12 + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy;
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthNormalsTexture, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat3.xy = u_xlat6.xy * vec2(u_xlat13);
					    u_xlat3.z = u_xlat13 + -1.0;
					    u_xlat6.xyz = u_xlat3.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.198237881;
					    u_xlat4.x = u_xlat13 * 0.198237881 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2.xy = u_xlat8.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthNormalsTexture, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat3.xy = u_xlat6.xy * vec2(u_xlat13);
					    u_xlat3.z = u_xlat13 + -1.0;
					    u_xlat6.xyz = u_xlat3.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.198237881;
					    u_xlat4.x = u_xlat13 * 0.198237881 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat8.xy = u_xlat8.xy * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraDepthNormalsTexture, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat13 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat3.xy = u_xlat6.xy * vec2(u_xlat13);
					    u_xlat3.z = u_xlat13 + -1.0;
					    u_xlat6.xyz = u_xlat3.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.114537448;
					    u_xlat4.x = u_xlat13 * 0.114537448 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = 2.0 / u_xlat8.x;
					    u_xlat2.xy = u_xlat2.xy * u_xlat8.xx;
					    u_xlat2.z = u_xlat8.x + -1.0;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat12 = u_xlat8.x * 0.114537448;
					    u_xlat4.x = u_xlat8.x * 0.114537448 + u_xlat4.x;
					    u_xlat0.x = u_xlat3.x * u_xlat12 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_GBUFFER" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurVector;
					//   sampler2D _CameraGBufferTexture2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_WorldToCamera;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   unity_WorldToCamera    c0       3
					//   _MainTex_TexelSize     c3       1
					//   _BlurVector            c4       1
					//   _CameraGBufferTexture2 s0       1
					//   _MainTex               s1       1
					//
					
					    ps_3_0
					    def c5, 2, 3.23076916, -1, 1
					    def c6, 0.5, 50, 0.317180604, 0.198237881
					    def c7, 0.114537448, 0.370044053, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c3
					    mad r0.zw, r0.xyxy, c4.xyxy, v0.xyxy
					    texld r1, r0.zwzw, s1
					    texld r2, r0.zwzw, s0
					    mad r1.yzw, r2.xxyz, c5.x, c5.z
					    texld r2, v0, s1
					    mad r0.zw, r0.xyxy, -c4.xyxy, v0.xyxy
					    texld r3, r0.zwzw, s1
					    texld r4, r0.zwzw, s0
					    mad r2.yzw, r4.xxyz, c5.x, c5.z
					    dp3_pp r4.x, c0, r2.yzww
					    dp3_pp r4.y, c1, r2.yzww
					    dp3_pp r4.z, c2, r2.yzww
					    texld r5, v0, s0
					    mad r2.yzw, r5.xxyz, c5.x, c5.z
					    dp3_pp r5.x, c0, r2.yzww
					    dp3_pp r5.y, c1, r2.yzww
					    dp3_pp r5.z, c2, r2.yzww
					    dp3_pp r0.z, r5, r4
					    add_pp r0.z, r0.z, c5.w
					    mul r0.z, r0.z, c6.x
					    pow_pp r2.y, r0.z, c6.y
					    mul_pp r0.z, r2.y, c6.z
					    mul r0.w, r0.z, r3.x
					    mad_pp r0.w, r2.x, c7.y, r0.w
					    dp3_pp r2.x, c0, r1.yzww
					    dp3_pp r2.y, c1, r1.yzww
					    dp3_pp r2.z, c2, r1.yzww
					    dp3_pp r1.y, r5, r2
					    add_pp r1.y, r1.y, c5.w
					    mul r1.y, r1.y, c6.x
					    pow_pp r2.x, r1.y, c6.y
					    mul_pp r1.y, r2.x, c6.z
					    mad_pp r0.z, r2.x, c6.z, r0.z
					    mad_pp r0.w, r1.x, r1.y, r0.w
					    mul r0.xy, r0, c4
					    mad r1.xy, r0, -c5.x, v0
					    texld r2, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r2.xxyz, c5.x, c5.z
					    dp3_pp r2.x, c0, r1.yzww
					    dp3_pp r2.y, c1, r1.yzww
					    dp3_pp r2.z, c2, r1.yzww
					    dp3_pp r1.y, r5, r2
					    add_pp r1.y, r1.y, c5.w
					    mul r1.y, r1.y, c6.x
					    pow_pp r2.x, r1.y, c6.y
					    mul_pp r1.y, r2.x, c6.w
					    mad_pp r0.z, r2.x, c6.w, r0.z
					    mad_pp r0.w, r1.x, r1.y, r0.w
					    mad r1.xy, r0, c5.x, v0
					    texld r2, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r2.xxyz, c5.x, c5.z
					    dp3_pp r2.x, c0, r1.yzww
					    dp3_pp r2.y, c1, r1.yzww
					    dp3_pp r2.z, c2, r1.yzww
					    dp3_pp r1.y, r5, r2
					    add_pp r1.y, r1.y, c5.w
					    mul r1.y, r1.y, c6.x
					    pow_pp r2.x, r1.y, c6.y
					    mul_pp r1.y, r2.x, c6.w
					    mad_pp r0.z, r2.x, c6.w, r0.z
					    mad_pp r0.w, r1.x, r1.y, r0.w
					    mad r1.xy, r0, -c5.y, v0
					    mad r0.xy, r0, c5.y, v0
					    texld r2, r1, s0
					    texld r1, r1, s1
					    mad r1.yzw, r2.xxyz, c5.x, c5.z
					    dp3_pp r2.x, c0, r1.yzww
					    dp3_pp r2.y, c1, r1.yzww
					    dp3_pp r2.z, c2, r1.yzww
					    dp3_pp r1.y, r5, r2
					    add_pp r1.y, r1.y, c5.w
					    mul r1.y, r1.y, c6.x
					    pow_pp r2.x, r1.y, c6.y
					    mul_pp r1.y, r2.x, c7.x
					    mad_pp r0.z, r2.x, c7.x, r0.z
					    mad_pp r0.w, r1.x, r1.y, r0.w
					    texld r1, r0, s0
					    texld r2, r0, s1
					    mad r1.xyz, r1, c5.x, c5.z
					    dp3_pp r3.x, c0, r1
					    dp3_pp r3.y, c1, r1
					    dp3_pp r3.z, c2, r1
					    dp3_pp r0.x, r5, r3
					    add_pp r0.x, r0.x, c5.w
					    mul r0.x, r0.x, c6.x
					    pow_pp r1.x, r0.x, c6.y
					    mul_pp r0.x, r1.x, c7.x
					    mad_pp r0.y, r1.x, c7.x, r0.z
					    add_pp r0.y, r0.y, c7.y
					    rcp r0.y, r0.y
					    mad_pp r0.x, r2.x, r0.x, r0.w
					    mul_pp oC0, r0.y, r0.x
					
					// approximately 107 instruction slots used (14 texture, 93 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[14];
						mat4x4 unity_WorldToCamera;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat4.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat1.xyz = unity_WorldToCamera[0].xyz * u_xlat4.xxx + u_xlat1.xyz;
					    u_xlat4.xyz = unity_WorldToCamera[2].xyz * u_xlat4.zzz + u_xlat1.xyz;
					    u_xlat1 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = u_xlat1.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat1.xyw = unity_WorldToCamera[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_WorldToCamera[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat8.x = u_xlat4.x * 0.317180604;
					    u_xlat4.x = u_xlat4.x * 0.317180604 + 0.370044053;
					    u_xlat0.x = u_xlat8.x * u_xlat0.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat2.x * 0.370044053 + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraGBufferTexture2, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat7.xyz = u_xlat2.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat2.xyw = unity_WorldToCamera[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat2.xyz = unity_WorldToCamera[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat12 = u_xlat8.x * 0.317180604;
					    u_xlat4.x = u_xlat8.x * 0.317180604 + u_xlat4.x;
					    u_xlat0.x = u_xlat3.x * u_xlat12 + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy;
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat6.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat3.xyz = unity_WorldToCamera[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat6.xyz = unity_WorldToCamera[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.198237881;
					    u_xlat4.x = u_xlat13 * 0.198237881 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2.xy = u_xlat8.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat6.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat3.xyz = unity_WorldToCamera[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat6.xyz = unity_WorldToCamera[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.198237881;
					    u_xlat4.x = u_xlat13 * 0.198237881 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat8.xy = u_xlat8.xy * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat6.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat3.xyz = unity_WorldToCamera[0].xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat6.xyz = unity_WorldToCamera[2].xyz * u_xlat6.zzz + u_xlat3.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat13 = u_xlat13 + 1.0;
					    u_xlat13 = u_xlat13 * 0.5;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * 50.0;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat6.x = u_xlat13 * 0.114537448;
					    u_xlat4.x = u_xlat13 * 0.114537448 + u_xlat4.x;
					    u_xlat0.x = u_xlat2.x * u_xlat6.x + u_xlat0.x;
					    u_xlat2 = texture(_CameraGBufferTexture2, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat7.xyz = u_xlat2.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat2.xyw = unity_WorldToCamera[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat2.xyz = unity_WorldToCamera[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat12 = u_xlat8.x * 0.114537448;
					    u_xlat4.x = u_xlat8.x * 0.114537448 + u_xlat4.x;
					    u_xlat0.x = u_xlat3.x * u_xlat12 + u_xlat0.x;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[48];
						mat4x4 unity_StereoWorldToCamera;
						vec4 unused_1_2[16];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat6.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_MainTex, u_xlat6.xy);
					    u_xlat4 = texture(_CameraGBufferTexture2, u_xlat6.xy);
					    u_xlat6.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat7.xyz = u_xlat6.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat7.xyz = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat6.xxx + u_xlat7.xyz;
					    u_xlat6.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat6.zzz + u_xlat7.xyz;
					    u_xlat4 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat8.xyz = u_xlat7.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat8.xyz = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat7.xxx + u_xlat8.xyz;
					    u_xlat7.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat7.zzz + u_xlat8.xyz;
					    u_xlat6.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat6.x = u_xlat6.x + 1.0;
					    u_xlat6.x = u_xlat6.x * 0.5;
					    u_xlat6.x = log2(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x * 50.0;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat11.x = u_xlat6.x * 0.317180604;
					    u_xlat6.x = u_xlat6.x * 0.317180604 + 0.370044053;
					    u_xlat11.x = u_xlat11.x * u_xlat3.x;
					    u_xlat11.x = u_xlat2.x * 0.370044053 + u_xlat11.x;
					    u_xlat3.xyz = u_xlat0.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat3.xyz = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 50.0;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat5 = u_xlat0.x * 0.317180604;
					    u_xlat0.x = u_xlat0.x * 0.317180604 + u_xlat6.x;
					    u_xlat5 = u_xlat1.x * u_xlat5 + u_xlat11.x;
					    u_xlat1.xy = _MainTex_TexelSize.xy * _BlurVector.xy;
					    u_xlat11.xy = (-u_xlat1.xy) * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat11.xy);
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat9.xyz = u_xlat3.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat3.xyw = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat3.xxx + u_xlat9.xyz;
					    u_xlat3.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat10 = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10 = u_xlat10 + 1.0;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat10 = log2(u_xlat10);
					    u_xlat10 = u_xlat10 * 50.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat11.x = u_xlat10 * 0.198237881;
					    u_xlat0.x = u_xlat10 * 0.198237881 + u_xlat0.x;
					    u_xlat5 = u_xlat4.x * u_xlat11.x + u_xlat5;
					    u_xlat11.xy = u_xlat1.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat11.xy);
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat9.xyz = u_xlat3.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat3.xyw = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat3.xxx + u_xlat9.xyz;
					    u_xlat3.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat10 = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10 = u_xlat10 + 1.0;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat10 = log2(u_xlat10);
					    u_xlat10 = u_xlat10 * 50.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat11.x = u_xlat10 * 0.198237881;
					    u_xlat0.x = u_xlat10 * 0.198237881 + u_xlat0.x;
					    u_xlat5 = u_xlat4.x * u_xlat11.x + u_xlat5;
					    u_xlat11.xy = (-u_xlat1.xy) * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(3.23076916, 3.23076916) + vs_TEXCOORD0.xy;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat11.xy);
					    u_xlat4 = texture(_MainTex, u_xlat11.xy);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat9.xyz = u_xlat3.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat3.xyw = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat3.xxx + u_xlat9.xyz;
					    u_xlat3.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat10 = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10 = u_xlat10 + 1.0;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat10 = log2(u_xlat10);
					    u_xlat10 = u_xlat10 * 50.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat11.x = u_xlat10 * 0.114537448;
					    u_xlat0.x = u_xlat10 * 0.114537448 + u_xlat0.x;
					    u_xlat5 = u_xlat4.x * u_xlat11.x + u_xlat5;
					    u_xlat3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat6.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat6.yyy * unity_StereoWorldToCamera[(u_xlati15 + 1)].xyz;
					    u_xlat3.xyz = unity_StereoWorldToCamera[u_xlati15].xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat6.xyz = unity_StereoWorldToCamera[(u_xlati15 + 2)].xyz * u_xlat6.zzz + u_xlat3.xyz;
					    u_xlat10 = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat10 = u_xlat10 + 1.0;
					    u_xlat10 = u_xlat10 * 0.5;
					    u_xlat10 = log2(u_xlat10);
					    u_xlat10 = u_xlat10 * 50.0;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat15 = u_xlat10 * 0.114537448;
					    u_xlat0.x = u_xlat10 * 0.114537448 + u_xlat0.x;
					    u_xlat5 = u_xlat1.x * u_xlat15 + u_xlat5;
					    SV_Target0 = vec4(u_xlat5) / u_xlat0.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 140367
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_GBUFFER" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_GBUFFER" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurVector;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _MainTex_TexelSize         c0       1
					//   _BlurVector                c1       1
					//   _CameraDepthNormalsTexture s0       1
					//   _MainTex                   s1       1
					//
					
					    ps_3_0
					    def c2, 3.55539989, 0, -1.77769995, 1
					    def c3, 2, -1, 1, 0.5
					    def c4, 50, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c0
					    mad r0.zw, r0.xyxy, -c1.xyxy, v0.xyxy
					    texld r1, r0.zwzw, s0
					    texld r2, r0.zwzw, s1
					    mad r1.xyz, r1, c2.xxyw, c2.zzww
					    dp3 r0.z, r1, r1
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad r3.z, r0.z, c3.x, c3.y
					    mul r3.xy, r1, r0.w
					    mul_pp r1.xyz, r3, c3.zzyw
					    texld r3, v0, s0
					    mad r2.yzw, r3.xxyz, c2.xxxy, c2.xzzw
					    dp3 r0.z, r2.yzww, r2.yzww
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad r3.z, r0.z, c3.x, c3.y
					    mul r3.xy, r2.yzzw, r0.w
					    mul_pp r2.yzw, r3.xxyz, c3.xzzy
					    dp3_pp r0.z, r2.yzww, r1
					    add_pp r0.z, r0.z, c2.w
					    mul r0.z, r0.z, c3.w
					    pow_pp r1.x, r0.z, c4.x
					    texld r3, v0, s1
					    add_pp r0.z, r3.x, r3.x
					    mad_pp r0.z, r2.x, r1.x, r0.z
					    add_pp r0.w, r1.x, c3.x
					    mad r0.xy, r0, c1, v0
					    texld r1, r0, s0
					    texld r3, r0, s1
					    mad r1.xyz, r1, c2.xxyw, c2.zzww
					    dp3 r0.x, r1, r1
					    rcp r0.x, r0.x
					    add r0.y, r0.x, r0.x
					    mad r4.z, r0.x, c3.x, c3.y
					    mul r4.xy, r1, r0.y
					    mul_pp r1.xyz, r4, c3.zzyw
					    dp3_pp r0.x, r2.yzww, r1
					    add_pp r0.x, r0.x, c2.w
					    mul r0.x, r0.x, c3.w
					    pow_pp r1.x, r0.x, c4.x
					    mad_pp r0.x, r3.x, r1.x, r0.z
					    add_pp r0.y, r0.w, r1.x
					    rcp r0.y, r0.y
					    mul_pp oC0, r0.y, r0.x
					
					// approximately 49 instruction slots used (6 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat12 = 2.0 / u_xlat12;
					    u_xlat1.xy = u_xlat4.xy * vec2(u_xlat12);
					    u_xlat1.z = u_xlat12 + -1.0;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
					    u_xlat2.z = u_xlat9 + -1.0;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.x = u_xlat2.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat8.x;
					    u_xlat4.x = u_xlat4.x + 2.0;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = 2.0 / u_xlat8.x;
					    u_xlat2.xy = u_xlat2.xy * u_xlat8.xx;
					    u_xlat2.z = u_xlat8.x + -1.0;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat0.x = u_xlat3.x * u_xlat8.x + u_xlat0.x;
					    u_xlat4.x = u_xlat8.x + u_xlat4.x;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat12 = 2.0 / u_xlat12;
					    u_xlat1.xy = u_xlat4.xy * vec2(u_xlat12);
					    u_xlat1.z = u_xlat12 + -1.0;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat9);
					    u_xlat2.z = u_xlat9 + -1.0;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.x = u_xlat2.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat8.x;
					    u_xlat4.x = u_xlat4.x + 2.0;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = 2.0 / u_xlat8.x;
					    u_xlat2.xy = u_xlat2.xy * u_xlat8.xx;
					    u_xlat2.z = u_xlat8.x + -1.0;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.0, 1.0, -1.0);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat0.x = u_xlat3.x * u_xlat8.x + u_xlat0.x;
					    u_xlat4.x = u_xlat8.x + u_xlat4.x;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "_SOURCE_GBUFFER" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurVector;
					//   sampler2D _CameraGBufferTexture2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_WorldToCamera;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   unity_WorldToCamera    c0       3
					//   _MainTex_TexelSize     c3       1
					//   _BlurVector            c4       1
					//   _CameraGBufferTexture2 s0       1
					//   _MainTex               s1       1
					//
					
					    ps_3_0
					    def c5, 2, -1, 1, 0.5
					    def c6, 50, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    add_pp r0.x, r0.x, r0.x
					    mov r1.xy, c3
					    mad r0.yz, r1.xxyw, -c4.xxyw, v0.xxyw
					    texld r2, r0.yzzw, s0
					    texld r3, r0.yzzw, s1
					    mad r0.yzw, r2.xxyz, c5.x, c5.y
					    dp3_pp r2.x, c0, r0.yzww
					    dp3_pp r2.y, c1, r0.yzww
					    dp3_pp r2.z, c2, r0.yzww
					    texld r4, v0, s0
					    mad r0.yzw, r4.xxyz, c5.x, c5.y
					    dp3_pp r4.x, c0, r0.yzww
					    dp3_pp r4.y, c1, r0.yzww
					    dp3_pp r4.z, c2, r0.yzww
					    dp3_pp r0.y, r4, r2
					    add_pp r0.y, r0.y, c5.z
					    mul r0.y, r0.y, c5.w
					    pow_pp r1.z, r0.y, c6.x
					    mad_pp r0.x, r3.x, r1.z, r0.x
					    add_pp r0.y, r1.z, c5.x
					    mad r0.zw, r1.xyxy, c4.xyxy, v0.xyxy
					    texld r1, r0.zwzw, s0
					    texld r2, r0.zwzw, s1
					    mad r1.xyz, r1, c5.x, c5.y
					    dp3_pp r3.x, c0, r1
					    dp3_pp r3.y, c1, r1
					    dp3_pp r3.z, c2, r1
					    dp3_pp r0.z, r4, r3
					    add_pp r0.z, r0.z, c5.z
					    mul r0.z, r0.z, c5.w
					    pow_pp r1.x, r0.z, c6.x
					    mad_pp r0.x, r2.x, r1.x, r0.x
					    add_pp r0.y, r0.y, r1.x
					    rcp r0.y, r0.y
					    mul_pp oC0, r0.y, r0.x
					
					// approximately 40 instruction slots used (6 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[14];
						mat4x4 unity_WorldToCamera;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat4.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat1.xyz = unity_WorldToCamera[0].xyz * u_xlat4.xxx + u_xlat1.xyz;
					    u_xlat4.xyz = unity_WorldToCamera[2].xyz * u_xlat4.zzz + u_xlat1.xyz;
					    u_xlat1 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = u_xlat1.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat1.xyw = unity_WorldToCamera[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_WorldToCamera[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.x = u_xlat2.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat8.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraGBufferTexture2, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat7.xyz = u_xlat2.yyy * unity_WorldToCamera[1].xyz;
					    u_xlat2.xyw = unity_WorldToCamera[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat2.xyz = unity_WorldToCamera[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat0.x = u_xlat3.x * u_xlat8.x + u_xlat0.x;
					    u_xlat4.x = u_xlat4.x + u_xlat8.x;
					    u_xlat4.x = u_xlat4.x + 2.0;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "_SOURCE_GBUFFER" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec2 _BlurVector;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[48];
						mat4x4 unity_StereoWorldToCamera;
						vec4 unused_1_2[16];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _CameraGBufferTexture2;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat4.xy = (-_MainTex_TexelSize.xy) * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat4.xy);
					    u_xlat2 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat5.xyz = u_xlat4.yyy * unity_StereoWorldToCamera[(u_xlati1 + 1)].xyz;
					    u_xlat5.xyz = unity_StereoWorldToCamera[u_xlati1].xyz * u_xlat4.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = unity_StereoWorldToCamera[(u_xlati1 + 2)].xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat3 = texture(_CameraGBufferTexture2, vs_TEXCOORD0.xy);
					    u_xlat5.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat6.xyz = u_xlat5.yyy * unity_StereoWorldToCamera[(u_xlati1 + 1)].xyz;
					    u_xlat6.xyz = unity_StereoWorldToCamera[u_xlati1].xyz * u_xlat5.xxx + u_xlat6.xyz;
					    u_xlat5.xyz = unity_StereoWorldToCamera[(u_xlati1 + 2)].xyz * u_xlat5.zzz + u_xlat6.xyz;
					    u_xlat4.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat4.x = u_xlat4.x * 0.5;
					    u_xlat4.x = log2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 50.0;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat0.x = u_xlat2.x * u_xlat4.x + u_xlat0.x;
					    u_xlat8.xy = _MainTex_TexelSize.xy * _BlurVector.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraGBufferTexture2, u_xlat8.xy);
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat7.xyz = u_xlat2.yyy * unity_StereoWorldToCamera[(u_xlati1 + 1)].xyz;
					    u_xlat2.xyw = unity_StereoWorldToCamera[u_xlati1].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat2.xyz = unity_StereoWorldToCamera[(u_xlati1 + 2)].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat8.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8.x = u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlat8.x = log2(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 50.0;
					    u_xlat8.x = exp2(u_xlat8.x);
					    u_xlat0.x = u_xlat3.x * u_xlat8.x + u_xlat0.x;
					    u_xlat4.x = u_xlat4.x + u_xlat8.x;
					    u_xlat4.x = u_xlat4.x + 2.0;
					    SV_Target0 = u_xlat0.xxxx / u_xlat4.xxxx;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 222793
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, -0.5, 1, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    slt r0.x, -c4.y, c4.y
					    slt r0.y, c4.y, -c4.y
					    add r0.y, -r0.y, r0.x
					    add r0.zw, c5.x, v1.xyxy
					    mov r0.x, c5.y
					    mad o2.xy, r0.zwzw, r0, c5.z
					    mov o1.xy, v1
					
					// approximately 11 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					int u_xlati1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = int((0.0<_MainTex_TexelSize.y) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_MainTex_TexelSize.y<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati0) + u_xlati1;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat1 = in_TEXCOORD0.y + -0.5;
					    phase0_Output0_1.w = u_xlat1 * u_xlat0.x + 0.5;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlati0 = int((0.0<_MainTex_TexelSize.y) ? 0xFFFFFFFFu : uint(0));
					    u_xlati3 = int((_MainTex_TexelSize.y<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati0) + u_xlati3;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat3 = in_TEXCOORD0.y + -0.5;
					    phase0_Output0_1.w = u_xlat3 * u_xlat0.x + 0.5;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _OcclusionTexture;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex                  s0       1
					//   _OcclusionTexture         s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0.454545468, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v1, s1
					    add_pp r0.y, -r0.x, c1.x
					    pow_pp r1.x, r0.y, c1.y
					    add_pp r0.y, -r1.x, c1.x
					    lrp_pp r1.x, c0.w, r0.x, r0.y
					    texld_pp r0, v0, s0
					    mad_pp oC0.xyz, r1.x, -r0, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 10 instruction slots used (2 texture, 8 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_OcclusionTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = (-u_xlat0.x) + 1.0;
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * 0.454545468;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat2 = (-u_xlat2) + 1.0;
					    u_xlat0.x = (-u_xlat2) + u_xlat0.x;
					    u_xlat0.x = unity_ColorSpaceLuminance.w * u_xlat0.x + u_xlat2;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xxx * (-u_xlat1.xyz) + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = texture(_OcclusionTexture, vs_TEXCOORD1.xy);
					    u_xlat2 = (-u_xlat0.x) + 1.0;
					    u_xlat2 = log2(u_xlat2);
					    u_xlat2 = u_xlat2 * 0.454545468;
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat2 = (-u_xlat2) + 1.0;
					    u_xlat0.x = (-u_xlat2) + u_xlat0.x;
					    u_xlat0.x = unity_ColorSpaceLuminance.w * u_xlat0.x + u_xlat2;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xxx * (-u_xlat1.xyz) + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  Blend Zero OneMinusSrcColor, Zero OneMinusSrcAlpha
  GpuProgramID 265477
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					    vs_3_0
					    def c0, 2, 0, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad o0, v0, c0.xxyy, c0.yyyz
					    mad o1.xy, v1, c0.zwzw, c0.yzzw
					
					// approximately 2 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					void main()
					{
					    gl_Position = in_POSITION0 * vec4(2.0, 2.0, 0.0, 0.0) + vec4(0.0, 0.0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					void main()
					{
					    gl_Position = in_POSITION0 * vec4(2.0, 2.0, 0.0, 0.0) + vec4(0.0, 0.0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _OcclusionTexture;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _OcclusionTexture         s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0.454545468, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add_pp r0.y, -r0.x, c1.x
					    pow_pp r1.x, r0.y, c1.y
					    add_pp r0.y, -r1.x, c1.x
					    add_pp r0.z, -r0.y, r0.x
					    mad_pp oC1.xyz, c0.w, r0.z, r0.y
					    mul_pp oC0, r0.x, c1.zzzx
					    mov_pp oC1.w, c1.z
					
					// approximately 10 instruction slots used (1 texture, 9 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat0 = texture(_OcclusionTexture, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.x;
					    u_xlat1 = (-u_xlat0.x) + 1.0;
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * 0.454545468;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat1 = (-u_xlat1) + 1.0;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    SV_Target1.xyz = unity_ColorSpaceLuminance.www * u_xlat0.xxx + vec3(u_xlat1);
					    SV_Target1.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    u_xlat0 = texture(_OcclusionTexture, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.x;
					    u_xlat1 = (-u_xlat0.x) + 1.0;
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * 0.454545468;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat1 = (-u_xlat1) + 1.0;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    SV_Target1.xyz = unity_ColorSpaceLuminance.www * u_xlat0.xxx + vec3(u_xlat1);
					    SV_Target1.w = 0.0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 349148
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, -0.5, 1, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    slt r0.x, -c4.y, c4.y
					    slt r0.y, c4.y, -c4.y
					    add r0.y, -r0.y, r0.x
					    add r0.zw, c5.x, v1.xyxy
					    mov r0.x, c5.y
					    mad o2.xy, r0.zwzw, r0, c5.z
					    mov o1.xy, v1
					
					// approximately 11 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					int u_xlati1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlati0 = int((0.0<_MainTex_TexelSize.y) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_MainTex_TexelSize.y<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati0) + u_xlati1;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat1 = in_TEXCOORD0.y + -0.5;
					    phase0_Output0_1.w = u_xlat1 * u_xlat0.x + 0.5;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					 vec4 phase0_Output0_1;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					int u_xlati3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlati0 = int((0.0<_MainTex_TexelSize.y) ? 0xFFFFFFFFu : uint(0));
					    u_xlati3 = int((_MainTex_TexelSize.y<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = (-u_xlati0) + u_xlati3;
					    u_xlat0.x = float(u_xlati0);
					    u_xlat3 = in_TEXCOORD0.y + -0.5;
					    phase0_Output0_1.w = u_xlat3 * u_xlat0.x + 0.5;
					    phase0_Output0_1.xyz = in_TEXCOORD0.xyx;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _OcclusionTexture;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _MainTex                  s0       1
					//   _OcclusionTexture         s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0.454545468, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v1, s1
					    add_pp r0.y, -r0.x, c1.x
					    pow_pp r1.x, r0.y, c1.y
					    add_pp r0.y, -r1.x, c1.x
					    lrp_pp r1.x, c0.w, r0.x, r0.y
					    add_pp oC0.xyz, -r1.x, c1.x
					    texld_pp r0, v0, s0
					    mov_pp oC0.w, r0.w
					
					// approximately 10 instruction slots used (2 texture, 8 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_OcclusionTexture, vs_TEXCOORD1.xy);
					    u_xlat1 = (-u_xlat0.x) + 1.0;
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * 0.454545468;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat1 = (-u_xlat1) + 1.0;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    u_xlat0.x = unity_ColorSpaceLuminance.w * u_xlat0.x + u_xlat1;
					    SV_Target0.xyz = (-u_xlat0.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_OcclusionTexture, vs_TEXCOORD1.xy);
					    u_xlat1 = (-u_xlat0.x) + 1.0;
					    u_xlat1 = log2(u_xlat1);
					    u_xlat1 = u_xlat1 * 0.454545468;
					    u_xlat1 = exp2(u_xlat1);
					    u_xlat1 = (-u_xlat1) + 1.0;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    u_xlat0.x = unity_ColorSpaceLuminance.w * u_xlat0.x + u_xlat1;
					    SV_Target0.xyz = (-u_xlat0.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
}
 }
}
}