Shader "Hidden/LensAberrations" {
Properties {
 _MainTex ("Texture", 2D) = "white" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 64859
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurPass;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurPass          c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 1.38461542
					    def c7, 3.23076916, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xw, c6
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mad o2.xy, c5, r0.w, r0
					    mad o2.zw, c5.xyxy, -r0.w, r0.xyxy
					    mov r1.xy, c5
					    mad o3.xy, r1, c7.x, r0
					    mad o3.zw, r1.xyxy, -c7.x, r0.xyxy
					    mov o1.xy, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurPass;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurPass          c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 1.38461542
					    def c7, 3.23076916, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xw, c6
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mad o2.xy, c5, r0.w, r0
					    mad o2.zw, c5.xyxy, -r0.w, r0.xyxy
					    mov r1.xy, c5
					    mad o3.xy, r1, c7.x, r0
					    mad o3.zw, r1.xyxy, -c7.x, r0.xyxy
					    mov o1.xy, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurPass;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurPass          c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 1.38461542
					    def c7, 3.23076916, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xw, c6
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mad o2.xy, c5, r0.w, r0
					    mad o2.zw, c5.xyxy, -r0.w, r0.xyxy
					    mov r1.xy, c5
					    mad o3.xy, r1, c7.x, r0
					    mad o3.zw, r1.xyxy, -c7.x, r0.xyxy
					    mov o1.xy, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "CHROMATIC_ABERRATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurPass;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurPass          c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 1.38461542
					    def c7, 3.23076916, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xw, c6
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mad o2.xy, c5, r0.w, r0
					    mad o2.zw, c5.xyxy, -r0.w, r0.xyxy
					    mov r1.xy, c5
					    mad o3.xy, r1, c7.x, r0
					    mad o3.zw, r1.xyxy, -c7.x, r0.xyxy
					    mov o1.xy, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "CHROMATIC_ABERRATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "CHROMATIC_ABERRATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurPass;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurPass          c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 1.38461542
					    def c7, 3.23076916, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xw, c6
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mad o2.xy, c5, r0.w, r0
					    mad o2.zw, c5.xyxy, -r0.w, r0.xyxy
					    mov r1.xy, c5
					    mad o3.xy, r1, c7.x, r0
					    mad o3.zw, r1.xyxy, -c7.x, r0.xyxy
					    mov o1.xy, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "CHROMATIC_ABERRATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "CHROMATIC_ABERRATION" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float2 _BlurPass;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _BlurPass          c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 1.38461542
					    def c7, 3.23076916, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov r0.xw, c6
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c6.y, c6.z
					    mad r0.y, r0.x, r0.y, v1.y
					    mov r0.x, v1.x
					    mad o2.xy, c5, r0.w, r0
					    mad o2.zw, c5.xyxy, -r0.w, r0.xyxy
					    mov r1.xy, c5
					    mad o3.xy, r1, c7.x, r0
					    mad o3.zw, r1.xyxy, -c7.x, r0.xyxy
					    mov o1.xy, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "CHROMATIC_ABERRATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "CHROMATIC_ABERRATION" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
						vec2 _BlurPass;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + u_xlat0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0.31621623, 0.227027029, 0.0702702701, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1
					    dcl_texcoord2_pp v2
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    mul_pp r0, r0, c0.x
					    texld_pp r1, v0, s0
					    mad_pp r0, r1, c0.y, r0
					    texld_pp r1, v1.zwzw, s0
					    mad_pp r0, r1, c0.x, r0
					    texld_pp r1, v2, s0
					    mad_pp r0, r1, c0.z, r0
					    texld_pp r1, v2.zwzw, s0
					    mad_pp oC0, r1, c0.z, r0
					
					// approximately 10 instruction slots used (5 texture, 5 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat0 = u_xlat1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0 = u_xlat0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat0 = u_xlat1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _DistCenterScale c0       1
					//   _DistAmount      c1       1
					//   _MainTex         s0       1
					//
					
					    ps_3_0
					    def c2, 0.227027029, 0.0702702701, 0, 0
					    def c3, 6.28318548, -3.14159274, -1, 0.31621623
					    def c4, -0.5, 0.5, 0, 0.159154937
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1
					    dcl_texcoord2_pp v2
					    dcl_2d s0
					    add_pp r0.xy, c4.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c4.y
					    mul_pp r1.xy, r1, c0.zwzw
					    dp2add_pp r0.w, r1, r1, c4.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    mul_pp r1.zw, r0.w, c1.xyxy
					    mad_pp r0.w, r1.z, c4.w, c4.y
					    rcp_pp r1.z, r1.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.w, r0.w, c3.x, c3.y
					    sincos_pp r2.xy, r0.w
					    rcp_pp r0.w, r2.x
					    mul_pp r0.w, r0.w, r2.y
					    mad_pp r0.w, r0.w, r1.z, c3.z
					    mad_pp r0.xy, r1, r0.w, r0
					    texld_pp r1, r0, s0
					    add_pp r2, c4.x, v1
					    mad_pp r3, r2, r0.z, -c0.xyxy
					    mad_pp r2, r2, r0.z, c4.y
					    mul_pp r3, r3, c0.zwzw
					    dp2add_pp r0.x, r3, r3, c4.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    mul_pp r0.xy, r0.x, c1
					    mad_pp r0.x, r0.x, c4.w, c4.y
					    rcp_pp r0.y, r0.y
					    frc_pp r0.x, r0.x
					    mad_pp r0.x, r0.x, c3.x, c3.y
					    sincos_pp r4.xy, r0.x
					    rcp_pp r0.x, r4.x
					    mul_pp r0.x, r0.x, r4.y
					    mad_pp r0.x, r0.x, r0.y, c3.z
					    mad_pp r0.xy, r3, r0.x, r2
					    texld_pp r4, r0, s0
					    mul_pp r4, r4, c3.w
					    mad_pp r1, r1, c2.x, r4
					    dp2add_pp r0.x, r3.zwzw, r3.zwzw, c4.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    mul_pp r0.xy, r0.x, c1
					    mad_pp r0.x, r0.x, c4.w, c4.y
					    rcp_pp r0.y, r0.y
					    frc_pp r0.x, r0.x
					    mad_pp r0.x, r0.x, c3.x, c3.y
					    sincos_pp r4.xy, r0.x
					    rcp_pp r0.x, r4.x
					    mul_pp r0.x, r0.x, r4.y
					    mad_pp r0.x, r0.x, r0.y, c3.z
					    mad_pp r0.xy, r3.zwzw, r0.x, r2.zwzw
					    texld_pp r2, r0, s0
					    mad_pp r1, r2, c3.w, r1
					    add_pp r2, c4.x, v2
					    mad_pp r3, r2, r0.z, -c0.xyxy
					    mad_pp r0, r2, r0.z, c4.y
					    mul_pp r2, r3, c0.zwzw
					    dp2add_pp r3.x, r2, r2, c4.z
					    rsq_pp r3.x, r3.x
					    rcp_pp r3.x, r3.x
					    mul_pp r3.xy, r3.x, c1
					    mad_pp r3.x, r3.x, c4.w, c4.y
					    rcp_pp r3.y, r3.y
					    frc_pp r3.x, r3.x
					    mad_pp r3.x, r3.x, c3.x, c3.y
					    sincos_pp r4.xy, r3.x
					    rcp_pp r3.x, r4.x
					    mul_pp r3.x, r3.x, r4.y
					    mad_pp r3.x, r3.x, r3.y, c3.z
					    mad_pp r0.xy, r2, r3.x, r0
					    texld_pp r3, r0, s0
					    mad_pp r1, r3, c2.y, r1
					    dp2add_pp r0.x, r2.zwzw, r2.zwzw, c4.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    mul_pp r0.xy, r0.x, c1
					    mad_pp r0.x, r0.x, c4.w, c4.y
					    rcp_pp r0.y, r0.y
					    frc_pp r0.x, r0.x
					    mad_pp r0.x, r0.x, c3.x, c3.y
					    sincos_pp r3.xy, r0.x
					    rcp_pp r0.x, r3.x
					    mul_pp r0.x, r0.x, r3.y
					    mad_pp r0.x, r0.x, r0.y, c3.z
					    mad_pp r0.xy, r2.zwzw, r0.x, r0.zwzw
					    texld_pp r0, r0, s0
					    mad_pp oC0, r0, c2.y, r1
					
					// approximately 128 instruction slots used (5 texture, 123 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat8;
					vec2 u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4 = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat0 = u_xlat0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat0;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4 = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat8;
					vec2 u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4 = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat0 = u_xlat0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat0;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4 = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _DistCenterScale c0       1
					//   _DistAmount      c1       1
					//   _MainTex         s0       1
					//
					
					    ps_3_0
					    def c2, -0.5, 0.5, 0, -1
					    def c3, 0.999866009, -2, 1.57079637, 0.31621623
					    def c4, 0.227027029, 0.0702702701, 0, 0
					    def c5, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1
					    dcl_texcoord2_pp v2
					    dcl_2d s0
					    add_pp r0.xy, c2.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c2.y
					    mul_pp r1.xy, r1, c0.zwzw
					    dp2add_pp r0.w, r1, r1, c2.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.z, r1.z, c1.y
					    add r1.w, r1_abs.z, c2.w
					    rcp_pp r2.x, r1_abs.z
					    cmp_pp r1.w, r1.w, r2.x, -c2.w
					    mov_sat_pp r2.x, r1_abs.z
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r2.x, c5.x, c5.y
					    mad_pp r2.y, r2.x, r2.y, c5.z
					    mad_pp r2.y, r2.x, r2.y, c5.w
					    mad_pp r2.x, r2.x, r2.y, c3.x
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r2.x, r1.w, c3.y, c3.z
					    add r2.y, -r1_abs.z, -c2.w
					    min_pp r2.z, r1.z, -c2.w
					    cmp_pp r1.z, r2.z, c2_abs.z, c2_abs.w
					    cmp_pp r2.y, r2.y, c2_abs.z, c2_abs.w
					    mad_pp r1.w, r2.x, r2.y, r1.w
					    add_pp r2.x, r1.w, r1.w
					    mad_pp r1.z, r1.z, -r2.x, r1.w
					    mad_pp r0.w, r0.w, r1.z, c2.w
					    mad_pp r0.xy, r1, r0.w, r0
					    texld_pp r1, r0, s0
					    add_pp r2, c2.x, v1
					    mad_pp r3, r2, r0.z, -c0.xyxy
					    mad_pp r2, r2, r0.z, c2.y
					    mul_pp r3, r3, c0.zwzw
					    dp2add_pp r0.x, r3, r3, c2.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.y, r0.x
					    mul_pp r0.xy, r0, c1
					    add r0.w, r0_abs.y, c2.w
					    rcp_pp r4.x, r0_abs.y
					    cmp_pp r0.w, r0.w, r4.x, -c2.w
					    mov_sat_pp r4.x, r0_abs.y
					    mul_pp r0.w, r0.w, r4.x
					    mul_pp r4.x, r0.w, r0.w
					    mad_pp r4.y, r4.x, c5.x, c5.y
					    mad_pp r4.y, r4.x, r4.y, c5.z
					    mad_pp r4.y, r4.x, r4.y, c5.w
					    mad_pp r4.x, r4.x, r4.y, c3.x
					    mul_pp r0.w, r0.w, r4.x
					    mad_pp r4.x, r0.w, c3.y, c3.z
					    add r4.y, -r0_abs.y, -c2.w
					    min_pp r4.z, r0.y, -c2.w
					    cmp_pp r0.y, r4.z, c2_abs.z, c2_abs.w
					    cmp_pp r4.y, r4.y, c2_abs.z, c2_abs.w
					    mad_pp r0.w, r4.x, r4.y, r0.w
					    add_pp r4.x, r0.w, r0.w
					    mad_pp r0.y, r0.y, -r4.x, r0.w
					    mad_pp r0.x, r0.x, r0.y, c2.w
					    mad_pp r0.xy, r3, r0.x, r2
					    texld_pp r4, r0, s0
					    mul_pp r4, r4, c3.w
					    mad_pp r1, r1, c4.x, r4
					    dp2add_pp r0.x, r3.zwzw, r3.zwzw, c2.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.y, r0.x
					    mul_pp r0.xy, r0, c1
					    add r0.w, r0_abs.y, c2.w
					    rcp_pp r2.x, r0_abs.y
					    cmp_pp r0.w, r0.w, r2.x, -c2.w
					    mov_sat_pp r2.x, r0_abs.y
					    mul_pp r0.w, r0.w, r2.x
					    mul_pp r2.x, r0.w, r0.w
					    mad_pp r2.y, r2.x, c5.x, c5.y
					    mad_pp r2.y, r2.x, r2.y, c5.z
					    mad_pp r2.y, r2.x, r2.y, c5.w
					    mad_pp r2.x, r2.x, r2.y, c3.x
					    mul_pp r0.w, r0.w, r2.x
					    mad_pp r2.x, r0.w, c3.y, c3.z
					    add r2.y, -r0_abs.y, -c2.w
					    min_pp r3.x, r0.y, -c2.w
					    cmp_pp r0.y, r3.x, c2_abs.z, c2_abs.w
					    cmp_pp r2.y, r2.y, c2_abs.z, c2_abs.w
					    mad_pp r0.w, r2.x, r2.y, r0.w
					    add_pp r2.x, r0.w, r0.w
					    mad_pp r0.y, r0.y, -r2.x, r0.w
					    mad_pp r0.x, r0.x, r0.y, c2.w
					    mad_pp r0.xy, r3.zwzw, r0.x, r2.zwzw
					    texld_pp r2, r0, s0
					    mad_pp r1, r2, c3.w, r1
					    add_pp r2, c2.x, v2
					    mad_pp r3, r2, r0.z, -c0.xyxy
					    mad_pp r0, r2, r0.z, c2.y
					    mul_pp r2, r3, c0.zwzw
					    dp2add_pp r3.x, r2, r2, c2.z
					    rsq_pp r3.x, r3.x
					    rcp_pp r3.y, r3.x
					    mul_pp r3.xy, r3, c1
					    add r3.z, r3_abs.y, c2.w
					    rcp_pp r3.w, r3_abs.y
					    cmp_pp r3.z, r3.z, r3.w, -c2.w
					    mov_sat_pp r3.w, r3_abs.y
					    mul_pp r3.z, r3.z, r3.w
					    mul_pp r3.w, r3.z, r3.z
					    mad_pp r4.x, r3.w, c5.x, c5.y
					    mad_pp r4.x, r3.w, r4.x, c5.z
					    mad_pp r4.x, r3.w, r4.x, c5.w
					    mad_pp r3.w, r3.w, r4.x, c3.x
					    mul_pp r3.z, r3.w, r3.z
					    mad_pp r3.w, r3.z, c3.y, c3.z
					    add r4.x, -r3_abs.y, -c2.w
					    min_pp r4.y, r3.y, -c2.w
					    cmp_pp r3.y, r4.y, c2_abs.z, c2_abs.w
					    cmp_pp r4.x, r4.x, c2_abs.z, c2_abs.w
					    mad_pp r3.z, r3.w, r4.x, r3.z
					    add_pp r3.w, r3.z, r3.z
					    mad_pp r3.y, r3.y, -r3.w, r3.z
					    mad_pp r3.x, r3.x, r3.y, c2.w
					    mad_pp r0.xy, r2, r3.x, r0
					    texld_pp r3, r0, s0
					    mad_pp r1, r3, c4.y, r1
					    dp2add_pp r0.x, r2.zwzw, r2.zwzw, c2.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.y, r0.x
					    mul_pp r0.xy, r0, c1
					    add r2.x, r0_abs.y, c2.w
					    rcp_pp r2.y, r0_abs.y
					    cmp_pp r2.x, r2.x, r2.y, -c2.w
					    mov_sat_pp r2.y, r0_abs.y
					    mul_pp r2.x, r2.x, r2.y
					    mul_pp r2.y, r2.x, r2.x
					    mad_pp r3.x, r2.y, c5.x, c5.y
					    mad_pp r3.x, r2.y, r3.x, c5.z
					    mad_pp r3.x, r2.y, r3.x, c5.w
					    mad_pp r2.y, r2.y, r3.x, c3.x
					    mul_pp r2.x, r2.y, r2.x
					    mad_pp r2.y, r2.x, c3.y, c3.z
					    add r3.x, -r0_abs.y, -c2.w
					    min_pp r3.y, r0.y, -c2.w
					    cmp_pp r0.y, r3.y, c2_abs.z, c2_abs.w
					    cmp_pp r3.x, r3.x, c2_abs.z, c2_abs.w
					    mad_pp r2.x, r2.y, r3.x, r2.x
					    add_pp r2.y, r2.x, r2.x
					    mad_pp r0.y, r0.y, -r2.y, r2.x
					    mad_pp r0.x, r0.x, r0.y, c2.w
					    mad_pp r0.xy, r2.zwzw, r0.x, r0.zwzw
					    texld_pp r0, r0, s0
					    mad_pp oC0, r0, c4.y, r1
					
					// approximately 154 instruction slots used (5 texture, 149 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat8;
					bool u_xlatb8;
					bool u_xlatb9;
					vec2 u_xlat10;
					float u_xlat11;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat11 = max(abs(u_xlat6), 1.0);
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat16 = min(abs(u_xlat6), 1.0);
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat16 = u_xlat11 * u_xlat11;
					    u_xlat2.x = u_xlat16 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + -0.330299497;
					    u_xlat16 = u_xlat16 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb7 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat2.x = u_xlatb7 ? u_xlat2.x : float(0.0);
					    u_xlat11 = u_xlat11 * u_xlat16 + u_xlat2.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat11) : u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4 = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4 = u_xlat18 * u_xlat4 + 0.180141002;
					    u_xlat4 = u_xlat18 * u_xlat4 + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4 + 0.999866009;
					    u_xlat4 = u_xlat18 * u_xlat13;
					    u_xlat4 = u_xlat4 * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4 = u_xlatb9 ? u_xlat4 : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat0 = u_xlat0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat6), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat6), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat0;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4 = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4 = u_xlat18 * u_xlat4 + 0.180141002;
					    u_xlat4 = u_xlat18 * u_xlat4 + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4 + 0.999866009;
					    u_xlat4 = u_xlat18 * u_xlat13;
					    u_xlat4 = u_xlat4 * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4 = u_xlatb9 ? u_xlat4 : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat6), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat6), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat8;
					bool u_xlatb8;
					bool u_xlatb9;
					vec2 u_xlat10;
					float u_xlat11;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat11 = max(abs(u_xlat6), 1.0);
					    u_xlat11 = float(1.0) / u_xlat11;
					    u_xlat16 = min(abs(u_xlat6), 1.0);
					    u_xlat11 = u_xlat11 * u_xlat16;
					    u_xlat16 = u_xlat11 * u_xlat11;
					    u_xlat2.x = u_xlat16 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + -0.330299497;
					    u_xlat16 = u_xlat16 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb7 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat2.x = u_xlatb7 ? u_xlat2.x : float(0.0);
					    u_xlat11 = u_xlat11 * u_xlat16 + u_xlat2.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat11) : u_xlat11;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4 = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4 = u_xlat18 * u_xlat4 + 0.180141002;
					    u_xlat4 = u_xlat18 * u_xlat4 + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4 + 0.999866009;
					    u_xlat4 = u_xlat18 * u_xlat13;
					    u_xlat4 = u_xlat4 * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4 = u_xlatb9 ? u_xlat4 : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat0 = u_xlat0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat6), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat6), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat0;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4 = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4 = u_xlat18 * u_xlat4 + 0.180141002;
					    u_xlat4 = u_xlat18 * u_xlat4 + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4 + 0.999866009;
					    u_xlat4 = u_xlat18 * u_xlat13;
					    u_xlat4 = u_xlat4 * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4 = u_xlatb9 ? u_xlat4 : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat6), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat6), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0 = u_xlat1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "CHROMATIC_ABERRATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c1, 0.227027029, 0.0702702701, 0, 0
					    def c2, 2, -1, 0, 0.31621623
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1
					    dcl_texcoord2_pp v2
					    dcl_2d s0
					    mad_pp r0.xy, v0, c2.x, c2.y
					    dp2add_pp r0.z, r0, r0, c2.z
					    mul_pp r0.xy, r0.z, r0
					    mad_pp r0.xy, r0, -c0.w, v0
					    texld_pp r0, r0, s0
					    texld_pp r1, v0, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp r2.w, r1.w
					    mad_pp r0, v1, c2.x, c2.y
					    dp2add_pp r1.x, r0, r0, c2.z
					    mul_pp r0.xy, r0, r1.x
					    mad_pp r0.xy, r0, -c0.w, v1
					    texld_pp r1, r0, s0
					    texld_pp r3, v1, s0
					    lrp_pp r4.xyz, c0, r1, r3
					    mov_pp r4.w, r3.w
					    mul_pp r1, r4, c2.w
					    mad_pp r1, r2, c1.x, r1
					    dp2add_pp r0.x, r0.zwzw, r0.zwzw, c2.z
					    mul_pp r0.xy, r0.x, r0.zwzw
					    mad_pp r0.xy, r0, -c0.w, v1.zwzw
					    texld_pp r0, r0, s0
					    texld_pp r2, v1.zwzw, s0
					    lrp_pp r3.xyz, c0, r0, r2
					    mov_pp r3.w, r2.w
					    mad_pp r0, r3, c2.w, r1
					    mad_pp r1, v2, c2.x, c2.y
					    dp2add_pp r2.x, r1, r1, c2.z
					    mul_pp r1.xy, r1, r2.x
					    mad_pp r1.xy, r1, -c0.w, v2
					    texld_pp r2, r1, s0
					    texld_pp r3, v2, s0
					    lrp_pp r4.xyz, c0, r2, r3
					    mov_pp r4.w, r3.w
					    mad_pp r0, r4, c1.y, r0
					    dp2add_pp r1.x, r1.zwzw, r1.zwzw, c2.z
					    mul_pp r1.xy, r1.x, r1.zwzw
					    mad_pp r1.xy, r1, -c0.w, v2.zwzw
					    texld_pp r1, r1, s0
					    texld_pp r2, v2.zwzw, s0
					    lrp_pp r3.xyz, c0, r1, r2
					    mov_pp r3.w, r2.w
					    mad_pp oC0, r3, c1.y, r0
					
					// approximately 48 instruction slots used (10 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "CHROMATIC_ABERRATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat2;
					    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat0.xy = u_xlat0.xx * u_xlat0.zw;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xx;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat1.xy = u_xlat1.xx * u_xlat1.zw;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat2 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "CHROMATIC_ABERRATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat8 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xx;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat2;
					    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat0.xy = u_xlat0.xx * u_xlat0.zw;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xx;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
					    u_xlat1.xy = u_xlat1.xx * u_xlat1.zw;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat2 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c3, 0.31621623, 0.227027029, 0.0702702701, 0
					    def c4, -0.5, 0.5, 0, 0.159154937
					    def c5, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1
					    dcl_texcoord2_pp v2
					    dcl_2d s0
					    add_pp r0.xy, c4.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c4.y
					    mul_pp r1.xy, r1, c1.zwzw
					    dp2add_pp r0.w, r1, r1, c4.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    mul_pp r1.zw, r0.w, c2.xyxy
					    mad_pp r0.w, r1.z, c4.w, c4.y
					    rcp_pp r1.z, r1.w
					    frc_pp r0.w, r0.w
					    mad_pp r0.w, r0.w, c5.x, c5.y
					    sincos_pp r2.xy, r0.w
					    rcp_pp r0.w, r2.x
					    mul_pp r0.w, r0.w, r2.y
					    mad_pp r0.w, r0.w, r1.z, c5.z
					    mad_pp r0.xy, r1, r0.w, r0
					    mad_pp r1.xy, r0, c5.w, c5.z
					    dp2add_pp r0.w, r1, r1, c4.z
					    mul_pp r1.xy, r0.w, r1
					    mad_pp r1.xy, r1, -c0.w, r0
					    texld_pp r2, r0, s0
					    texld_pp r1, r1, s0
					    lrp_pp r3.xyz, c0, r1, r2
					    mov_pp r3.w, r2.w
					    add_pp r1, c4.x, v1
					    mad_pp r2, r1, r0.z, -c1.xyxy
					    mad_pp r1, r1, r0.z, c4.y
					    mul_pp r2, r2, c1.zwzw
					    dp2add_pp r0.x, r2, r2, c4.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    mul_pp r0.xy, r0.x, c2
					    mad_pp r0.x, r0.x, c4.w, c4.y
					    rcp_pp r0.y, r0.y
					    frc_pp r0.x, r0.x
					    mad_pp r0.x, r0.x, c5.x, c5.y
					    sincos_pp r4.xy, r0.x
					    rcp_pp r0.x, r4.x
					    mul_pp r0.x, r0.x, r4.y
					    mad_pp r0.x, r0.x, r0.y, c5.z
					    mad_pp r0.xy, r2, r0.x, r1
					    mad_pp r1.xy, r0, c5.w, c5.z
					    dp2add_pp r0.w, r1, r1, c4.z
					    mul_pp r1.xy, r0.w, r1
					    mad_pp r1.xy, r1, -c0.w, r0
					    texld_pp r4, r0, s0
					    texld_pp r5, r1, s0
					    lrp_pp r6.xyz, c0, r5, r4
					    mov_pp r6.w, r4.w
					    mul_pp r4, r6, c3.x
					    mad_pp r3, r3, c3.y, r4
					    dp2add_pp r0.x, r2.zwzw, r2.zwzw, c4.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    mul_pp r0.xy, r0.x, c2
					    mad_pp r0.x, r0.x, c4.w, c4.y
					    rcp_pp r0.y, r0.y
					    frc_pp r0.x, r0.x
					    mad_pp r0.x, r0.x, c5.x, c5.y
					    sincos_pp r4.xy, r0.x
					    rcp_pp r0.x, r4.x
					    mul_pp r0.x, r0.x, r4.y
					    mad_pp r0.x, r0.x, r0.y, c5.z
					    mad_pp r0.xy, r2.zwzw, r0.x, r1.zwzw
					    mad_pp r1.xy, r0, c5.w, c5.z
					    dp2add_pp r0.w, r1, r1, c4.z
					    mul_pp r1.xy, r0.w, r1
					    mad_pp r1.xy, r1, -c0.w, r0
					    texld_pp r2, r0, s0
					    texld_pp r1, r1, s0
					    lrp_pp r4.xyz, c0, r1, r2
					    mov_pp r4.w, r2.w
					    mad_pp r1, r4, c3.x, r3
					    add_pp r2, c4.x, v2
					    mad_pp r3, r2, r0.z, -c1.xyxy
					    mad_pp r0, r2, r0.z, c4.y
					    mul_pp r2, r3, c1.zwzw
					    dp2add_pp r3.x, r2, r2, c4.z
					    rsq_pp r3.x, r3.x
					    rcp_pp r3.x, r3.x
					    mul_pp r3.xy, r3.x, c2
					    mad_pp r3.x, r3.x, c4.w, c4.y
					    rcp_pp r3.y, r3.y
					    frc_pp r3.x, r3.x
					    mad_pp r3.x, r3.x, c5.x, c5.y
					    sincos_pp r4.xy, r3.x
					    rcp_pp r3.x, r4.x
					    mul_pp r3.x, r3.x, r4.y
					    mad_pp r3.x, r3.x, r3.y, c5.z
					    mad_pp r0.xy, r2, r3.x, r0
					    mad_pp r2.xy, r0, c5.w, c5.z
					    dp2add_pp r3.x, r2, r2, c4.z
					    mul_pp r2.xy, r2, r3.x
					    mad_pp r2.xy, r2, -c0.w, r0
					    texld_pp r3, r0, s0
					    texld_pp r4, r2, s0
					    lrp_pp r5.xyz, c0, r4, r3
					    mov_pp r5.w, r3.w
					    mad_pp r1, r5, c3.z, r1
					    dp2add_pp r0.x, r2.zwzw, r2.zwzw, c4.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    mul_pp r0.xy, r0.x, c2
					    mad_pp r0.x, r0.x, c4.w, c4.y
					    rcp_pp r0.y, r0.y
					    frc_pp r0.x, r0.x
					    mad_pp r0.x, r0.x, c5.x, c5.y
					    sincos_pp r3.xy, r0.x
					    rcp_pp r0.x, r3.x
					    mul_pp r0.x, r0.x, r3.y
					    mad_pp r0.x, r0.x, r0.y, c5.z
					    mad_pp r0.xy, r2.zwzw, r0.x, r0.zwzw
					    mad_pp r0.zw, r0.xyxy, c5.w, c5.z
					    dp2add_pp r2.x, r0.zwzw, r0.zwzw, c4.z
					    mul_pp r0.zw, r0, r2.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r2, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r3.xyz, c0, r0, r2
					    mov_pp r3.w, r2.w
					    mad_pp oC0, r3, c3.z, r1
					
					// approximately 168 instruction slots used (10 texture, 158 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat6;
					float u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat1.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat0 = u_xlat0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4.x = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat0.xy = u_xlat2.xy * u_xlat3.xx + u_xlat0.xy;
					    u_xlat2.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat3 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat0.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xy = u_xlat0.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat0.x);
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat5 = float(1.0) / u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + -1.0;
					    u_xlat0.xy = u_xlat2.zw * u_xlat0.xx + u_xlat0.zw;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat2.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4.x = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat2.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat11.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat11.xy = u_xlat11.xy * u_xlat2.xx;
					    u_xlat11.xy = (-u_xlat11.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat11.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat2 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "CHROMATIC_ABERRATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat6;
					float u_xlat8;
					vec2 u_xlat10;
					vec2 u_xlat11;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat1.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat0 = u_xlat0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4.x = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat0.xy = u_xlat2.xy * u_xlat3.xx + u_xlat0.xy;
					    u_xlat2.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat3 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat0.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.xy = u_xlat0.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat0.x);
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat5 = float(1.0) / u_xlat0.y;
					    u_xlat0.x = u_xlat0.x / u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + -1.0;
					    u_xlat0.xy = u_xlat2.zw * u_xlat0.xx + u_xlat0.zw;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat2.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.xy = u_xlat3.xx * _DistAmount.xy;
					    u_xlat4.x = cos(u_xlat3.x);
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat8 = float(1.0) / u_xlat3.y;
					    u_xlat3.x = u_xlat3.x / u_xlat4.x;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat2.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat6 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat11.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat11.xy = u_xlat11.xy * u_xlat2.xx;
					    u_xlat11.xy = (-u_xlat11.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat11.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat2 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "CHROMATIC_ABERRATION" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c3, -0.5, 0.5, 0, -1
					    def c4, 0.31621623, 0.227027029, 0.0702702701, 0
					    def c5, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c6, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1_pp v1
					    dcl_texcoord2_pp v2
					    dcl_2d s0
					    add_pp r0.xy, c3.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c3.y
					    mul_pp r1.xy, r1, c1.zwzw
					    dp2add_pp r0.w, r1, r1, c3.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.z, r1.z, c2.y
					    add r1.w, r1_abs.z, c3.w
					    rcp_pp r2.x, r1_abs.z
					    cmp_pp r1.w, r1.w, r2.x, -c3.w
					    mov_sat_pp r2.x, r1_abs.z
					    mul_pp r1.w, r1.w, r2.x
					    mul_pp r2.x, r1.w, r1.w
					    mad_pp r2.y, r2.x, c5.x, c5.y
					    mad_pp r2.y, r2.x, r2.y, c5.z
					    mad_pp r2.y, r2.x, r2.y, c5.w
					    mad_pp r2.x, r2.x, r2.y, c6.x
					    mul_pp r1.w, r1.w, r2.x
					    mad_pp r2.x, r1.w, c6.y, c6.z
					    add r2.y, -r1_abs.z, -c3.w
					    min_pp r2.z, r1.z, -c3.w
					    cmp_pp r1.z, r2.z, c3_abs.z, c3_abs.w
					    cmp_pp r2.y, r2.y, c3_abs.z, c3_abs.w
					    mad_pp r1.w, r2.x, r2.y, r1.w
					    add_pp r2.x, r1.w, r1.w
					    mad_pp r1.z, r1.z, -r2.x, r1.w
					    mad_pp r0.w, r0.w, r1.z, c3.w
					    mad_pp r0.xy, r1, r0.w, r0
					    mad_pp r1.xy, r0, -c6.y, -c6.w
					    dp2add_pp r0.w, r1, r1, c3.z
					    mul_pp r1.xy, r0.w, r1
					    mad_pp r1.xy, r1, -c0.w, r0
					    texld_pp r2, r0, s0
					    texld_pp r1, r1, s0
					    lrp_pp r3.xyz, c0, r1, r2
					    mov_pp r3.w, r2.w
					    add_pp r1, c3.x, v1
					    mad_pp r2, r1, r0.z, -c1.xyxy
					    mad_pp r1, r1, r0.z, c3.y
					    mul_pp r2, r2, c1.zwzw
					    dp2add_pp r0.x, r2, r2, c3.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.y, r0.x
					    mul_pp r0.xy, r0, c2
					    add r0.w, r0_abs.y, c3.w
					    rcp_pp r4.x, r0_abs.y
					    cmp_pp r0.w, r0.w, r4.x, -c3.w
					    mov_sat_pp r4.x, r0_abs.y
					    mul_pp r0.w, r0.w, r4.x
					    mul_pp r4.x, r0.w, r0.w
					    mad_pp r4.y, r4.x, c5.x, c5.y
					    mad_pp r4.y, r4.x, r4.y, c5.z
					    mad_pp r4.y, r4.x, r4.y, c5.w
					    mad_pp r4.x, r4.x, r4.y, c6.x
					    mul_pp r0.w, r0.w, r4.x
					    mad_pp r4.x, r0.w, c6.y, c6.z
					    add r4.y, -r0_abs.y, -c3.w
					    min_pp r4.z, r0.y, -c3.w
					    cmp_pp r0.y, r4.z, c3_abs.z, c3_abs.w
					    cmp_pp r4.y, r4.y, c3_abs.z, c3_abs.w
					    mad_pp r0.w, r4.x, r4.y, r0.w
					    add_pp r4.x, r0.w, r0.w
					    mad_pp r0.y, r0.y, -r4.x, r0.w
					    mad_pp r0.x, r0.x, r0.y, c3.w
					    mad_pp r0.xy, r2, r0.x, r1
					    mad_pp r1.xy, r0, -c6.y, -c6.w
					    dp2add_pp r0.w, r1, r1, c3.z
					    mul_pp r1.xy, r0.w, r1
					    mad_pp r1.xy, r1, -c0.w, r0
					    texld_pp r4, r0, s0
					    texld_pp r5, r1, s0
					    lrp_pp r6.xyz, c0, r5, r4
					    mov_pp r6.w, r4.w
					    mul_pp r4, r6, c4.x
					    mad_pp r3, r3, c4.y, r4
					    dp2add_pp r0.x, r2.zwzw, r2.zwzw, c3.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.y, r0.x
					    mul_pp r0.xy, r0, c2
					    add r0.w, r0_abs.y, c3.w
					    rcp_pp r1.x, r0_abs.y
					    cmp_pp r0.w, r0.w, r1.x, -c3.w
					    mov_sat_pp r1.x, r0_abs.y
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r1.x, r0.w, r0.w
					    mad_pp r1.y, r1.x, c5.x, c5.y
					    mad_pp r1.y, r1.x, r1.y, c5.z
					    mad_pp r1.y, r1.x, r1.y, c5.w
					    mad_pp r1.x, r1.x, r1.y, c6.x
					    mul_pp r0.w, r0.w, r1.x
					    mad_pp r1.x, r0.w, c6.y, c6.z
					    add r1.y, -r0_abs.y, -c3.w
					    min_pp r2.x, r0.y, -c3.w
					    cmp_pp r0.y, r2.x, c3_abs.z, c3_abs.w
					    cmp_pp r1.y, r1.y, c3_abs.z, c3_abs.w
					    mad_pp r0.w, r1.x, r1.y, r0.w
					    add_pp r1.x, r0.w, r0.w
					    mad_pp r0.y, r0.y, -r1.x, r0.w
					    mad_pp r0.x, r0.x, r0.y, c3.w
					    mad_pp r0.xy, r2.zwzw, r0.x, r1.zwzw
					    mad_pp r1.xy, r0, -c6.y, -c6.w
					    dp2add_pp r0.w, r1, r1, c3.z
					    mul_pp r1.xy, r0.w, r1
					    mad_pp r1.xy, r1, -c0.w, r0
					    texld_pp r2, r0, s0
					    texld_pp r1, r1, s0
					    lrp_pp r4.xyz, c0, r1, r2
					    mov_pp r4.w, r2.w
					    mad_pp r1, r4, c4.x, r3
					    add_pp r2, c3.x, v2
					    mad_pp r3, r2, r0.z, -c1.xyxy
					    mad_pp r0, r2, r0.z, c3.y
					    mul_pp r2, r3, c1.zwzw
					    dp2add_pp r3.x, r2, r2, c3.z
					    rsq_pp r3.x, r3.x
					    rcp_pp r3.y, r3.x
					    mul_pp r3.xy, r3, c2
					    add r3.z, r3_abs.y, c3.w
					    rcp_pp r3.w, r3_abs.y
					    cmp_pp r3.z, r3.z, r3.w, -c3.w
					    mov_sat_pp r3.w, r3_abs.y
					    mul_pp r3.z, r3.z, r3.w
					    mul_pp r3.w, r3.z, r3.z
					    mad_pp r4.x, r3.w, c5.x, c5.y
					    mad_pp r4.x, r3.w, r4.x, c5.z
					    mad_pp r4.x, r3.w, r4.x, c5.w
					    mad_pp r3.w, r3.w, r4.x, c6.x
					    mul_pp r3.z, r3.w, r3.z
					    mad_pp r3.w, r3.z, c6.y, c6.z
					    add r4.x, -r3_abs.y, -c3.w
					    min_pp r4.y, r3.y, -c3.w
					    cmp_pp r3.y, r4.y, c3_abs.z, c3_abs.w
					    cmp_pp r4.x, r4.x, c3_abs.z, c3_abs.w
					    mad_pp r3.z, r3.w, r4.x, r3.z
					    add_pp r3.w, r3.z, r3.z
					    mad_pp r3.y, r3.y, -r3.w, r3.z
					    mad_pp r3.x, r3.x, r3.y, c3.w
					    mad_pp r0.xy, r2, r3.x, r0
					    mad_pp r2.xy, r0, -c6.y, -c6.w
					    dp2add_pp r3.x, r2, r2, c3.z
					    mul_pp r2.xy, r2, r3.x
					    mad_pp r2.xy, r2, -c0.w, r0
					    texld_pp r3, r0, s0
					    texld_pp r4, r2, s0
					    lrp_pp r5.xyz, c0, r4, r3
					    mov_pp r5.w, r3.w
					    mad_pp r1, r5, c4.z, r1
					    dp2add_pp r0.x, r2.zwzw, r2.zwzw, c3.z
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.y, r0.x
					    mul_pp r0.xy, r0, c2
					    add r2.x, r0_abs.y, c3.w
					    rcp_pp r2.y, r0_abs.y
					    cmp_pp r2.x, r2.x, r2.y, -c3.w
					    mov_sat_pp r2.y, r0_abs.y
					    mul_pp r2.x, r2.x, r2.y
					    mul_pp r2.y, r2.x, r2.x
					    mad_pp r3.x, r2.y, c5.x, c5.y
					    mad_pp r3.x, r2.y, r3.x, c5.z
					    mad_pp r3.x, r2.y, r3.x, c5.w
					    mad_pp r2.y, r2.y, r3.x, c6.x
					    mul_pp r2.x, r2.y, r2.x
					    mad_pp r2.y, r2.x, c6.y, c6.z
					    add r3.x, -r0_abs.y, -c3.w
					    min_pp r3.y, r0.y, -c3.w
					    cmp_pp r0.y, r3.y, c3_abs.z, c3_abs.w
					    cmp_pp r3.x, r3.x, c3_abs.z, c3_abs.w
					    mad_pp r2.x, r2.y, r3.x, r2.x
					    add_pp r2.y, r2.x, r2.x
					    mad_pp r0.y, r0.y, -r2.y, r2.x
					    mad_pp r0.x, r0.x, r0.y, c3.w
					    mad_pp r0.xy, r2.zwzw, r0.x, r0.zwzw
					    mad_pp r0.zw, r0.xyxy, -c6.y, -c6.w
					    dp2add_pp r2.x, r0.zwzw, r0.zwzw, c3.z
					    mul_pp r0.zw, r0, r2.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r2, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r3.xyz, c0, r0, r2
					    mov_pp r3.w, r2.w
					    mad_pp oC0, r3, c4.z, r1
					
					// approximately 194 instruction slots used (10 texture, 184 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "CHROMATIC_ABERRATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat8;
					bool u_xlatb8;
					bool u_xlatb9;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat11.x = max(abs(u_xlat6), 1.0);
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat16 = min(abs(u_xlat6), 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat16;
					    u_xlat16 = u_xlat11.x * u_xlat11.x;
					    u_xlat2.x = u_xlat16 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + -0.330299497;
					    u_xlat16 = u_xlat16 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb7 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat2.x = u_xlatb7 ? u_xlat2.x : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat16 + u_xlat2.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat11.x) : u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat1.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat0 = u_xlat0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4.x = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + 0.180141002;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4.x + 0.999866009;
					    u_xlat4.x = u_xlat18 * u_xlat13;
					    u_xlat4.x = u_xlat4.x * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4.x = u_xlatb9 ? u_xlat4.x : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4.x;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat0.xy = u_xlat2.xy * u_xlat3.xx + u_xlat0.xy;
					    u_xlat2.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat3 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat0.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat5 = u_xlat0.x * _DistAmount.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat5), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat5), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat5);
					    u_xlat5 = min(u_xlat5, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat5 = (u_xlatb5) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + -1.0;
					    u_xlat0.xy = u_xlat2.zw * u_xlat0.xx + u_xlat0.zw;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat2.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4.x = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + 0.180141002;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4.x + 0.999866009;
					    u_xlat4.x = u_xlat18 * u_xlat13;
					    u_xlat4.x = u_xlat4.x * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4.x = u_xlatb9 ? u_xlat4.x : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4.x;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat2.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat6), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat6), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat11.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat11.xy = u_xlat11.xy * u_xlat2.xx;
					    u_xlat11.xy = (-u_xlat11.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat11.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat2 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "CHROMATIC_ABERRATION" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat8;
					bool u_xlatb8;
					bool u_xlatb9;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat10.xy = u_xlat10.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat11.x = max(abs(u_xlat6), 1.0);
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat16 = min(abs(u_xlat6), 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat16;
					    u_xlat16 = u_xlat11.x * u_xlat11.x;
					    u_xlat2.x = u_xlat16 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat16 * u_xlat2.x + -0.330299497;
					    u_xlat16 = u_xlat16 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat16 * u_xlat11.x;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb7 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat2.x = u_xlatb7 ? u_xlat2.x : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat16 + u_xlat2.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat11.x) : u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat0.xy = u_xlat10.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat1.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat0 = u_xlat0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4.x = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + 0.180141002;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4.x + 0.999866009;
					    u_xlat4.x = u_xlat18 * u_xlat13;
					    u_xlat4.x = u_xlat4.x * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4.x = u_xlatb9 ? u_xlat4.x : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4.x;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat0.xy = u_xlat2.xy * u_xlat3.xx + u_xlat0.xy;
					    u_xlat2.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat3 = texture(_MainTex, u_xlat0.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3 = u_xlat3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat1 = u_xlat1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat3;
					    u_xlat0.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat5 = u_xlat0.x * _DistAmount.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat5), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat5), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat5);
					    u_xlat5 = min(u_xlat5, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat5 = (u_xlatb5) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat5 + -1.0;
					    u_xlat0.xy = u_xlat2.zw * u_xlat0.xx + u_xlat0.zw;
					    u_xlat10.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat10.xy = u_xlat10.xy * u_xlat2.xx;
					    u_xlat10.xy = (-u_xlat10.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat10.xy);
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat1 = u_xlat1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = u_xlat2 * _DistCenterScale.zwzw;
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat8 = u_xlat3.x * _DistAmount.y;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x * _DistAmount.x;
					    u_xlat13 = max(abs(u_xlat8), 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat18 = min(abs(u_xlat8), 1.0);
					    u_xlat13 = u_xlat13 * u_xlat18;
					    u_xlat18 = u_xlat13 * u_xlat13;
					    u_xlat4.x = u_xlat18 * 0.0208350997 + -0.0851330012;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + 0.180141002;
					    u_xlat4.x = u_xlat18 * u_xlat4.x + -0.330299497;
					    u_xlat18 = u_xlat18 * u_xlat4.x + 0.999866009;
					    u_xlat4.x = u_xlat18 * u_xlat13;
					    u_xlat4.x = u_xlat4.x * -2.0 + 1.57079637;
					    u_xlatb9 = 1.0<abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlatb8 = u_xlat8<(-u_xlat8);
					    u_xlat4.x = u_xlatb9 ? u_xlat4.x : float(0.0);
					    u_xlat13 = u_xlat13 * u_xlat18 + u_xlat4.x;
					    u_xlat8 = (u_xlatb8) ? (-u_xlat13) : u_xlat13;
					    u_xlat3.x = u_xlat3.x * u_xlat8 + -1.0;
					    u_xlat1.xy = u_xlat2.xy * u_xlat3.xx + u_xlat1.xy;
					    u_xlat2.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xy = (-u_xlat2.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat4.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat3.xyz = _ChromaticAberration.xyz * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    u_xlat1.x = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat6 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat2.x = max(abs(u_xlat6), 1.0);
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat7 = min(abs(u_xlat6), 1.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
					    u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
					    u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
					    u_xlat3.x = u_xlat7 * u_xlat2.x;
					    u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					    u_xlatb8 = 1.0<abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
					    u_xlat6 = (u_xlatb6) ? (-u_xlat2.x) : u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat6 + -1.0;
					    u_xlat1.xy = u_xlat2.zw * u_xlat1.xx + u_xlat1.zw;
					    u_xlat11.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.x = dot(u_xlat11.xy, u_xlat11.xy);
					    u_xlat11.xy = u_xlat11.xy * u_xlat2.xx;
					    u_xlat11.xy = (-u_xlat11.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat11.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat2.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0 = u_xlat2 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat0;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 91482
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c1, 2, -1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mad_pp r0.xy, v0, c1.x, c1.y
					    dp2add_pp r0.z, r0, r0, c1.z
					    mul_pp r0.xy, r0.z, r0
					    mad_pp r0.xy, r0, -c0.w, v0
					    texld_pp r0, r0, s0
					    texld_pp r1, v0, s0
					    add_pp r0.xyz, r0, -r1
					    mad_pp oC0.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 10 instruction slots used (2 texture, 8 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat4) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[5];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat4) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 184226
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _DistCenterScale c0       1
					//   _DistAmount      c1       1
					//   _MainTex         s0       1
					//
					
					    ps_3_0
					    def c2, -0.5, 0.5, 0, 0.159154937
					    def c3, 6.28318548, -3.14159274, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c2.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c2.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c2.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c1
					    mad_pp r1.x, r1.x, c2.w, c2.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c3.x, c3.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c3.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp oC0, r0, s0
					
					// approximately 27 instruction slots used (1 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2 = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2 = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _DistCenterScale c0       1
					//   _DistAmount      c1       1
					//   _MainTex         s0       1
					//
					
					    ps_3_0
					    def c2, -0.5, 0.5, 0, -1
					    def c3, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c4, 0.999866009, -2, 1.57079637, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c2.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c2.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c2.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c1
					    add r1.z, r1_abs.y, c2.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c2.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c3.x, c3.y
					    mad_pp r2.x, r1.w, r2.x, c3.z
					    mad_pp r2.x, r1.w, r2.x, c3.w
					    mad_pp r1.w, r1.w, r2.x, c4.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c4.y, c4.z
					    add r2.x, -r1_abs.y, -c2.w
					    min_pp r2.y, r1.y, -c2.w
					    cmp_pp r1.y, r2.y, c2_abs.z, c2_abs.w
					    cmp_pp r2.x, r2.x, c2_abs.z, c2_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c2.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp oC0, r0, s0
					
					// approximately 32 instruction slots used (1 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1 = sqrt(u_xlat1);
					    u_xlat4 = u_xlat1 * _DistAmount.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat1 = u_xlat1 * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1 = u_xlat1 * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * vec2(u_xlat1) + u_xlat0.xy;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_3[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1 = sqrt(u_xlat1);
					    u_xlat4 = u_xlat1 * _DistAmount.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat1 = u_xlat1 * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1 = u_xlat1 * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * vec2(u_xlat1) + u_xlat0.xy;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 209219
Program "vp" {
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _VignetteColor    c0       1
					//   _VignetteSettings c1       1
					//   _VignetteCenter   c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c2, v0
					    mul_pp r0.xy, r0, c1.x
					    dp2add_pp r0.x, r0, -r0, c3.x
					    max_pp r1.x, r0.x, c3.y
					    pow_pp r0.x, r1.x, c1.y
					    mov r1.x, c3.x
					    lrp_pp r2.xyz, r0.x, r1.x, c0
					    texld_pp r0, v0, s0
					    mul_pp oC0.xyz, r2, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _VignetteColor.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _VignetteColor.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _VignetteColor            c1       1
					//   _VignetteSettings         c2       1
					//   _VignetteCenter           c3       1
					//   _VignetteDesat            c4       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.xyz, c4.x, r0, r1.x
					    add_pp r1.xy, -c3, v0
					    mul_pp r1.xy, r1, c2.x
					    dp2add_pp r1.x, r1, -r1, c5.x
					    max_pp r2.w, r1.x, c5.y
					    pow_pp r1.x, r2.w, c2.y
					    lrp_pp r3.xyz, r1.x, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.x, c5.x
					    lrp_pp r2.xyz, r1.x, r0.x, c1
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 23 instruction slots used (1 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat2.xyz = (-u_xlat3.xxx) + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat2.xyz + u_xlat3.xxx;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat2.xyz = (-u_xlat3.xxx) + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat2.xyz + u_xlat3.xxx;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _VignetteColor    c0       1
					//   _VignetteSettings c1       1
					//   _VignetteCenter   c2       1
					//   _VignetteBlur     c3       1
					//   _MainTex          s0       1
					//   _BlurTex          s1       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 2, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c2, v0
					    mul_pp r0.xy, r0, c1.x
					    dp2add_pp r0.x, r0, -r0, c4.x
					    max_pp r1.x, r0.x, c4.y
					    pow_pp r0.x, r1.x, c1.y
					    mov r1.x, c4.x
					    lrp_pp r2.xyz, r0.x, r1.x, c0
					    mad_pp r0.xy, v0, c4.z, c4.w
					    dp2add_pp r0.x, r0, r0, c4.y
					    mul_sat_pp r0.x, r0.x, c3.x
					    texld_pp r1, v0, s1
					    texld_pp r3, v0, s0
					    lrp_pp r4.xyz, r0.x, r1, r3
					    mov_pp oC0.w, r3.w
					    mul_pp oC0.xyz, r2, r4
					
					// approximately 19 instruction slots used (2 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _VignetteColor            c1       1
					//   _VignetteSettings         c2       1
					//   _VignetteCenter           c3       1
					//   _VignetteBlur             c4       1
					//   _VignetteDesat            c5       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0, 2, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad_pp r0.xy, v0, c6.z, c6.w
					    dp2add_pp r0.x, r0, r0, c6.y
					    mul_sat_pp r0.x, r0.x, c4.x
					    texld_pp r1, v0, s1
					    texld_pp r2, v0, s0
					    lrp_pp r3.xyz, r0.x, r1, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c5.x, r3, r0.x
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0, c2.x
					    dp2add_pp r0.x, r0, -r0, c6.x
					    max_pp r1.w, r0.x, c6.y
					    pow_pp r0.x, r1.w, c2.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r1.x, c6.x
					    lrp_pp r3.xyz, r0.x, r1.x, c1
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 29 instruction slots used (2 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * _VignetteBlur;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * _VignetteBlur;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _VignetteColor    c0       1
					//   _VignetteSettings c1       1
					//   _VignetteCenter   c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c2, v0
					    mul_pp r0.xy, r0_abs, c1.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c1.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c3.x
					    max_pp r1.x, r0.x, c3.y
					    pow_pp r0.x, r1.x, c1.y
					    mov r1.x, c3.x
					    lrp_pp r2.xyz, r0.x, r1.x, c0
					    texld_pp r0, v0, s0
					    mul_pp oC0.xyz, r2, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 18 instruction slots used (1 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _VignetteColor.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _VignetteColor.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _VignetteColor            c1       1
					//   _VignetteSettings         c2       1
					//   _VignetteCenter           c3       1
					//   _VignetteDesat            c4       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0_abs, c2.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c2.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c5.x
					    max_pp r1.x, r0.x, c5.y
					    pow_pp r0.x, r1.x, c2.y
					    texld_pp r1, v0, s0
					    mul_pp r0.yzw, r1.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    mad_pp r0.y, r1.z, c0.z, r0.y
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    lrp_pp r2.xyz, c4.x, r1, r0.y
					    lrp_pp r3.xyz, r0.x, r1, r2
					    mov_pp oC0.w, r1.w
					    mov r1.x, c5.x
					    lrp_pp r2.xyz, r0.x, r1.x, c1
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 28 instruction slots used (1 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat2.xyz = (-u_xlat3.xxx) + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat2.xyz + u_xlat3.xxx;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat3.xz = u_xlat3.yz + u_xlat3.xx;
					    u_xlat6 = u_xlat3.z * u_xlat3.y;
					    u_xlat3.x = u_xlat1.z * unity_ColorSpaceLuminance.z + u_xlat3.x;
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat6));
					    u_xlat3.x = u_xlat6 + u_xlat3.x;
					    u_xlat2.xyz = (-u_xlat3.xxx) + u_xlat1.xyz;
					    u_xlat3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat2.xyz + u_xlat3.xxx;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _VignetteColor    c0       1
					//   _VignetteSettings c1       1
					//   _VignetteCenter   c2       1
					//   _VignetteBlur     c3       1
					//   _MainTex          s0       1
					//   _BlurTex          s1       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 2, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c2, v0
					    mul_pp r0.xy, r0_abs, c1.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c1.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c4.x
					    max_pp r1.x, r0.x, c4.y
					    pow_pp r0.x, r1.x, c1.y
					    mov r1.x, c4.x
					    lrp_pp r2.xyz, r0.x, r1.x, c0
					    mad_pp r0.xy, v0, c4.z, c4.w
					    dp2add_pp r0.x, r0, r0, c4.y
					    mul_sat_pp r0.x, r0.x, c3.x
					    texld_pp r1, v0, s1
					    texld_pp r3, v0, s0
					    lrp_pp r4.xyz, r0.x, r1, r3
					    mov_pp oC0.w, r3.w
					    mul_pp oC0.xyz, r2, r4
					
					// approximately 24 instruction slots used (2 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _VignetteColor            c1       1
					//   _VignetteSettings         c2       1
					//   _VignetteCenter           c3       1
					//   _VignetteBlur             c4       1
					//   _VignetteDesat            c5       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0, 2, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0_abs, c2.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c2.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c6.x
					    max_pp r1.x, r0.x, c6.y
					    pow_pp r0.x, r1.x, c2.y
					    mad_pp r0.yz, v0.xxyw, c6.z, c6.w
					    dp2add_pp r0.y, r0.yzzw, r0.yzzw, c6.y
					    mul_sat_pp r0.y, r0.y, c4.x
					    texld_pp r1, v0, s1
					    texld_pp r2, v0, s0
					    lrp_pp r3.xyz, r0.y, r1, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.yzw, r3.xxyz, c0.xxyz
					    add_pp r0.yw, r0.xzzw, r0.y
					    mul_pp r0.z, r0.w, r0.z
					    mad_pp r0.y, r3.z, c0.z, r0.y
					    rsq_pp r0.z, r0.z
					    rcp_pp r0.z, r0.z
					    dp2add_pp r0.y, c0.w, r0.z, r0.y
					    lrp_pp r1.xyz, c5.x, r3, r0.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r1.x, c6.x
					    lrp_pp r3.xyz, r0.x, r1.x, c1
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 34 instruction slots used (2 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.x * _VignetteBlur;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1.xyz = u_xlat3.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat3.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat3.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat3.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.x = u_xlat3.x * _VignetteBlur;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat3.xyz = u_xlat3.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1.xyz = u_xlat3.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat3.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat3.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 309060
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c3, -0.5, 0.5, 0, 0.159154937
					    def c4, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c3.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c3.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c3.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c3.w, c3.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c4.x, c4.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c4.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c4.w, c4.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c3.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    add_pp r0.xyz, -r1, r0
					    mad_pp oC0.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 36 instruction slots used (2 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2 = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2 = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c3, -0.5, 0.5, 0, -1
					    def c4, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c5, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c3.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c3.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c3.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c3.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c3.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c4.x, c4.y
					    mad_pp r2.x, r1.w, r2.x, c4.z
					    mad_pp r2.x, r1.w, r2.x, c4.w
					    mad_pp r1.w, r1.w, r2.x, c5.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c5.y, c5.z
					    add r2.x, -r1_abs.y, -c3.w
					    min_pp r2.y, r1.y, -c3.w
					    cmp_pp r1.y, r2.y, c3_abs.z, c3_abs.w
					    cmp_pp r2.x, r2.x, c3_abs.z, c3_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c3.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c5.y, -c5.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c3.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    add_pp r0.xyz, -r1, r0
					    mad_pp oC0.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 41 instruction slots used (2 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 359113
Program "vp" {
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _VignetteColor       c1       1
					//   _VignetteSettings    c2       1
					//   _VignetteCenter      c3       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c4, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0, c2.x
					    dp2add_pp r0.x, r0, -r0, c4.w
					    max_pp r1.x, r0.x, c4.z
					    pow_pp r0.x, r1.x, c2.y
					    mov r0.w, c4.w
					    lrp_pp r1.xyz, r0.x, r0.w, c1
					    mad_pp r0.xy, v0, c4.x, c4.y
					    dp2add_pp r0.z, r0, r0, c4.z
					    mul_pp r0.xy, r0.z, r0
					    mad_pp r0.xy, r0, -c0.w, v0
					    texld_pp r0, r0, s0
					    texld_pp r2, v0, s0
					    lrp_pp r3.xyz, c0, r0, r2
					    mov_pp oC0.w, r2.w
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 20 instruction slots used (2 texture, 18 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _VignetteColor            c2       1
					//   _VignetteSettings         c3       1
					//   _VignetteCenter           c4       1
					//   _VignetteDesat            c5       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c6, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mad_pp r0.xy, v0, c6.x, c6.y
					    dp2add_pp r0.z, r0, r0, c6.z
					    mul_pp r0.xy, r0.z, r0
					    mad_pp r0.xy, r0, -c1.w, v0
					    texld_pp r0, r0, s0
					    texld_pp r1, v0, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c5.x, r2, r0.x
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0, c3.x
					    dp2add_pp r0.x, r0, -r0, c6.w
					    max_pp r1.w, r0.x, c6.z
					    pow_pp r0.x, r1.w, c3.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.w, c6.w
					    lrp_pp r1.xyz, r0.x, r0.w, c2
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 30 instruction slots used (2 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _VignetteColor       c1       1
					//   _VignetteSettings    c2       1
					//   _VignetteCenter      c3       1
					//   _VignetteBlur        c4       1
					//   _MainTex             s0       1
					//   _BlurTex             s1       1
					//
					
					    ps_3_0
					    def c5, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0, c2.x
					    dp2add_pp r0.x, r0, -r0, c5.w
					    max_pp r1.x, r0.x, c5.z
					    pow_pp r0.x, r1.x, c2.y
					    mov r0.w, c5.w
					    lrp_pp r1.xyz, r0.x, r0.w, c1
					    mad_pp r0.xy, v0, c5.x, c5.y
					    dp2add_pp r0.z, r0, r0, c5.z
					    mul_pp r0.xy, r0.z, r0
					    mul_sat_pp r0.z, r0.z, c4.x
					    mad_pp r0.xy, r0, -c0.w, v0
					    texld_pp r2, r0, s0
					    texld_pp r3, v0, s0
					    lrp_pp r0.xyw, c0.xyzz, r2.xyzz, r3.xyzz
					    mov_pp oC0.w, r3.w
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r0.z, r2, r0.xyww
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 23 instruction slots used (3 texture, 20 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _VignetteColor            c2       1
					//   _VignetteSettings         c3       1
					//   _VignetteCenter           c4       1
					//   _VignetteBlur             c5       1
					//   _VignetteDesat            c6       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c7, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad_pp r0.xy, v0, c7.x, c7.y
					    dp2add_pp r0.z, r0, r0, c7.z
					    mul_pp r0.xy, r0.z, r0
					    mul_sat_pp r0.z, r0.z, c5.x
					    mad_pp r0.xy, r0, -c1.w, v0
					    texld_pp r1, r0, s0
					    texld_pp r2, v0, s0
					    lrp_pp r0.xyw, c1.xyzz, r1.xyzz, r2.xyzz
					    mov_pp oC0.w, r2.w
					    texld_pp r1, v0, s1
					    lrp_pp r2.xyz, r0.z, r1, r0.xyww
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c6.x, r2, r0.x
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0, c3.x
					    dp2add_pp r0.x, r0, -r0, c7.w
					    max_pp r1.w, r0.x, c7.z
					    pow_pp r0.x, r1.w, c3.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.w, c7.w
					    lrp_pp r1.xyz, r0.x, r0.w, c2
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 33 instruction slots used (3 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat6 = u_xlat6 * _VignetteBlur;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyw = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyw = _ChromaticAberration.xyz * u_xlat0.xyw + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyw) + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat6 = u_xlat6 * _VignetteBlur;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyw = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyw = _ChromaticAberration.xyz * u_xlat0.xyw + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyw) + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _VignetteColor       c1       1
					//   _VignetteSettings    c2       1
					//   _VignetteCenter      c3       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c4, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0_abs, c2.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c2.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c4.w
					    max_pp r1.x, r0.x, c4.z
					    pow_pp r0.x, r1.x, c2.y
					    mov r0.w, c4.w
					    lrp_pp r1.xyz, r0.x, r0.w, c1
					    mad_pp r0.xy, v0, c4.x, c4.y
					    dp2add_pp r0.z, r0, r0, c4.z
					    mul_pp r0.xy, r0.z, r0
					    mad_pp r0.xy, r0, -c0.w, v0
					    texld_pp r0, r0, s0
					    texld_pp r2, v0, s0
					    lrp_pp r3.xyz, c0, r0, r2
					    mov_pp oC0.w, r2.w
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 25 instruction slots used (2 texture, 23 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _VignetteColor            c2       1
					//   _VignetteSettings         c3       1
					//   _VignetteCenter           c4       1
					//   _VignetteDesat            c5       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c6, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0_abs, c3.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c3.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c6.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c3.y
					    mad_pp r0.yz, v0.xxyw, c6.x, c6.y
					    dp2add_pp r0.w, r0.yzzw, r0.yzzw, c6.z
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r0.yz, r0, -c1.w, v0.xxyw
					    texld_pp r1, r0.yzzw, s0
					    texld_pp r2, v0, s0
					    lrp_pp r0.yzw, c1.xxyz, r1.xxyz, r2.xxyz
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xyz, r0.yzww, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.w, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.xyz, c5.x, r0.yzww, r1.x
					    lrp_pp r1.xyz, r0.x, r0.yzww, r2
					    mov r0.w, c6.w
					    lrp_pp r2.xyz, r0.x, r0.w, c2
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 35 instruction slots used (2 texture, 33 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _VignetteColor       c1       1
					//   _VignetteSettings    c2       1
					//   _VignetteCenter      c3       1
					//   _VignetteBlur        c4       1
					//   _MainTex             s0       1
					//   _BlurTex             s1       1
					//
					
					    ps_3_0
					    def c5, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c3, v0
					    mul_pp r0.xy, r0_abs, c2.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c2.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c5.w
					    max_pp r1.x, r0.x, c5.z
					    pow_pp r0.x, r1.x, c2.y
					    mov r0.w, c5.w
					    lrp_pp r1.xyz, r0.x, r0.w, c1
					    mad_pp r0.xy, v0, c5.x, c5.y
					    dp2add_pp r0.z, r0, r0, c5.z
					    mul_pp r0.xy, r0.z, r0
					    mul_sat_pp r0.z, r0.z, c4.x
					    mad_pp r0.xy, r0, -c0.w, v0
					    texld_pp r2, r0, s0
					    texld_pp r3, v0, s0
					    lrp_pp r0.xyw, c0.xyzz, r2.xyzz, r3.xyzz
					    mov_pp oC0.w, r3.w
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r0.z, r2, r0.xyww
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 28 instruction slots used (3 texture, 25 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 unused_0_2[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(u_xlat9) * u_xlat1.xy;
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat1.xy = (-u_xlat1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _VignetteColor            c2       1
					//   _VignetteSettings         c3       1
					//   _VignetteCenter           c4       1
					//   _VignetteBlur             c5       1
					//   _VignetteDesat            c6       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c7, 2, -1, 0, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad_pp r0.xy, v0, c7.x, c7.y
					    dp2add_pp r0.z, r0, r0, c7.z
					    mul_pp r0.xy, r0.z, r0
					    mul_sat_pp r0.z, r0.z, c5.x
					    mad_pp r0.xy, r0, -c1.w, v0
					    texld_pp r1, r0, s0
					    texld_pp r2, v0, s0
					    lrp_pp r0.xyw, c1.xyzz, r1.xyzz, r2.xyzz
					    mov_pp oC0.w, r2.w
					    texld_pp r1, v0, s1
					    lrp_pp r2.xyz, r0.z, r1, r0.xyww
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c6.x, r2, r0.x
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0_abs, c3.x
					    log_pp r3.x, r0.x
					    log_pp r3.y, r0.y
					    mul_pp r0.xy, r3, c3.z
					    exp_pp r3.x, r0.x
					    exp_pp r3.y, r0.y
					    dp2add_pp r0.x, r3, -r3, c7.w
					    max_pp r1.w, r0.x, c7.z
					    pow_pp r0.x, r1.w, c3.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.w, c7.w
					    lrp_pp r1.xyz, r0.x, r0.w, c2
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat6 = u_xlat6 * _VignetteBlur;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyw = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyw = _ChromaticAberration.xyz * u_xlat0.xyw + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyw) + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 unused_0_4[2];
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat6 = u_xlat6 * _VignetteBlur;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xy = (-u_xlat0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyw = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyw = _ChromaticAberration.xyz * u_xlat0.xyw + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyw) + u_xlat1.xyz;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyw;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 400808
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 0, 0.159154937
					    def c6, 6.28318548, -3.14159274, -1, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c5.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c5.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c5.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c1
					    mad_pp r1.x, r1.x, c5.w, c5.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c6.x, c6.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c6.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, -c4, v0
					    mul_pp r1.xy, r1, c3.x
					    dp2add_pp r1.x, r1, -r1, c6.w
					    max_pp r2.x, r1.x, c5.z
					    pow_pp r1.x, r2.x, c3.y
					    mov r1.w, c6.w
					    lrp_pp r2.xyz, r1.x, r1.w, c2
					    mul_pp oC0.xyz, r0, r2
					    mov_pp oC0.w, r0.w
					
					// approximately 39 instruction slots used (1 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteDesat            c6       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, 0.159154937
					    def c8, 6.28318548, -3.14159274, -1, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c7.w, c7.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c8.x, c8.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c8.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.xyz, c6.x, r0, r1.x
					    add_pp r1.xy, -c5, v0
					    mul_pp r1.xy, r1, c4.x
					    dp2add_pp r1.x, r1, -r1, c8.w
					    max_pp r2.w, r1.x, c7.z
					    pow_pp r1.x, r2.w, c4.y
					    lrp_pp r3.xyz, r1.x, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.w, c8.w
					    lrp_pp r2.xyz, r1.x, r0.w, c3
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 49 instruction slots used (1 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4.x = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4.x = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _VignetteBlur     c5       1
					//   _MainTex          s0       1
					//   _BlurTex          s1       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, 0.159154937
					    def c7, 6.28318548, -3.14159274, -1, 1
					    def c8, 2, -1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c1
					    mad_pp r1.x, r1.x, c6.w, c6.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c7.x, c7.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c7.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, c8.x, c8.y
					    dp2add_pp r1.x, r1, r1, c6.z
					    mul_sat_pp r1.x, r1.x, c5.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0, c3.x
					    dp2add_pp r0.x, r0, -r0, c7.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c3.y
					    mov r0.w, c7.w
					    lrp_pp r1.xyz, r0.x, r0.w, c2
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 45 instruction slots used (2 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3.x = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3.x;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat12 = u_xlat12 * _VignetteBlur;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3.x = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3.x;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat12 = u_xlat12 * _VignetteBlur;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteBlur             c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, 0.159154937
					    def c9, 6.28318548, -3.14159274, -1, 1
					    def c10, 2, -1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c8.w, c8.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c9.x, c9.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c9.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, c10.x, c10.y
					    dp2add_pp r1.x, r1, r1, c8.z
					    mul_sat_pp r1.x, r1.x, c6.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r3, r0.x
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0, c4.x
					    dp2add_pp r0.x, r0, -r0, c9.w
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c4.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.w, c9.w
					    lrp_pp r1.xyz, r0.x, r0.w, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 55 instruction slots used (2 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 0, 0.159154937
					    def c6, 6.28318548, -3.14159274, -1, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0_abs, c3.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c3.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c6.w
					    max_pp r1.x, r0.x, c5.z
					    pow_pp r0.x, r1.x, c3.y
					    mov r0.w, c6.w
					    lrp_pp r1.xyz, r0.x, r0.w, c2
					    add_pp r0.xy, c5.x, v0
					    mov r0.z, c1.z
					    mad_pp r2.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c5.y
					    mul_pp r0.zw, r2.xyxy, c0
					    dp2add_pp r1.w, r0.zwzw, r0.zwzw, c5.z
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    mul_pp r2.xy, r1.w, c1
					    mad_pp r1.w, r2.x, c5.w, c5.y
					    rcp_pp r2.x, r2.y
					    frc_pp r1.w, r1.w
					    mad_pp r1.w, r1.w, c6.x, c6.y
					    sincos_pp r3.xy, r1.w
					    rcp_pp r1.w, r3.x
					    mul_pp r1.w, r1.w, r3.y
					    mad_pp r1.w, r1.w, r2.x, c6.z
					    mad_pp r0.xy, r0.zwzw, r1.w, r0
					    texld_pp r0, r0, s0
					    mul_pp oC0.xyz, r1, r0
					    mov_pp oC0.w, r0.w
					
					// approximately 44 instruction slots used (1 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteDesat            c6       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, 0.159154937
					    def c8, 6.28318548, -3.14159274, -1, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c7.w, c7.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c8.x, c8.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c8.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.xyz, c6.x, r0, r1.x
					    add_pp r1.xy, -c5, v0
					    mul_pp r1.xy, r1_abs, c4.x
					    log_pp r3.x, r1.x
					    log_pp r3.y, r1.y
					    mul_pp r1.xy, r3, c4.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    dp2add_pp r1.x, r3, -r3, c8.w
					    max_pp r2.w, r1.x, c7.z
					    pow_pp r1.x, r2.w, c4.y
					    lrp_pp r3.xyz, r1.x, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.w, c8.w
					    lrp_pp r2.xyz, r1.x, r0.w, c3
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 54 instruction slots used (1 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4.x = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4.x = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _VignetteBlur     c5       1
					//   _MainTex          s0       1
					//   _BlurTex          s1       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, 0.159154937
					    def c7, 6.28318548, -3.14159274, -1, 1
					    def c8, 2, -1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0_abs, c3.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c3.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, c7.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c3.y
					    mov r0.w, c7.w
					    lrp_pp r1.xyz, r0.x, r0.w, c2
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c1.z
					    mad_pp r2.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r2.xyxy, c0
					    dp2add_pp r1.w, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    mul_pp r2.xy, r1.w, c1
					    mad_pp r1.w, r2.x, c6.w, c6.y
					    rcp_pp r2.x, r2.y
					    frc_pp r1.w, r1.w
					    mad_pp r1.w, r1.w, c7.x, c7.y
					    sincos_pp r3.xy, r1.w
					    rcp_pp r1.w, r3.x
					    mul_pp r1.w, r1.w, r3.y
					    mad_pp r1.w, r1.w, r2.x, c7.z
					    mad_pp r0.xy, r0.zwzw, r1.w, r0
					    texld_pp r0, r0, s0
					    mad_pp r2.xy, v0, c8.x, c8.y
					    dp2add_pp r1.w, r2, r2, c6.z
					    mul_sat_pp r1.w, r1.w, c5.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.w, r2, r0
					    mov_pp oC0.w, r0.w
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 50 instruction slots used (2 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3.x = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3.x;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat12 = u_xlat12 * _VignetteBlur;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3.x = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3.x;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat12 = u_xlat12 * _VignetteBlur;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteBlur             c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, 0.159154937
					    def c9, 6.28318548, -3.14159274, -1, 1
					    def c10, 2, -1, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c8.w, c8.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c9.x, c9.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c9.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, c10.x, c10.y
					    dp2add_pp r1.x, r1, r1, c8.z
					    mul_sat_pp r1.x, r1.x, c6.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r3, r0.x
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0_abs, c4.x
					    log_pp r2.x, r0.x
					    log_pp r2.y, r0.y
					    mul_pp r0.xy, r2, c4.z
					    exp_pp r2.x, r0.x
					    exp_pp r2.y, r0.y
					    dp2add_pp r0.x, r2, -r2, c9.w
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c4.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.w, c9.w
					    lrp_pp r1.xyz, r0.x, r0.w, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 60 instruction slots used (2 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 0, -1
					    def c6, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c7, 0.999866009, -2, 1.57079637, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c5.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c5.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c5.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c1
					    add r1.z, r1_abs.y, c5.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c5.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c6.x, c6.y
					    mad_pp r2.x, r1.w, r2.x, c6.z
					    mad_pp r2.x, r1.w, r2.x, c6.w
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c7.y, c7.z
					    add r2.x, -r1_abs.y, -c5.w
					    min_pp r2.y, r1.y, -c5.w
					    cmp_pp r1.y, r2.y, c5_abs.z, c5_abs.w
					    cmp_pp r2.x, r2.x, c5_abs.z, c5_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c5.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, -c4, v0
					    mul_pp r1.xy, r1, c3.x
					    dp2add_pp r1.x, r1, -r1, -c5.w
					    max_pp r2.x, r1.x, c5.z
					    pow_pp r1.x, r2.x, c3.y
					    mov r1.w, c5.w
					    lrp_pp r2.xyz, r1.x, -r1.w, c2
					    mul_pp oC0.xyz, r0, r2
					    mov_pp oC0.w, r0.w
					
					// approximately 44 instruction slots used (1 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _VignetteSettings.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _VignetteSettings.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteDesat            c6       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, -1
					    def c8, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c9, 0.999866009, -2, 1.57079637, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c7.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c7.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c8.x, c8.y
					    mad_pp r2.x, r1.w, r2.x, c8.z
					    mad_pp r2.x, r1.w, r2.x, c8.w
					    mad_pp r1.w, r1.w, r2.x, c9.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c9.y, c9.z
					    add r2.x, -r1_abs.y, -c7.w
					    min_pp r2.y, r1.y, -c7.w
					    cmp_pp r1.y, r2.y, c7_abs.z, c7_abs.w
					    cmp_pp r2.x, r2.x, c7_abs.z, c7_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c7.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.xyz, c6.x, r0, r1.x
					    add_pp r1.xy, -c5, v0
					    mul_pp r1.xy, r1, c4.x
					    dp2add_pp r1.x, r1, -r1, -c7.w
					    max_pp r2.w, r1.x, c7.z
					    pow_pp r1.x, r2.w, c4.y
					    lrp_pp r3.xyz, r1.x, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.w, c7.w
					    lrp_pp r2.xyz, r1.x, -r0.w, c3
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 54 instruction slots used (1 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _VignetteBlur     c5       1
					//   _MainTex          s0       1
					//   _BlurTex          s1       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, -1
					    def c7, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c8, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c1
					    add r1.z, r1_abs.y, c6.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c6.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c7.x, c7.y
					    mad_pp r2.x, r1.w, r2.x, c7.z
					    mad_pp r2.x, r1.w, r2.x, c7.w
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c8.y, c8.z
					    add r2.x, -r1_abs.y, -c6.w
					    min_pp r2.y, r1.y, -c6.w
					    cmp_pp r1.y, r2.y, c6_abs.z, c6_abs.w
					    cmp_pp r2.x, r2.x, c6_abs.z, c6_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c6.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, -c8.y, -c8.w
					    dp2add_pp r1.x, r1, r1, c6.z
					    mul_sat_pp r1.x, r1.x, c5.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0, c3.x
					    dp2add_pp r0.x, r0, -r0, -c6.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c3.y
					    mov r0.w, c6.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c2
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 50 instruction slots used (2 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteBlur             c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, -1
					    def c9, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c10, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c8.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c8.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c9.x, c9.y
					    mad_pp r2.x, r1.w, r2.x, c9.z
					    mad_pp r2.x, r1.w, r2.x, c9.w
					    mad_pp r1.w, r1.w, r2.x, c10.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c10.y, c10.z
					    add r2.x, -r1_abs.y, -c8.w
					    min_pp r2.y, r1.y, -c8.w
					    cmp_pp r1.y, r2.y, c8_abs.z, c8_abs.w
					    cmp_pp r2.x, r2.x, c8_abs.z, c8_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c8.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, -c10.y, -c10.w
					    dp2add_pp r1.x, r1, r1, c8.z
					    mul_sat_pp r1.x, r1.x, c6.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r3, r0.x
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0, c4.x
					    dp2add_pp r0.x, r0, -r0, -c8.w
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c4.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.w, c8.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 60 instruction slots used (2 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 0, -1
					    def c6, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c7, 0.999866009, -2, 1.57079637, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c5.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c5.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c5.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c1
					    add r1.z, r1_abs.y, c5.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c5.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c6.x, c6.y
					    mad_pp r2.x, r1.w, r2.x, c6.z
					    mad_pp r2.x, r1.w, r2.x, c6.w
					    mad_pp r1.w, r1.w, r2.x, c7.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c7.y, c7.z
					    add r2.x, -r1_abs.y, -c5.w
					    min_pp r2.y, r1.y, -c5.w
					    cmp_pp r1.y, r2.y, c5_abs.z, c5_abs.w
					    cmp_pp r2.x, r2.x, c5_abs.z, c5_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c5.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    add_pp r1.xy, -c4, v0
					    mul_pp r1.xy, r1_abs, c3.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    mul_pp r1.xy, r2, c3.z
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    dp2add_pp r1.x, r2, -r2, -c5.w
					    max_pp r2.x, r1.x, c5.z
					    pow_pp r1.x, r2.x, c3.y
					    mov r1.w, c5.w
					    lrp_pp r2.xyz, r1.x, -r1.w, c2
					    mul_pp oC0.xyz, r0, r2
					    mov_pp oC0.w, r0.w
					
					// approximately 49 instruction slots used (1 texture, 48 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _VignetteSettings.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _VignetteSettings.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteDesat            c6       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, -1
					    def c8, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c9, 0.999866009, -2, 1.57079637, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c7.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c7.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c8.x, c8.y
					    mad_pp r2.x, r1.w, r2.x, c8.z
					    mad_pp r2.x, r1.w, r2.x, c8.w
					    mad_pp r1.w, r1.w, r2.x, c9.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c9.y, c9.z
					    add r2.x, -r1_abs.y, -c7.w
					    min_pp r2.y, r1.y, -c7.w
					    cmp_pp r1.y, r2.y, c7_abs.z, c7_abs.w
					    cmp_pp r2.x, r2.x, c7_abs.z, c7_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c7.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mul_pp r1.xyz, r0, c0
					    add_pp r1.xz, r1.yyzw, r1.x
					    mul_pp r1.y, r1.z, r1.y
					    mad_pp r1.x, r0.z, c0.z, r1.x
					    rsq_pp r1.y, r1.y
					    rcp_pp r1.y, r1.y
					    dp2add_pp r1.x, c0.w, r1.y, r1.x
					    lrp_pp r2.xyz, c6.x, r0, r1.x
					    add_pp r1.xy, -c5, v0
					    mul_pp r1.xy, r1_abs, c4.x
					    log_pp r3.x, r1.x
					    log_pp r3.y, r1.y
					    mul_pp r1.xy, r3, c4.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    dp2add_pp r1.x, r3, -r3, -c7.w
					    max_pp r2.w, r1.x, c7.z
					    pow_pp r1.x, r2.w, c4.y
					    lrp_pp r3.xyz, r1.x, r0, r2
					    mov_pp oC0.w, r0.w
					    mov r0.w, c7.w
					    lrp_pp r2.xyz, r1.x, -r0.w, c3
					    mul_pp oC0.xyz, r2, r3
					
					// approximately 59 instruction slots used (1 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4.x = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4.x), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4.x), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4.x);
					    u_xlat4.x = min(u_xlat4.x, 1.0);
					    u_xlatb4 = u_xlat4.x<(-u_xlat4.x);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4.x = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat4.x = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = dot(unity_ColorSpaceLuminance.ww, u_xlat4.xx);
					    u_xlat1.x = u_xlat4.x + u_xlat1.x;
					    u_xlat4.xyz = u_xlat0.xyz + (-u_xlat1.xxx);
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat4.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _DistCenterScale  c0       1
					//   _DistAmount       c1       1
					//   _VignetteColor    c2       1
					//   _VignetteSettings c3       1
					//   _VignetteCenter   c4       1
					//   _VignetteBlur     c5       1
					//   _MainTex          s0       1
					//   _BlurTex          s1       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, -1
					    def c7, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c8, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c1.z
					    mad_pp r1.xy, r0, r0.z, -c0
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r1.xyxy, c0
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c1
					    add r1.z, r1_abs.y, c6.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c6.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c7.x, c7.y
					    mad_pp r2.x, r1.w, r2.x, c7.z
					    mad_pp r2.x, r1.w, r2.x, c7.w
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c8.y, c8.z
					    add r2.x, -r1_abs.y, -c6.w
					    min_pp r2.y, r1.y, -c6.w
					    cmp_pp r1.y, r2.y, c6_abs.z, c6_abs.w
					    cmp_pp r2.x, r2.x, c6_abs.z, c6_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c6.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, -c8.y, -c8.w
					    dp2add_pp r1.x, r1, r1, c6.z
					    mul_sat_pp r1.x, r1.x, c5.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    add_pp r0.xy, -c4, v0
					    mul_pp r0.xy, r0_abs, c3.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c3.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, -c6.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c3.y
					    mov r0.w, c6.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c2
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 55 instruction slots used (2 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _DistCenterScale          c1       1
					//   _DistAmount               c2       1
					//   _VignetteColor            c3       1
					//   _VignetteSettings         c4       1
					//   _VignetteCenter           c5       1
					//   _VignetteBlur             c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, -1
					    def c9, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c10, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c8.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c8.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c9.x, c9.y
					    mad_pp r2.x, r1.w, r2.x, c9.z
					    mad_pp r2.x, r1.w, r2.x, c9.w
					    mad_pp r1.w, r1.w, r2.x, c10.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c10.y, c10.z
					    add r2.x, -r1_abs.y, -c8.w
					    min_pp r2.y, r1.y, -c8.w
					    cmp_pp r1.y, r2.y, c8_abs.z, c8_abs.w
					    cmp_pp r2.x, r2.x, c8_abs.z, c8_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c8.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    texld_pp r0, r0, s0
					    mad_pp r1.xy, v0, -c10.y, -c10.w
					    dp2add_pp r1.x, r1, r1, c8.z
					    mul_sat_pp r1.x, r1.x, c6.x
					    texld_pp r2, v0, s1
					    lrp_pp r3.xyz, r1.x, r2, r0
					    mov_pp oC0.w, r0.w
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r3, r0.x
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0_abs, c4.x
					    log_pp r2.x, r0.x
					    log_pp r2.y, r0.y
					    mul_pp r0.xy, r2, c4.z
					    exp_pp r2.x, r0.x
					    exp_pp r2.y, r0.y
					    dp2add_pp r0.x, r2, -r2, -c8.w
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c4.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.w, c8.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 65 instruction slots used (2 texture, 63 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat10 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat10 = u_xlat10 * _VignetteBlur;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat10) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 521803
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    def c4, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c4.xxxy, c4.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mov o1.xy, v1
					
					// approximately 6 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, 0.159154937
					    def c7, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c6.w, c6.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c7.x, c7.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c7.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c7.w, c7.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0, c4.x
					    dp2add_pp r0.x, r0, -r0, -c7.z
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.z, c7.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 46 instruction slots used (2 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat9.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat12) * u_xlat9.xy;
					    u_xlat9.xy = (-u_xlat9.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat9.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.xx;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat9.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat12) * u_xlat9.xy;
					    u_xlat9.xy = (-u_xlat9.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat9.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, 0.159154937
					    def c9, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c3
					    mad_pp r1.x, r1.x, c8.w, c8.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c9.x, c9.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c9.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c9.w, c9.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r2, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0, c5.x
					    dp2add_pp r0.x, r0, -r0, -c9.z
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.z, c9.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c4
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 56 instruction slots used (2 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _VignetteBlur        c6       1
					//   _MainTex             s0       1
					//   _BlurTex             s1       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, 0.159154937
					    def c8, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c7.w, c7.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c8.x, c8.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c8.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c8.w, c8.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, c8.w, c8.z
					    dp2add_pp r0.x, r0, r0, c7.z
					    mul_sat_pp r0.x, r0.x, c6.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0, c4.x
					    dp2add_pp r0.x, r0, -r0, -c8.z
					    max_pp r1.x, r0.x, c7.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.z, c8.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c3
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 52 instruction slots used (3 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteBlur             c7       1
					//   _VignetteDesat            c8       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c9, -0.5, 0.5, 0, 0.159154937
					    def c10, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c9.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c9.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c3
					    mad_pp r1.x, r1.x, c9.w, c9.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c10.x, c10.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c10.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c10.w, c10.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, c10.w, c10.z
					    dp2add_pp r0.x, r0, r0, c9.z
					    mul_sat_pp r0.x, r0.x, c7.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c8.x, r3, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0, c5.x
					    dp2add_pp r0.x, r0, -r0, -c10.z
					    max_pp r1.w, r0.x, c9.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.z, c10.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c4
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 62 instruction slots used (3 texture, 59 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, 0.159154937
					    def c7, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0_abs, c4.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c4.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, -c7.z
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.z, c7.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c3
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c2.z
					    mad_pp r2.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r2.xyxy, c1
					    dp2add_pp r1.w, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    mul_pp r2.xy, r1.w, c2
					    mad_pp r1.w, r2.x, c6.w, c6.y
					    rcp_pp r2.x, r2.y
					    frc_pp r1.w, r1.w
					    mad_pp r1.w, r1.w, c7.x, c7.y
					    sincos_pp r3.xy, r1.w
					    rcp_pp r1.w, r3.x
					    mul_pp r1.w, r1.w, r3.y
					    mad_pp r1.w, r1.w, r2.x, c7.z
					    mad_pp r0.xy, r0.zwzw, r1.w, r0
					    mad_pp r0.zw, r0.xyxy, c7.w, c7.z
					    dp2add_pp r1.w, r0.zwzw, r0.zwzw, c6.z
					    mul_pp r0.zw, r0, r1.w
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r2, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r3.xyz, c0, r0, r2
					    mov_pp oC0.w, r2.w
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 51 instruction slots used (2 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat9.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat12) * u_xlat9.xy;
					    u_xlat9.xy = (-u_xlat9.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat9.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3 = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat9.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat12) * u_xlat9.xy;
					    u_xlat9.xy = (-u_xlat9.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat9.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, 0.159154937
					    def c9, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c3
					    mad_pp r1.x, r1.x, c8.w, c8.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c9.x, c9.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c9.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c9.w, c9.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r2, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0_abs, c5.x
					    log_pp r3.x, r0.x
					    log_pp r3.y, r0.y
					    mul_pp r0.xy, r3, c5.z
					    exp_pp r3.x, r0.x
					    exp_pp r3.y, r0.y
					    dp2add_pp r0.x, r3, -r3, -c9.z
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.z, c9.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c4
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 61 instruction slots used (2 texture, 59 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _VignetteBlur        c6       1
					//   _MainTex             s0       1
					//   _BlurTex             s1       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, 0.159154937
					    def c8, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c2
					    mad_pp r1.x, r1.x, c7.w, c7.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c8.x, c8.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c8.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c8.w, c8.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, c8.w, c8.z
					    dp2add_pp r0.x, r0, r0, c7.z
					    mul_sat_pp r0.x, r0.x, c6.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0_abs, c4.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c4.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, -c8.z
					    max_pp r1.x, r0.x, c7.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.z, c8.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c3
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 57 instruction slots used (3 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3.x = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3.x;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat9.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat12) * u_xlat9.xy;
					    u_xlat9.xy = (-u_xlat9.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat9.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat12 = u_xlat12 * _VignetteBlur;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) * _VignetteSettings.xx;
					    u_xlat0.xy = log2(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * _VignetteSettings.zz;
					    u_xlat0.xy = exp2(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _VignetteSettings.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + _VignetteColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat9.xy = u_xlat1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat1.xy = u_xlat1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat9.xy = u_xlat9.xy * _DistCenterScale.zw;
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat2.xy = vec2(u_xlat12) * _DistAmount.xy;
					    u_xlat3.x = cos(u_xlat2.x);
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat12 = float(1.0) / u_xlat2.y;
					    u_xlat2.x = u_xlat2.x / u_xlat3.x;
					    u_xlat12 = u_xlat2.x * u_xlat12 + -1.0;
					    u_xlat1.xy = u_xlat9.xy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat9.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat9.xy = vec2(u_xlat12) * u_xlat9.xy;
					    u_xlat9.xy = (-u_xlat9.xy) * _ChromaticAberration.ww + u_xlat1.xy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat9.xy);
					    u_xlat1.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat1.xyz = _ChromaticAberration.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = u_xlat2.w;
					    u_xlat2 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat12 = u_xlat12 * _VignetteBlur;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteBlur             c7       1
					//   _VignetteDesat            c8       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c9, -0.5, 0.5, 0, 0.159154937
					    def c10, 6.28318548, -3.14159274, -1, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c9.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c9.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.x, r1.x
					    mul_pp r1.xy, r1.x, c3
					    mad_pp r1.x, r1.x, c9.w, c9.y
					    rcp_pp r1.y, r1.y
					    frc_pp r1.x, r1.x
					    mad_pp r1.x, r1.x, c10.x, c10.y
					    sincos_pp r2.xy, r1.x
					    rcp_pp r1.x, r2.x
					    mul_pp r1.x, r1.x, r2.y
					    mad_pp r1.x, r1.x, r1.y, c10.z
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, c10.w, c10.z
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, c10.w, c10.z
					    dp2add_pp r0.x, r0, r0, c9.z
					    mul_sat_pp r0.x, r0.x, c7.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c8.x, r3, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0_abs, c5.x
					    log_pp r2.x, r0.x
					    log_pp r2.y, r0.y
					    mul_pp r0.xy, r2, c5.z
					    exp_pp r2.x, r0.x
					    exp_pp r2.y, r0.y
					    dp2add_pp r0.x, r2, -r2, -c10.z
					    max_pp r1.w, r0.x, c9.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.z, c10.z
					    lrp_pp r1.xyz, r0.x, -r0.z, c4
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 67 instruction slots used (3 texture, 64 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.xy = u_xlat1.xx * _DistAmount.xy;
					    u_xlat2.x = cos(u_xlat1.x);
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat4 = float(1.0) / u_xlat1.y;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, -1
					    def c7, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c8, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c6.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c6.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c7.x, c7.y
					    mad_pp r2.x, r1.w, r2.x, c7.z
					    mad_pp r2.x, r1.w, r2.x, c7.w
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c8.y, c8.z
					    add r2.x, -r1_abs.y, -c6.w
					    min_pp r2.y, r1.y, -c6.w
					    cmp_pp r1.y, r2.y, c6_abs.z, c6_abs.w
					    cmp_pp r2.x, r2.x, c6_abs.z, c6_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c6.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c8.y, -c8.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0, c4.x
					    dp2add_pp r0.x, r0, -r0, -c6.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.w, c6.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 51 instruction slots used (2 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, -1
					    def c9, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c10, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c3
					    add r1.z, r1_abs.y, c8.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c8.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c9.x, c9.y
					    mad_pp r2.x, r1.w, r2.x, c9.z
					    mad_pp r2.x, r1.w, r2.x, c9.w
					    mad_pp r1.w, r1.w, r2.x, c10.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c10.y, c10.z
					    add r2.x, -r1_abs.y, -c8.w
					    min_pp r2.y, r1.y, -c8.w
					    cmp_pp r1.y, r2.y, c8_abs.z, c8_abs.w
					    cmp_pp r2.x, r2.x, c8_abs.z, c8_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c8.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c10.y, -c10.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r2, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0, c5.x
					    dp2add_pp r0.x, r0, -r0, -c8.w
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.w, c8.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c4
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 61 instruction slots used (2 texture, 59 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _VignetteBlur        c6       1
					//   _MainTex             s0       1
					//   _BlurTex             s1       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, -1
					    def c8, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c9, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c7.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c7.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c8.x, c8.y
					    mad_pp r2.x, r1.w, r2.x, c8.z
					    mad_pp r2.x, r1.w, r2.x, c8.w
					    mad_pp r1.w, r1.w, r2.x, c9.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c9.y, c9.z
					    add r2.x, -r1_abs.y, -c7.w
					    min_pp r2.y, r1.y, -c7.w
					    cmp_pp r1.y, r2.y, c7_abs.z, c7_abs.w
					    cmp_pp r2.x, r2.x, c7_abs.z, c7_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c7.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c9.y, -c9.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, -c9.y, -c9.w
					    dp2add_pp r0.x, r0, r0, c7.z
					    mul_sat_pp r0.x, r0.x, c6.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0, c4.x
					    dp2add_pp r0.x, r0, -r0, -c7.w
					    max_pp r1.x, r0.x, c7.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.w, c7.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c3
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 57 instruction slots used (3 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteBlur             c7       1
					//   _VignetteDesat            c8       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c9, -0.5, 0.5, 0, -1
					    def c10, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c11, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c9.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c9.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c3
					    add r1.z, r1_abs.y, c9.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c9.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c10.x, c10.y
					    mad_pp r2.x, r1.w, r2.x, c10.z
					    mad_pp r2.x, r1.w, r2.x, c10.w
					    mad_pp r1.w, r1.w, r2.x, c11.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c11.y, c11.z
					    add r2.x, -r1_abs.y, -c9.w
					    min_pp r2.y, r1.y, -c9.w
					    cmp_pp r1.y, r2.y, c9_abs.z, c9_abs.w
					    cmp_pp r2.x, r2.x, c9_abs.z, c9_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c9.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c11.y, -c11.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, -c11.y, -c11.w
					    dp2add_pp r0.x, r0, r0, c9.z
					    mul_sat_pp r0.x, r0.x, c7.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c8.x, r3, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0, c5.x
					    dp2add_pp r0.x, r0, -r0, -c9.w
					    max_pp r1.w, r0.x, c9.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.w, c9.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c4
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 67 instruction slots used (3 texture, 64 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" "VIGNETTE_BLUR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.xx;
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c6, -0.5, 0.5, 0, -1
					    def c7, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c8, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c6.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c6.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c6.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c6.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c7.x, c7.y
					    mad_pp r2.x, r1.w, r2.x, c7.z
					    mad_pp r2.x, r1.w, r2.x, c7.w
					    mad_pp r1.w, r1.w, r2.x, c8.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c8.y, c8.z
					    add r2.x, -r1_abs.y, -c6.w
					    min_pp r2.y, r1.y, -c6.w
					    cmp_pp r1.y, r2.y, c6_abs.z, c6_abs.w
					    cmp_pp r2.x, r2.x, c6_abs.z, c6_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c6.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c8.y, -c8.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c6.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0_abs, c4.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c4.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, -c6.w
					    max_pp r1.x, r0.x, c6.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.w, c6.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c3
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 56 instruction slots used (2 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2 = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2 = u_xlat10 * u_xlat2 + 0.180141002;
					    u_xlat2 = u_xlat10 * u_xlat2 + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2 + 0.999866009;
					    u_xlat2 = u_xlat10 * u_xlat7;
					    u_xlat2 = u_xlat2 * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2 = u_xlatb5 ? u_xlat2 : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteDesat            c7       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c8, -0.5, 0.5, 0, -1
					    def c9, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c10, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    add_pp r0.xy, c8.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c8.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c3
					    add r1.z, r1_abs.y, c8.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c8.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c9.x, c9.y
					    mad_pp r2.x, r1.w, r2.x, c9.z
					    mad_pp r2.x, r1.w, r2.x, c9.w
					    mad_pp r1.w, r1.w, r2.x, c10.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c10.y, c10.z
					    add r2.x, -r1_abs.y, -c8.w
					    min_pp r2.y, r1.y, -c8.w
					    cmp_pp r1.y, r2.y, c8_abs.z, c8_abs.w
					    cmp_pp r2.x, r2.x, c8_abs.z, c8_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c8.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c10.y, -c10.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c8.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r2, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r2.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c7.x, r2, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0_abs, c5.x
					    log_pp r3.x, r0.x
					    log_pp r3.y, r0.y
					    mul_pp r0.xy, r3, c5.z
					    exp_pp r3.x, r0.x
					    exp_pp r3.y, r0.y
					    dp2add_pp r0.x, r3, -r3, -c8.w
					    max_pp r1.w, r0.x, c8.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r3.xyz, r0.x, r2, r1
					    mov r0.w, c8.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c4
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 66 instruction slots used (2 texture, 64 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float3 _VignetteSettings;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ChromaticAberration c0       1
					//   _DistCenterScale     c1       1
					//   _DistAmount          c2       1
					//   _VignetteColor       c3       1
					//   _VignetteSettings    c4       1
					//   _VignetteCenter      c5       1
					//   _VignetteBlur        c6       1
					//   _MainTex             s0       1
					//   _BlurTex             s1       1
					//
					
					    ps_3_0
					    def c7, -0.5, 0.5, 0, -1
					    def c8, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c9, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c7.x, v0
					    mov r0.z, c2.z
					    mad_pp r1.xy, r0, r0.z, -c1
					    mad_pp r0.xy, r0, r0.z, c7.y
					    mul_pp r0.zw, r1.xyxy, c1
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c2
					    add r1.z, r1_abs.y, c7.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c7.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c8.x, c8.y
					    mad_pp r2.x, r1.w, r2.x, c8.z
					    mad_pp r2.x, r1.w, r2.x, c8.w
					    mad_pp r1.w, r1.w, r2.x, c9.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c9.y, c9.z
					    add r2.x, -r1_abs.y, -c7.w
					    min_pp r2.y, r1.y, -c7.w
					    cmp_pp r1.y, r2.y, c7_abs.z, c7_abs.w
					    cmp_pp r2.x, r2.x, c7_abs.z, c7_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c7.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c9.y, -c9.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c7.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c0.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c0, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, -c9.y, -c9.w
					    dp2add_pp r0.x, r0, r0, c7.z
					    mul_sat_pp r0.x, r0.x, c6.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    add_pp r0.xy, -c5, v0
					    mul_pp r0.xy, r0_abs, c4.x
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    mul_pp r0.xy, r1, c4.z
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1, -r1, -c7.w
					    max_pp r1.x, r0.x, c7.z
					    pow_pp r0.x, r1.x, c4.y
					    mov r0.w, c7.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c3
					    mul_pp oC0.xyz, r1, r3
					
					// approximately 62 instruction slots used (3 texture, 59 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) * _VignetteSettings.xx;
					    u_xlat1.xy = log2(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy * _VignetteSettings.zz;
					    u_xlat1.xy = exp2(u_xlat1.xy);
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _BlurTex;
					//   float4 _ChromaticAberration;
					//   float3 _DistAmount;
					//   float4 _DistCenterScale;
					//   sampler2D _MainTex;
					//   float _VignetteBlur;
					//   float2 _VignetteCenter;
					//   float3 _VignetteColor;
					//   float _VignetteDesat;
					//   float3 _VignetteSettings;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ColorSpaceLuminance c0       1
					//   _ChromaticAberration      c1       1
					//   _DistCenterScale          c2       1
					//   _DistAmount               c3       1
					//   _VignetteColor            c4       1
					//   _VignetteSettings         c5       1
					//   _VignetteCenter           c6       1
					//   _VignetteBlur             c7       1
					//   _VignetteDesat            c8       1
					//   _MainTex                  s0       1
					//   _BlurTex                  s1       1
					//
					
					    ps_3_0
					    def c9, -0.5, 0.5, 0, -1
					    def c10, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c11, 0.999866009, -2, 1.57079637, 1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add_pp r0.xy, c9.x, v0
					    mov r0.z, c3.z
					    mad_pp r1.xy, r0, r0.z, -c2
					    mad_pp r0.xy, r0, r0.z, c9.y
					    mul_pp r0.zw, r1.xyxy, c2
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    rsq_pp r1.x, r1.x
					    rcp_pp r1.y, r1.x
					    mul_pp r1.xy, r1, c3
					    add r1.z, r1_abs.y, c9.w
					    rcp_pp r1.w, r1_abs.y
					    cmp_pp r1.z, r1.z, r1.w, -c9.w
					    mov_sat_pp r1.w, r1_abs.y
					    mul_pp r1.z, r1.z, r1.w
					    mul_pp r1.w, r1.z, r1.z
					    mad_pp r2.x, r1.w, c10.x, c10.y
					    mad_pp r2.x, r1.w, r2.x, c10.z
					    mad_pp r2.x, r1.w, r2.x, c10.w
					    mad_pp r1.w, r1.w, r2.x, c11.x
					    mul_pp r1.z, r1.w, r1.z
					    mad_pp r1.w, r1.z, c11.y, c11.z
					    add r2.x, -r1_abs.y, -c9.w
					    min_pp r2.y, r1.y, -c9.w
					    cmp_pp r1.y, r2.y, c9_abs.z, c9_abs.w
					    cmp_pp r2.x, r2.x, c9_abs.z, c9_abs.w
					    mad_pp r1.z, r1.w, r2.x, r1.z
					    add_pp r1.w, r1.z, r1.z
					    mad_pp r1.y, r1.y, -r1.w, r1.z
					    mad_pp r1.x, r1.x, r1.y, c9.w
					    mad_pp r0.xy, r0.zwzw, r1.x, r0
					    mad_pp r0.zw, r0.xyxy, -c11.y, -c11.w
					    dp2add_pp r1.x, r0.zwzw, r0.zwzw, c9.z
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -c1.w, r0.xyxy
					    texld_pp r1, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    lrp_pp r2.xyz, c1, r0, r1
					    mov_pp oC0.w, r1.w
					    mad_pp r0.xy, v0, -c11.y, -c11.w
					    dp2add_pp r0.x, r0, r0, c9.z
					    mul_sat_pp r0.x, r0.x, c7.x
					    texld_pp r1, v0, s1
					    lrp_pp r3.xyz, r0.x, r1, r2
					    mul_pp r0.xyz, r3, c0
					    add_pp r0.xz, r0.yyzw, r0.x
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r0.x, r3.z, c0.z, r0.x
					    rsq_pp r0.y, r0.y
					    rcp_pp r0.y, r0.y
					    dp2add_pp r0.x, c0.w, r0.y, r0.x
					    lrp_pp r1.xyz, c8.x, r3, r0.x
					    add_pp r0.xy, -c6, v0
					    mul_pp r0.xy, r0_abs, c5.x
					    log_pp r2.x, r0.x
					    log_pp r2.y, r0.y
					    mul_pp r0.xy, r2, c5.z
					    exp_pp r2.x, r0.x
					    exp_pp r2.y, r0.y
					    dp2add_pp r0.x, r2, -r2, -c9.w
					    max_pp r1.w, r0.x, c9.z
					    pow_pp r0.x, r1.w, c5.y
					    lrp_pp r2.xyz, r0.x, r3, r1
					    mov r0.w, c9.w
					    lrp_pp r1.xyz, r0.x, -r0.w, c4
					    mul_pp oC0.xyz, r1, r2
					
					// approximately 72 instruction slots used (3 texture, 69 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[3];
						vec4 _ChromaticAberration;
						vec4 _DistCenterScale;
						vec3 _DistAmount;
						vec3 _VignetteColor;
						vec3 _VignetteSettings;
						vec2 _VignetteCenter;
						float _VignetteBlur;
						float _VignetteDesat;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat0.xy = u_xlat0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat6.xy = u_xlat6.xy * _DistCenterScale.zw;
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat4 = u_xlat1.x * _DistAmount.y;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _DistAmount.x;
					    u_xlat7 = max(abs(u_xlat4), 1.0);
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat10 = min(abs(u_xlat4), 1.0);
					    u_xlat7 = u_xlat7 * u_xlat10;
					    u_xlat10 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat10 * 0.0208350997 + -0.0851330012;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + 0.180141002;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + -0.330299497;
					    u_xlat10 = u_xlat10 * u_xlat2.x + 0.999866009;
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 1.57079637;
					    u_xlatb5 = 1.0<abs(u_xlat4);
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlatb4 = u_xlat4<(-u_xlat4);
					    u_xlat2.x = u_xlatb5 ? u_xlat2.x : float(0.0);
					    u_xlat7 = u_xlat7 * u_xlat10 + u_xlat2.x;
					    u_xlat4 = (u_xlatb4) ? (-u_xlat7) : u_xlat7;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -1.0;
					    u_xlat0.xy = u_xlat6.xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = (-u_xlat6.xy) * _ChromaticAberration.ww + u_xlat0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = _ChromaticAberration.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1 = texture(_BlurTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = u_xlat9 * _VignetteBlur;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * unity_ColorSpaceLuminance.xyz;
					    u_xlat1.xz = u_xlat1.yz + u_xlat1.xx;
					    u_xlat9 = u_xlat1.z * u_xlat1.y;
					    u_xlat1.x = u_xlat0.z * unity_ColorSpaceLuminance.z + u_xlat1.x;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat9));
					    u_xlat9 = u_xlat9 + u_xlat1.x;
					    u_xlat1.xyz = (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat1.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat2.xy = abs(u_xlat2.xy) * _VignetteSettings.xx;
					    u_xlat2.xy = log2(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * _VignetteSettings.zz;
					    u_xlat2.xy = exp2(u_xlat2.xy);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * _VignetteSettings.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    return;
					}"
}
}
 }
}
Fallback Off
}