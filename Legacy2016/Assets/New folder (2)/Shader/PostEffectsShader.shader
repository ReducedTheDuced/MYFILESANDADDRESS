Shader "AG/PostEffectsShader" {
SubShader { 
 Tags { "QUEUE"="Overlay+100" }
 Pass {
  Tags { "QUEUE"="Overlay+100" }
  ZTest Always
  ZWrite Off
  Blend DstColor Zero
  GpuProgramID 17740
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dp4 o1.x, c0, v0
					    dp4 o1.y, c1, v0
					    dp4 o1.z, c2, v0
					    dp4 o1.w, c3, v0
					    mov o0.xy, v1
					
					// approximately 5 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_1_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    gl_Position = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Fade;
					//   float4 _GradientVector;
					//   float _VignetteRadius;
					//   float _VignetteSoftness;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Fade             c0       1
					//   _GradientVector   c1       1
					//   _VignetteRadius   c2       1
					//   _VignetteSoftness c3       1
					//
					
					    ps_3_0
					    def c4, -0.5, 0, -2, 3
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    add r0.xy, c4.x, v0
					    dp2add r0.x, r0, r0, c4.y
					    rsq r0.x, r0.x
					    rcp_sat_pp r0.x, r0.x
					    mov r1.x, c2.x
					    add_pp r0.y, r1.x, -c3.x
					    add_pp r0.x, -r0.y, r0.x
					    add_pp r0.y, -r0.y, c2.x
					    rcp_pp r0.y, r0.y
					    mul_sat_pp r0.x, r0.y, r0.x
					    mad_pp r0.y, r0.x, c4.z, c4.w
					    mul_pp r0.x, r0.x, r0.x
					    mad_pp r0.x, r0.y, -r0.x, c5.x
					    add r0.y, -c1.x, c1.y
					    rcp r0.y, r0.y
					    add r0.z, -c1.x, v0.x
					    mul_sat r0.y, r0.y, r0.z
					    mad r0.z, r0.y, c4.z, c4.w
					    mul r0.y, r0.y, r0.y
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.x, r0.y, c1.w, c1.z
					    mul_pp r0.x, r0.x, r1.x
					    mul_pp r0.x, r0.x, c0.x
					    mov_sat_pp oC0, r0.x
					
					// approximately 25 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _Fade;
						vec4 _GradientVector;
						float _VignetteRadius;
						float _VignetteSoftness;
					};
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat1 = (-_VignetteSoftness) + _VignetteRadius;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    u_xlat1 = (-u_xlat1) + _VignetteRadius;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat0.x = u_xlat1 * u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat0.x * -2.0 + 3.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat1) * u_xlat0.x + 1.0;
					    u_xlat1 = vs_TEXCOORD0.x + (-_GradientVector.x);
					    u_xlat2.xy = (-_GradientVector.xz) + _GradientVector.yw;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat1 = u_xlat2.x * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2.x = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat2.x;
					    u_xlat1 = u_xlat1 * u_xlat2.y + _GradientVector.z;
					    u_xlat0.x = u_xlat1 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Fade;
					    SV_Target0 = u_xlat0.xxxx;
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _Fade;
						vec4 _GradientVector;
						float _VignetteRadius;
						float _VignetteSoftness;
					};
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat1 = (-_VignetteSoftness) + _VignetteRadius;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    u_xlat1 = (-u_xlat1) + _VignetteRadius;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat0.x = u_xlat1 * u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat0.x * -2.0 + 3.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat1) * u_xlat0.x + 1.0;
					    u_xlat1 = vs_TEXCOORD0.x + (-_GradientVector.x);
					    u_xlat2.xy = (-_GradientVector.xz) + _GradientVector.yw;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat1 = u_xlat2.x * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2.x = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat2.x;
					    u_xlat1 = u_xlat1 * u_xlat2.y + _GradientVector.z;
					    u_xlat0.x = u_xlat1 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Fade;
					    SV_Target0 = u_xlat0.xxxx;
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						float _Fade;
						vec4 _GradientVector;
						float _VignetteRadius;
						float _VignetteSoftness;
					};
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					float u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat1 = (-_VignetteSoftness) + _VignetteRadius;
					    u_xlat0.x = (-u_xlat1) + u_xlat0.x;
					    u_xlat1 = (-u_xlat1) + _VignetteRadius;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlat0.x = u_xlat1 * u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat0.x * -2.0 + 3.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat1) * u_xlat0.x + 1.0;
					    u_xlat1 = vs_TEXCOORD0.x + (-_GradientVector.x);
					    u_xlat2.xy = (-_GradientVector.xz) + _GradientVector.yw;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat1 = u_xlat2.x * u_xlat1;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2.x = u_xlat1 * -2.0 + 3.0;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat2.x;
					    u_xlat1 = u_xlat1 * u_xlat2.y + _GradientVector.z;
					    u_xlat0.x = u_xlat1 * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Fade;
					    SV_Target0 = u_xlat0.xxxx;
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}"
}
}
 }
}
}