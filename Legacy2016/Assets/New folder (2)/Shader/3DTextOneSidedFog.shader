Shader "AG/3D Text Shader - Fog" {
Properties {
 _MainTex ("Font Texture", 2D) = "white" { }
 _Color ("Text Color", Color) = (1.000000,1.000000,1.000000,1.000000)
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  GpuProgramID 51842
Program "vp" {
SubProgram "d3d9 hw_tier01 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Color             c4       1
					//   _MainTex_ST        c5       1
					//
					
					    vs_2_0
					    def c6, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mov r0.x, c6.x
					    max r0, r0.x, c4
					    min oD0, r0, c6.y
					    mad oT0.xy, v1, c5, c5.zwzw
					    mad r0, v0.xyzx, c6.yyyx, c6.xxxy
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d9 hw_tier02 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Color             c4       1
					//   _MainTex_ST        c5       1
					//
					
					    vs_2_0
					    def c6, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mov r0.x, c6.x
					    max r0, r0.x, c4
					    min oD0, r0, c6.y
					    mad oT0.xy, v1, c5, c5.zwzw
					    mad r0, v0.xyzx, c6.yyyx, c6.xxxy
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d9 hw_tier03 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Color             c4       1
					//   _MainTex_ST        c5       1
					//
					
					    vs_2_0
					    def c6, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mov r0.x, c6.x
					    max r0, r0.x, c4
					    min oD0, r0, c6.y
					    mad oT0.xy, v1, c5, c5.zwzw
					    mad r0, v0.xyzx, c6.yyyx, c6.xxxy
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = _Color;
					    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    vs_COLOR0 = _Color;
					    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = _Color;
					    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
SubProgram "d3d9 hw_tier01 " {
Keywords { "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   unity_FogParams           c7       1
					//   _Color                    c8       1
					//   _MainTex_ST               c9       1
					//
					
					    vs_2_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mov r0.y, c10.y
					    max r0, r0.y, c8
					    min oD0, r0, c10.x
					    mad oT0.xy, v1, c9, c9.zwzw
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c7.x
					    mul r1.x, r1.x, -r1.x
					    expp oT1.x, r1.x
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					
					// approximately 18 instruction slots used"
}
SubProgram "d3d9 hw_tier02 " {
Keywords { "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   unity_FogParams           c7       1
					//   _Color                    c8       1
					//   _MainTex_ST               c9       1
					//
					
					    vs_2_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mov r0.y, c10.y
					    max r0, r0.y, c8
					    min oD0, r0, c10.x
					    mad oT0.xy, v1, c9, c9.zwzw
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c7.x
					    mul r1.x, r1.x, -r1.x
					    expp oT1.x, r1.x
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					
					// approximately 18 instruction slots used"
}
SubProgram "d3d9 hw_tier03 " {
Keywords { "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   unity_FogParams           c7       1
					//   _Color                    c8       1
					//   _MainTex_ST               c9       1
					//
					
					    vs_2_0
					    def c10, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mov r0.y, c10.y
					    max r0, r0.y, c8
					    min oD0, r0, c10.x
					    mad oT0.xy, v1, c9, c9.zwzw
					    mad r0, v0.xyzx, c10.xxxy, c10.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c7.x
					    mul r1.x, r1.x, -r1.x
					    expp oT1.x, r1.x
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					
					// approximately 18 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = _Color;
					    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + glstate_matrix_modelview0[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD1 = exp2(u_xlat0.x);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    vs_COLOR0 = _Color;
					    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat3.xyz = unity_ObjectToWorld[1].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat3.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[1].xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[1].zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[1].www + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[0].www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[2].www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[3].www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * unity_FogParams.x;
					    u_xlat3.x = u_xlat3.x * (-u_xlat3.x);
					    vs_TEXCOORD1 = exp2(u_xlat3.x);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = _Color;
					    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + glstate_matrix_modelview0[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD1 = exp2(u_xlat0.x);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 hw_tier01 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl v0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0.w, r0.w, v0.w
					    mov_pp r0.xyz, v0
					    mov_pp oC0, r0
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d9 hw_tier02 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl v0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0.w, r0.w, v0.w
					    mov_pp r0.xyz, v0
					    mov_pp oC0, r0
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d9 hw_tier03 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl v0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0.w, r0.w, v0.w
					    mov_pp r0.xyz, v0
					    mov_pp oC0, r0
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
					    SV_Target0.xyz = vs_COLOR0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
					    SV_Target0.xyz = vs_COLOR0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
					    SV_Target0.xyz = vs_COLOR0.xyz;
					    return;
					}"
}
SubProgram "d3d9 hw_tier01 " {
Keywords { "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   unity_FogColor c0       1
					//   _MainTex       s0       1
					//
					
					    ps_2_0
					    dcl v0
					    dcl t0.xy
					    dcl_pp t1.x
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0.w, r0.w, v0.w
					    add_pp r1.xyz, v0, -c0
					    mad_pp r0.xyz, t1.x, r1, c0
					    mov_pp oC0, r0
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d9 hw_tier02 " {
Keywords { "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   unity_FogColor c0       1
					//   _MainTex       s0       1
					//
					
					    ps_2_0
					    dcl v0
					    dcl t0.xy
					    dcl_pp t1.x
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0.w, r0.w, v0.w
					    add_pp r1.xyz, v0, -c0
					    mad_pp r0.xyz, t1.x, r1, c0
					    mov_pp oC0, r0
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d9 hw_tier03 " {
Keywords { "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   unity_FogColor c0       1
					//   _MainTex       s0       1
					//
					
					    ps_2_0
					    dcl v0
					    dcl t0.xy
					    dcl_pp t1.x
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0.w, r0.w, v0.w
					    add_pp r1.xyz, v0, -c0
					    mad_pp r0.xyz, t1.x, r1, c0
					    mov_pp oC0, r0
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_0_1;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_0_1;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_0_1;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = vs_COLOR0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
}
 }
}
}