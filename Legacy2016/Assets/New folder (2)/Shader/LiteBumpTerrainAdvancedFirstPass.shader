Shader "Nature/Terrain/Advanced Bumped (Lite)" {
Properties {
 _Depth ("Blend Depth", Range(0.001000,1.000000)) = 0.100000
[HideInInspector]  _Control ("Control (RGBA)", 2D) = "red" { }
[HideInInspector]  _Splat3 ("Layer 3 (A)", 2D) = "black" { }
[HideInInspector]  _Splat2 ("Layer 2 (B)", 2D) = "black" { }
[HideInInspector]  _Splat1 ("Layer 1 (G)", 2D) = "black" { }
[HideInInspector]  _Splat0 ("Layer 0 (R)", 2D) = "black" { }
[HideInInspector]  _Normal3 ("Normal 3 (A)", 2D) = "bump" { }
[HideInInspector]  _Normal2 ("Normal 2 (B)", 2D) = "bump" { }
[HideInInspector]  _Normal1 ("Normal 1 (G)", 2D) = "bump" { }
[HideInInspector]  _Normal0 ("Normal 0 (R)", 2D) = "bump" { }
[HideInInspector]  _MainTex ("BaseMap (RGB)", 2D) = "white" { }
[HideInInspector]  _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
}
SubShader { 
 Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "SplatCount"="4" }
  GpuProgramID 26406
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord9 o8
					    mad r0, v0.xyzx, c20.yyyx, c20.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0, c8.xyzz, v1.y
					    mad r0, c7.xyzz, v1.x, r0
					    mad r0, c9.xyzz, v1.z, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o7.xyz, c13, r1.x, r3
					    mul r1.xyz, c20.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c20.yxxw, -r1
					    dp3 r2.z, c4, r1
					    dp3 r2.x, c5, r1
					    dp3 r2.y, c6, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o8, c20.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = dot(u_xlat0.xyw, u_xlat0.xyw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.wxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.ywx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat0.w;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat0 = u_xlat0.ywzx * u_xlat0;
					    u_xlat2.x = dot(unity_SHBr, u_xlat0);
					    u_xlat2.y = dot(unity_SHBg, u_xlat0);
					    u_xlat2.z = dot(unity_SHBb, u_xlat0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat1;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord9 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_LightmapST           c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.xy, v3, c11, c11.zwzw
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.zw, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_LightmapST           c11      1
					//   unity_DynamicLightmapST    c12      1
					//   _Control_ST                c13      1
					//   _Splat0_ST                 c14      1
					//   _Splat1_ST                 c15      1
					//   _Splat2_ST                 c16      1
					//   _Splat3_ST                 c17      1
					//
					
					    vs_3_0
					    def c18, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad r0, v0.xyzx, c18.yyyx, c18.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c13, c13.zwzw
					    mad o1.zw, v2.xyxy, c14.xyxy, c14
					    mad o2.xy, v2, c15, c15.zwzw
					    mad o2.zw, v2.xyxy, c16.xyxy, c16
					    mad o3.xy, v2, c17, c17.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v4.xyxy, c12.xyxy, c12
					    mad o7.xy, v3, c11, c11.zwzw
					    mul r0.xyz, c18.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c18.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord9 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_SHBr                 c12      1
					//   unity_SHBg                 c13      1
					//   unity_SHBb                 c14      1
					//   unity_SHC                  c15      1
					//   unity_WorldTransformParams c16      1
					//   _Control_ST                c17      1
					//   _Splat0_ST                 c18      1
					//   _Splat1_ST                 c19      1
					//   _Splat2_ST                 c20      1
					//   _Splat3_ST                 c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0, c8.xyzz, v1.y
					    mad r0, c7.xyzz, v1.x, r0
					    mad r0, c9.xyzz, v1.z, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c12, r2
					    dp4 r3.y, c13, r2
					    dp4 r3.z, c14, r2
					    mad o7.xyz, c15, r1.x, r3
					    mad r1, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 r2.y, c1, r1
					    mul r0.z, r2.y, c10.x
					    mul r3.w, r0.z, c22.z
					    dp4 r2.x, c0, r1
					    dp4 r2.w, c3, r1
					    dp4 r2.z, c2, r1
					    mul r3.xz, r2.xyww, c22.z
					    mov o0, r2
					    mov o8.zw, r2
					    mad o8.xy, r3.z, c11.zwzw, r3.xwzw
					    mul r1.xyz, c22.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c22.yxxw, -r1
					    dp3 r2.z, c4, r1
					    dp3 r2.x, c5, r1
					    dp3 r2.y, c6, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c16.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o9, c22.x
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord9 o8
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c19.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_LightmapST           c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.xy, v3, c13, c13.zwzw
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o8.zw, r1
					    mad o8.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.zw, c19.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_LightmapST           c13      1
					//   unity_DynamicLightmapST    c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v4.xyxy, c14.xyxy, c14
					    mad o7.xy, v3, c13, c13.zwzw
					    mad r0, v0.xyzx, c20.yyyx, c20.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c20.z
					    mov o0, r1
					    mov o8.zw, r1
					    mad o8.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c20.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c20.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord9 o8
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c19.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   unity_4LightPosX0          c14      1
					//   unity_4LightPosY0          c15      1
					//   unity_4LightPosZ0          c16      1
					//   unity_4LightAtten0         c17      1
					//   unity_SHBr                 c18      1
					//   unity_SHBg                 c19      1
					//   unity_SHBb                 c20      1
					//   unity_SHC                  c21      1
					//   unity_WorldTransformParams c22      1
					//   unity_ColorSpaceLuminance  c23      1
					//   _Control_ST                c24      1
					//   _Splat0_ST                 c25      1
					//   _Splat1_ST                 c26      1
					//   _Splat2_ST                 c27      1
					//   _Splat3_ST                 c28      1
					//
					
					    vs_3_0
					    def c29, 0, 1, 0.305306017, 0.682171106
					    def c30, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord9 o8
					    mad r0, v0.xyzx, c29.yyyx, c29.xxxy
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.z, c6, r0
					    dp4 o0.w, c7, r0
					    mad o1.xy, v2, c24, c24.zwzw
					    mad o1.zw, v2.xyxy, c25.xyxy, c25
					    mad o2.xy, v2, c26, c26.zwzw
					    mad o2.zw, v2.xyxy, c27.xyxy, c27
					    mad o3.xy, v2, c28, c28.zwzw
					    abs r0.x, c23.w
					    sge r0.x, -r0.x, r0.x
					    dp4 r0.y, c10, v0
					    add r1, -r0.y, c16
					    mov o6.w, r0.y
					    dp4 r0.y, c8, v0
					    add r2, -r0.y, c14
					    mov o4.w, r0.y
					    dp4 r0.y, c9, v0
					    add r3, -r0.y, c15
					    mov o5.w, r0.y
					    mul r4, c12.xyzz, v1.y
					    mad r4, c11.xyzz, v1.x, r4
					    mad r4, c13.xyzz, v1.z, r4
					    dp3 r0.y, r4.xyww, r4.xyww
					    rsq r0.y, r0.y
					    mul r4, r0.y, r4
					    mul r5, r3, r4.y
					    mul r3, r3, r3
					    mad r3, r2, r2, r3
					    mad r2, r2, r4.x, r5
					    mad r2, r1, r4.wwzw, r2
					    mad r1, r1, r1, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r0.y, c29.y
					    mad r1, r1, c17, r0.y
					    mul r2, r2, r3
					    max r2, r2, c29.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c29.z, c29.w
					    mad r1.xyz, r0.yzww, r1, c30.x
					    mad r1.xyz, r0.yzww, r1, -r0.yzww
					    mad r0.xyz, r0.x, r1, r0.yzww
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c18, r1
					    dp4 r2.y, c19, r1
					    dp4 r2.z, c20, r1
					    mad r1.xyz, c21, r0.w, r2
					    add o7.xyz, r0, r1
					    mul r0.xyz, c29.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c29.yxxw, -r0
					    dp3 r1.z, c8, r0
					    dp3 r1.x, c9, r0
					    dp3 r1.y, c10, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c22.w
					    mov o4.y, r1.x
					    mov o4.z, r4.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r4.y
					    mov o6.z, r4.w
					    mov o8, c29.x
					
					// approximately 83 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat5.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.wxy;
					    u_xlat2.xyz = u_xlat1.ywx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    u_xlat0 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat2 = u_xlat1.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat4 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat2 = u_xlat4 * u_xlat1.xxxx + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat2 = u_xlat3 * u_xlat1.wwzw + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					int u_xlati15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat6.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat15 = dot(u_xlat2.xyw, u_xlat2.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2 = vec4(u_xlat15) * u_xlat2;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;
					    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
					    u_xlat1 = u_xlat0 * u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2.wwzw + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord9 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord9 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHBr                 c20      1
					//   unity_SHBg                 c21      1
					//   unity_SHBb                 c22      1
					//   unity_SHC                  c23      1
					//   unity_WorldTransformParams c24      1
					//   unity_ColorSpaceLuminance  c25      1
					//   _Control_ST                c26      1
					//   _Splat0_ST                 c27      1
					//   _Splat1_ST                 c28      1
					//   _Splat2_ST                 c29      1
					//   _Splat3_ST                 c30      1
					//
					
					    vs_3_0
					    def c31, 0, 1, 0.305306017, 0.682171106
					    def c32, 0.0125228781, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c26, c26.zwzw
					    mad o1.zw, v2.xyxy, c27.xyxy, c27
					    mad o2.xy, v2, c28, c28.zwzw
					    mad o2.zw, v2.xyxy, c29.xyxy, c29
					    mad o3.xy, v2, c30, c30.zwzw
					    abs r0.x, c25.w
					    sge r0.x, -r0.x, r0.x
					    dp4 r0.y, c10, v0
					    add r1, -r0.y, c18
					    mov o6.w, r0.y
					    dp4 r0.y, c8, v0
					    add r2, -r0.y, c16
					    mov o4.w, r0.y
					    dp4 r0.y, c9, v0
					    add r3, -r0.y, c17
					    mov o5.w, r0.y
					    mul r4, c12.xyzz, v1.y
					    mad r4, c11.xyzz, v1.x, r4
					    mad r4, c13.xyzz, v1.z, r4
					    dp3 r0.y, r4.xyww, r4.xyww
					    rsq r0.y, r0.y
					    mul r4, r0.y, r4
					    mul r5, r3, r4.y
					    mul r3, r3, r3
					    mad r3, r2, r2, r3
					    mad r2, r2, r4.x, r5
					    mad r2, r1, r4.wwzw, r2
					    mad r1, r1, r1, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r0.y, c31.y
					    mad r1, r1, c19, r0.y
					    mul r2, r2, r3
					    max r2, r2, c31.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c31.z, c31.w
					    mad r1.xyz, r0.yzww, r1, c32.x
					    mad r1.xyz, r0.yzww, r1, -r0.yzww
					    mad r0.xyz, r0.x, r1, r0.yzww
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o7.xyz, r0, r1
					    mad r0, v0.xyzx, c31.yyyx, c31.xxxy
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c32.y
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c32.y
					    mov o0, r1
					    mov o8.zw, r1
					    mad o8.xy, r2.z, c15.zwzw, r2.xwzw
					    mul r0.xyz, c31.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c31.yxxw, -r0
					    dp3 r1.z, c8, r0
					    dp3 r1.x, c9, r0
					    dp3 r1.y, c10, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c24.w
					    mov o4.y, r1.x
					    mov o4.z, r4.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r4.y
					    mov o6.z, r4.w
					    mov o9, c31.x
					
					// approximately 89 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat7.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat7.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat19 = dot(u_xlat2.xyw, u_xlat2.xyw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    u_xlat1 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat5 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat2.xxxx + u_xlat3;
					    u_xlat1 = u_xlat5 * u_xlat5 + u_xlat1;
					    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat2.wwzw + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat3.xyz = u_xlat1.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unused_2_6[1].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unused_2_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat8;
					int u_xlati12;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat8.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat8.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    u_xlat3.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat3.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat3.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat4.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat4.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat4.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat3 = u_xlat3 + u_xlat4;
					    u_xlat4.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat4.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat4.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat3 = u_xlat3 + u_xlat4;
					    u_xlat18 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3 = vec4(u_xlat18) * u_xlat3;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.z = u_xlat3.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.z = u_xlat3.w;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat3.xxxx + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3.wwzw + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord9 o8
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c19.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord9 o8
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c19.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    dcl_texcoord9 o9
					    mad r0, v0.xyzx, c20.yyyx, c20.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r1, c8.xyzz, v1.y
					    mad r1, c7.xyzz, v1.x, r1
					    mad r1, c9.xyzz, v1.z, r1
					    dp3 r0.y, r1.xyww, r1.xyww
					    rsq r0.y, r0.y
					    mul r1, r0.y, r1
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.ywzx, r1
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o7.xyz, c13, r0.y, r3
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c20.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c20.yxxw, -r0
					    dp3 r2.z, c4, r0
					    dp3 r2.x, c5, r0
					    dp3 r2.y, c6, r0
					    dp3 r0.x, r2, r2
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r2
					    mov o4.x, r0.z
					    mul r2.xyz, r0, r1.wxyw
					    mad r2.xyz, r1.ywxw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r1.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.y
					    mov o6.z, r1.w
					    mov o9, c20.x
					
					// approximately 49 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = dot(u_xlat0.xyw, u_xlat0.xyw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.wxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.ywx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat0.w;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat0 = u_xlat0.ywzx * u_xlat0;
					    u_xlat2.x = dot(unity_SHBr, u_xlat0);
					    u_xlat2.y = dot(unity_SHBg, u_xlat0);
					    u_xlat2.z = dot(unity_SHBb, u_xlat0);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat1;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.x
					    dcl_texcoord9 o8
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c11.xyxy, c11
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_LightmapST           c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.xy, v3, c11, c11.zwzw
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.zw, c17.x
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_LightmapST           c11      1
					//   unity_DynamicLightmapST    c12      1
					//   _Control_ST                c13      1
					//   _Splat0_ST                 c14      1
					//   _Splat1_ST                 c15      1
					//   _Splat2_ST                 c16      1
					//   _Splat3_ST                 c17      1
					//
					
					    vs_3_0
					    def c18, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c18.yyyx, c18.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c13, c13.zwzw
					    mad o1.zw, v2.xyxy, c14.xyxy, c14
					    mad o2.xy, v2, c15, c15.zwzw
					    mad o2.zw, v2.xyxy, c16.xyxy, c16
					    mad o3.xy, v2, c17, c17.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v4.xyxy, c12.xyxy, c12
					    mad o7.xy, v3, c11, c11.zwzw
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c18.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c18.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.x
					    dcl_texcoord9 o8
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c11.xyxy, c11
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_SHBr                 c12      1
					//   unity_SHBg                 c13      1
					//   unity_SHBb                 c14      1
					//   unity_SHC                  c15      1
					//   unity_WorldTransformParams c16      1
					//   _Control_ST                c17      1
					//   _Splat0_ST                 c18      1
					//   _Splat1_ST                 c19      1
					//   _Splat2_ST                 c20      1
					//   _Splat3_ST                 c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.x
					    dcl_texcoord9 o10
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0, c8.xyzz, v1.y
					    mad r0, c7.xyzz, v1.x, r0
					    mad r0, c9.xyzz, v1.z, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c12, r2
					    dp4 r3.y, c13, r2
					    dp4 r3.z, c14, r2
					    mad o7.xyz, c15, r1.x, r3
					    mad r1, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 r2.y, c1, r1
					    mul r0.z, r2.y, c10.x
					    mul r3.w, r0.z, c22.z
					    dp4 r2.x, c0, r1
					    dp4 r2.w, c3, r1
					    dp4 r2.z, c2, r1
					    mul r3.xz, r2.xyww, c22.z
					    mov o0, r2
					    mov o8.zw, r2
					    mov o9.x, r2.z
					    mad o8.xy, r3.z, c11.zwzw, r3.xwzw
					    mul r1.xyz, c22.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c22.yxxw, -r1
					    dp3 r2.z, c4, r1
					    dp3 r2.x, c5, r1
					    dp3 r2.y, c6, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c16.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o10, c22.x
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat1;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat2.xyz;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.wxy * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.ywx * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord8 o8.x
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o9.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o9.xy, c19.x
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_LightmapST           c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.x
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.xy, v3, c13, c13.zwzw
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o8.zw, r1
					    mov o9.x, r1.z
					    mad o8.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.zw, c19.x
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_LightmapST           c13      1
					//   unity_DynamicLightmapST    c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.x
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v4.xyxy, c14.xyxy, c14
					    mad o7.xy, v3, c13, c13.zwzw
					    mad r0, v0.xyzx, c20.yyyx, c20.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c20.z
					    mov o0, r1
					    mov o8.zw, r1
					    mov o9.x, r1.z
					    mad o8.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c20.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c20.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord8 o8.x
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o9.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o9.xy, c19.x
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   unity_4LightPosX0          c14      1
					//   unity_4LightPosY0          c15      1
					//   unity_4LightPosZ0          c16      1
					//   unity_4LightAtten0         c17      1
					//   unity_SHBr                 c18      1
					//   unity_SHBg                 c19      1
					//   unity_SHBb                 c20      1
					//   unity_SHC                  c21      1
					//   unity_WorldTransformParams c22      1
					//   unity_ColorSpaceLuminance  c23      1
					//   _Control_ST                c24      1
					//   _Splat0_ST                 c25      1
					//   _Splat1_ST                 c26      1
					//   _Splat2_ST                 c27      1
					//   _Splat3_ST                 c28      1
					//
					
					    vs_3_0
					    def c29, 0, 1, 0.305306017, 0.682171106
					    def c30, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    dcl_texcoord9 o9
					    mad r0, v0.xyzx, c29.yyyx, c29.xxxy
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.w, c7, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c24, c24.zwzw
					    mad o1.zw, v2.xyxy, c25.xyxy, c25
					    mad o2.xy, v2, c26, c26.zwzw
					    mad o2.zw, v2.xyxy, c27.xyxy, c27
					    mad o3.xy, v2, c28, c28.zwzw
					    abs r0.y, c23.w
					    sge r0.y, -r0.y, r0.y
					    dp4 r0.z, c10, v0
					    add r1, -r0.z, c16
					    mov o6.w, r0.z
					    dp4 r0.z, c8, v0
					    add r2, -r0.z, c14
					    mov o4.w, r0.z
					    dp4 r0.z, c9, v0
					    add r3, -r0.z, c15
					    mov o5.w, r0.z
					    mul r4, c12.xyzz, v1.y
					    mad r4, c11.xyzz, v1.x, r4
					    mad r4, c13.xyzz, v1.z, r4
					    dp3 r0.z, r4.xyww, r4.xyww
					    rsq r0.z, r0.z
					    mul r4, r0.z, r4
					    mul r5, r3, r4.y
					    mul r3, r3, r3
					    mad r3, r2, r2, r3
					    mad r2, r2, r4.x, r5
					    mad r2, r1, r4.wwzw, r2
					    mad r1, r1, r1, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r5.y, c29.y
					    mad r1, r1, c17, r5.y
					    mul r2, r2, r3
					    max r2, r2, c29.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r2.xyz, r1.y, c1
					    mad r2.xyz, c0, r1.x, r2
					    mad r1.xyz, c2, r1.z, r2
					    mad r1.xyz, c3, r1.w, r1
					    mad r2.xyz, r1, c29.z, c29.w
					    mad r2.xyz, r1, r2, c30.x
					    mad r2.xyz, r1, r2, -r1
					    mad r0.yzw, r0.y, r2.xxyz, r1.xxyz
					    mul r1.x, r4.y, r4.y
					    mad r1.x, r4.x, r4.x, -r1.x
					    mul r2, r4.ywzx, r4
					    dp4 r3.x, c18, r2
					    dp4 r3.y, c19, r2
					    dp4 r3.z, c20, r2
					    mad r1.xyz, c21, r1.x, r3
					    add o7.xyz, r0.yzww, r1
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c29.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c29.yxxw, -r0
					    dp3 r1.z, c8, r0
					    dp3 r1.x, c9, r0
					    dp3 r1.y, c10, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c22.w
					    mov o4.y, r1.x
					    mov o4.z, r4.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r4.y
					    mov o6.z, r4.w
					    mov o9, c29.x
					
					// approximately 85 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat5.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat15 = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.wxy;
					    u_xlat2.xyz = u_xlat1.ywx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    u_xlat0 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat2 = u_xlat1.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat4 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat2 = u_xlat4 * u_xlat1.xxxx + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat2 = u_xlat3 * u_xlat1.wwzw + u_xlat2;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					int u_xlati15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat6.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat15 = dot(u_xlat2.xyw, u_xlat2.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2 = vec4(u_xlat15) * u_xlat2;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;
					    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
					    u_xlat1 = u_xlat0 * u_xlat0 + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2.wwzw + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.x
					    dcl_texcoord9 o8
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c11.xyxy, c11
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord8 o7.x
					    dcl_texcoord9 o8
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o8.zw, v3.xyxy, c11.xyxy, c11
					    mov o0.z, r0.x
					    mov o7.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					
					// approximately 43 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _ProjectionParams          c14      1
					//   _ScreenParams              c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHBr                 c20      1
					//   unity_SHBg                 c21      1
					//   unity_SHBb                 c22      1
					//   unity_SHC                  c23      1
					//   unity_WorldTransformParams c24      1
					//   unity_ColorSpaceLuminance  c25      1
					//   _Control_ST                c26      1
					//   _Splat0_ST                 c27      1
					//   _Splat1_ST                 c28      1
					//   _Splat2_ST                 c29      1
					//   _Splat3_ST                 c30      1
					//
					
					    vs_3_0
					    def c31, 0, 1, 0.305306017, 0.682171106
					    def c32, 0.0125228781, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.x
					    dcl_texcoord9 o10
					    mad o1.xy, v2, c26, c26.zwzw
					    mad o1.zw, v2.xyxy, c27.xyxy, c27
					    mad o2.xy, v2, c28, c28.zwzw
					    mad o2.zw, v2.xyxy, c29.xyxy, c29
					    mad o3.xy, v2, c30, c30.zwzw
					    abs r0.x, c25.w
					    sge r0.x, -r0.x, r0.x
					    dp4 r0.y, c10, v0
					    add r1, -r0.y, c18
					    mov o6.w, r0.y
					    dp4 r0.y, c8, v0
					    add r2, -r0.y, c16
					    mov o4.w, r0.y
					    dp4 r0.y, c9, v0
					    add r3, -r0.y, c17
					    mov o5.w, r0.y
					    mul r4, c12.xyzz, v1.y
					    mad r4, c11.xyzz, v1.x, r4
					    mad r4, c13.xyzz, v1.z, r4
					    dp3 r0.y, r4.xyww, r4.xyww
					    rsq r0.y, r0.y
					    mul r4, r0.y, r4
					    mul r5, r3, r4.y
					    mul r3, r3, r3
					    mad r3, r2, r2, r3
					    mad r2, r2, r4.x, r5
					    mad r2, r1, r4.wwzw, r2
					    mad r1, r1, r1, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r0.y, c31.y
					    mad r1, r1, c19, r0.y
					    mul r2, r2, r3
					    max r2, r2, c31.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c31.z, c31.w
					    mad r1.xyz, r0.yzww, r1, c32.x
					    mad r1.xyz, r0.yzww, r1, -r0.yzww
					    mad r0.xyz, r0.x, r1, r0.yzww
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o7.xyz, r0, r1
					    mad r0, v0.xyzx, c31.yyyx, c31.xxxy
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c32.y
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c32.y
					    mov o0, r1
					    mov o8.zw, r1
					    mov o9.x, r1.z
					    mad o8.xy, r2.z, c15.zwzw, r2.xwzw
					    mul r0.xyz, c31.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c31.yxxw, -r0
					    dp3 r1.z, c8, r0
					    dp3 r1.x, c9, r0
					    dp3 r1.y, c10, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c24.w
					    mov o4.y, r1.x
					    mov o4.z, r4.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r4.y
					    mov o6.z, r4.w
					    mov o10, c31.x
					
					// approximately 90 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat7.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat7.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat2 = u_xlat2 + u_xlat3;
					    u_xlat12 = dot(u_xlat2.xyw, u_xlat2.xyw);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2 = vec4(u_xlat12) * u_xlat2;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    u_xlat1 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat5 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat2.xxxx + u_xlat3;
					    u_xlat1 = u_xlat5 * u_xlat5 + u_xlat1;
					    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat2.wwzw + u_xlat3;
					    u_xlat4 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat3.xyz = u_xlat1.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unused_2_6[1].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unused_2_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat12 = u_xlat2.y * u_xlat2.y;
					    u_xlat12 = u_xlat2.x * u_xlat2.x + (-u_xlat12);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat8;
					int u_xlati12;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat8.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat8.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    u_xlat3.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat3.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat3.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat4.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat4.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat4.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat3 = u_xlat3 + u_xlat4;
					    u_xlat4.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat4.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat4.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat3 = u_xlat3 + u_xlat4;
					    u_xlat18 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3 = vec4(u_xlat18) * u_xlat3;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.z = u_xlat3.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.z = u_xlat3.w;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat3.xxxx + u_xlat4;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3.wwzw + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord8 o8.x
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o9.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o9.xy, c19.x
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   _ScreenParams              c11      1
					//   unity_WorldTransformParams c12      1
					//   unity_DynamicLightmapST    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord7 o7
					    dcl_texcoord8 o8.x
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o9.zw, v3.xyxy, c13.xyxy, c13
					    mad r0, v0.xyzx, c19.yyyx, c19.xxxy
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.z
					    mov o0, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    mad o7.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c12.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o9.xy, c19.x
					
					// approximately 48 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD7.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD3.w = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.y;
					    vs_TEXCOORD5.w = u_xlat4.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					int u_xlati10;
					float u_xlat15;
					int u_xlati15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat3.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati10 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD7.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD9.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD9.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_SHAr                c1       1
					//   unity_SHAg                c2       1
					//   unity_SHAb                c3       1
					//   unity_ColorSpaceLuminance c4       1
					//   _LightColor0              c5       1
					//   _Depth                    c6       1
					//   _Control                  s0       1
					//   _Splat0                   s1       1
					//   _Splat1                   s2       1
					//   _Splat2                   s3       1
					//   _Splat3                   s4       1
					//   _Normal0                  s5       1
					//   _Normal1                  s6       1
					//   _Normal2                  s7       1
					//   _Normal3                  s8       1
					//
					
					    ps_3_0
					    def c7, 0, 1, -0.5, 0.5
					    def c8, 2, -1, 0.416666657, 0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6_pp v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld r0, v1.zwzw, s7
					    texld r1, v0.zwzw, s5
					    texld r2, v1, s6
					    texld_pp r3, v1.zwzw, s3
					    texld_pp r4, v0, s0
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s4
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s2
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s1
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c7.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c6.x
					    max r5, r4, c7.x
					    dp4 r0.z, r5, c7.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s8
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c7.z
					    mad_pp r0.yz, r0.x, r0, c7.w
					    mad_pp r1.xy, r0.yzzw, c8.x, c8.y
					    dp2add_sat_pp r0.y, r1, r1, c7.x
					    add_pp r0.y, -r0.y, c7.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mov r2.w, c7.y
					    dp4_pp r1.x, c1, r2
					    dp4_pp r1.y, c2, r2
					    dp4_pp r1.z, c3, r2
					    dp3_pp r0.y, r2, c0
					    max_pp r1.w, r0.y, c7.x
					    add_pp r0.yzw, r1.xxyz, v6.xxyz
					    max_pp r1.xyz, r0.yzww, c7.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r0.yzw, r2.xxyz, c8.z
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    mad_pp r0.yzw, r2.xxyz, c9.x, c9.y
					    max_pp r2.xyz, r0.yzww, c7.x
					    abs r0.y, c4.w
					    cmp_pp r0.yzw, -r0.y, r2.xxyz, r1.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    mul_pp r1.xyz, r1, c5
					    mad_pp oC0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, c7.y
					
					// approximately 66 instruction slots used (9 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _LightColor0              c2       1
					//   _Depth                    c3       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _Normal0                  s6       1
					//   _Normal1                  s7       1
					//   _Normal2                  s8       1
					//   _Normal3                  s9       1
					//
					
					    ps_3_0
					    def c4, 0, 1, -0.5, 0.5
					    def c5, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord9 v6.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r2, v6.zwzw, s0
					    mul_pp r2.w, r2.w, c1.x
					    mul_pp r2.xyz, r2, r2.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c1.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mul_pp r2.xyz, r0, r3
					    mul_pp r0.xyz, r0, c2
					    texld r3, v1, s7
					    mul r3.xy, r1.y, r3.wyzw
					    texld r4, v0.zwzw, s6
					    mad_pp r1.xy, r1.x, r4.wyzw, r3
					    texld r3, v1.zwzw, s8
					    mad_pp r1.xy, r1.z, r3.wyzw, r1
					    texld r3, v2, s9
					    mad_pp r1.xy, r1.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c4.z
					    mad_pp r1.xy, r0.w, r1, c4.w
					    mad_pp r1.xy, r1, c5.x, c5.y
					    dp2add_sat_pp r0.w, r1, r1, c4.x
					    add_pp r0.w, -r0.w, c4.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v3, r1
					    dp3_pp r3.y, v4, r1
					    dp3_pp r3.z, v5, r1
					    dp3_pp r0.w, r3, c0
					    max_pp r1.x, r0.w, c4.x
					    mad_pp oC0.xyz, r0, r1.x, r2
					    mov_pp oC0.w, c4.y
					
					// approximately 59 instruction slots used (10 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_Lightmap_HDR c0       1
					//   _Depth             c1       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord6 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v3, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 32 instruction slots used (6 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[5];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[5];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_Lightmap_HDR        c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _Depth                    c2       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//
					
					    ps_3_0
					    def c3, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord6 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c3.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c2.x
					    max r2, r1, c3.x
					    dp4 r1.x, r2, c3.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v3.zwzw, s1
					    mul_pp r0.w, r1.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r1, v3, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mad_pp r1.xyz, r0.w, r1, r2
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c3.y
					
					// approximately 42 instruction slots used (7 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _WorldSpaceLightPos0        c0       1
					//   unity_DynamicLightmap_HDR   c1       1
					//   _LightColor0                c2       1
					//   _Depth                      c3       1
					//   unity_DynamicLightmap       s0       1
					//   unity_DynamicDirectionality s1       1
					//   _Control                    s2       1
					//   _Splat0                     s3       1
					//   _Splat1                     s4       1
					//   _Splat2                     s5       1
					//   _Splat3                     s6       1
					//   _Normal0                    s7       1
					//   _Normal1                    s8       1
					//   _Normal2                    s9       1
					//   _Normal3                    s10      1
					//
					
					    ps_3_0
					    def c4, 0, 1, -0.5, 0.5
					    def c5, 2, -1, 9.99999975e-005, 10000
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord9 v6.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld_pp r0, v6.zwzw, s0
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c1.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld r0, v1.zwzw, s9
					    texld r2, v0.zwzw, s7
					    texld r3, v1, s8
					    texld_pp r4, v1.zwzw, s5
					    texld_pp r5, v0, s2
					    add r6.z, r4.w, r5.z
					    texld_pp r7, v2, s6
					    add r6.w, r5.w, r7.w
					    max r0.x, r6.z, r6.w
					    texld_pp r8, v1, s4
					    add r6.y, r5.y, r8.w
					    max r1.w, r6.y, r0.x
					    texld_pp r9, v0.zwzw, s3
					    add r6.x, r5.x, r9.w
					    dp4_pp r0.x, r5, c4.y
					    max r0.z, r6.x, r1.w
					    add r5, -r0.z, r6
					    add r5, r5, c3.x
					    max r6, r5, c4.x
					    dp4 r0.z, r6, c4.y
					    rcp r0.z, r0.z
					    mul r5, r0.z, r6
					    mul r2.xz, r3.wyyw, r5.y
					    mad_pp r2.xy, r5.x, r2.wyzw, r2.xzzw
					    mad_pp r0.yz, r5.z, r0.xwyw, r2.xxyw
					    texld r2, v2, s10
					    mad_pp r0.yz, r5.w, r2.xwyw, r0
					    add_pp r0.yz, r0, c4.z
					    mad_pp r0.yz, r0.x, r0, c4.w
					    mad_pp r2.xy, r0.yzzw, c5.x, c5.y
					    dp2add_sat_pp r0.y, r2, r2, c4.x
					    add_pp r0.y, -r0.y, c4.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r2.z, r0.y
					    dp3_pp r3.x, v3, r2
					    dp3_pp r3.y, v4, r2
					    dp3_pp r3.z, v5, r2
					    texld_pp r2, v6.zwzw, s1
					    add_pp r0.yzw, r2.xxyz, c4.z
					    dp3_pp r0.y, r3, r0.yzww
					    dp3_pp r0.z, r3, c0
					    max_pp r1.w, r0.z, c4.x
					    add_pp r0.y, r0.y, c4.w
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    add r1.x, -r2.w, c5.z
					    rcp r1.y, r2.w
					    cmp r1.x, r1.x, c5.w, r1.y
					    mul_pp r0.yzw, r0, r1.x
					    mul r1.xyz, r8, r5.y
					    mad_pp r1.xyz, r5.x, r9, r1
					    mad_pp r1.xyz, r5.z, r4, r1
					    mad_pp r1.xyz, r5.w, r7, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    mul_pp r1.xyz, r1, c2
					    mad_pp oC0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, c4.y
					
					// approximately 68 instruction slots used (11 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_SHAr                c1       1
					//   unity_SHAg                c2       1
					//   unity_SHAb                c3       1
					//   unity_ColorSpaceLuminance c4       1
					//   _LightColor0              c5       1
					//   _Depth                    c6       1
					//   _ShadowMapTexture         s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _Normal0                  s6       1
					//   _Normal1                  s7       1
					//   _Normal2                  s8       1
					//   _Normal3                  s9       1
					//
					
					    ps_3_0
					    def c7, 0, 1, -0.5, 0.5
					    def c8, 2, -1, 0.416666657, 0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord7 v7
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v1.zwzw, s8
					    texld r1, v0.zwzw, s6
					    texld r2, v1, s7
					    texld_pp r3, v1.zwzw, s4
					    texld_pp r4, v0, s1
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s5
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s3
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s2
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c7.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c6.x
					    max r5, r4, c7.x
					    dp4 r0.z, r5, c7.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s9
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c7.z
					    mad_pp r0.yz, r0.x, r0, c7.w
					    mad_pp r1.xy, r0.yzzw, c8.x, c8.y
					    dp2add_sat_pp r0.y, r1, r1, c7.x
					    add_pp r0.y, -r0.y, c7.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mov r2.w, c7.y
					    dp4_pp r1.x, c1, r2
					    dp4_pp r1.y, c2, r2
					    dp4_pp r1.z, c3, r2
					    dp3_pp r0.y, r2, c0
					    max_pp r1.w, r0.y, c7.x
					    add_pp r0.yzw, r1.xxyz, v6.xxyz
					    max_pp r1.xyz, r0.yzww, c7.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r0.yzw, r2.xxyz, c8.z
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    mad_pp r0.yzw, r2.xxyz, c9.x, c9.y
					    max_pp r2.xyz, r0.yzww, c7.x
					    abs r0.y, c4.w
					    cmp_pp r0.yzw, -r0.y, r2.xxyz, r1.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    texldp_pp r2, v7, s0
					    mul_pp r2.xyz, r2.x, c5
					    mul_pp r1.xyz, r1, r2
					    mad_pp oC0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, c7.y
					
					// approximately 68 instruction slots used (10 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD3.w;
					        u_xlat10.y = vs_TEXCOORD4.w;
					        u_xlat10.z = vs_TEXCOORD5.w;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat10.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat5.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(u_xlat4, u_xlat3);
					        u_xlat4.y = dot(u_xlat5, u_xlat3);
					        u_xlat4.z = dot(u_xlat2, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(unity_SHAr, u_xlat3);
					        u_xlat4.y = dot(unity_SHAg, u_xlat3);
					        u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    }
					    u_xlat2.xyz = u_xlat4.xyz + vs_TEXCOORD6.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat4.xyz = log2(u_xlat2.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD3.w;
					        u_xlat10.y = vs_TEXCOORD4.w;
					        u_xlat10.z = vs_TEXCOORD5.w;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat10.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat5.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(u_xlat4, u_xlat3);
					        u_xlat4.y = dot(u_xlat5, u_xlat3);
					        u_xlat4.z = dot(u_xlat2, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(unity_SHAr, u_xlat3);
					        u_xlat4.y = dot(unity_SHAg, u_xlat3);
					        u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    }
					    u_xlat2.xyz = u_xlat4.xyz + vs_TEXCOORD6.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat4.xyz = log2(u_xlat2.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _LightColor0              c2       1
					//   _Depth                    c3       1
					//   unity_DynamicLightmap     s0       1
					//   _ShadowMapTexture         s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _Normal0                  s7       1
					//   _Normal1                  s8       1
					//   _Normal2                  s9       1
					//   _Normal3                  s10      1
					//
					
					    ps_3_0
					    def c4, 0, 1, -0.5, 0.5
					    def c5, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6
					    dcl_texcoord9 v7.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r2, v7.zwzw, s0
					    mul_pp r2.w, r2.w, c1.x
					    mul_pp r2.xyz, r2, r2.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c1.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mul_pp r2.xyz, r0, r3
					    texld r3, v1, s8
					    mul r3.xy, r1.y, r3.wyzw
					    texld r4, v0.zwzw, s7
					    mad_pp r1.xy, r1.x, r4.wyzw, r3
					    texld r3, v1.zwzw, s9
					    mad_pp r1.xy, r1.z, r3.wyzw, r1
					    texld r3, v2, s10
					    mad_pp r1.xy, r1.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c4.z
					    mad_pp r1.xy, r0.w, r1, c4.w
					    mad_pp r1.xy, r1, c5.x, c5.y
					    dp2add_sat_pp r0.w, r1, r1, c4.x
					    add_pp r0.w, -r0.w, c4.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v3, r1
					    dp3_pp r3.y, v4, r1
					    dp3_pp r3.z, v5, r1
					    dp3_pp r0.w, r3, c0
					    max_pp r1.x, r0.w, c4.x
					    texldp_pp r3, v6, s1
					    mul_pp r1.yzw, r3.x, c2.xxyz
					    mul_pp r0.xyz, r0, r1.yzww
					    mad_pp oC0.xyz, r0, r1.x, r2
					    mov_pp oC0.w, c4.y
					
					// approximately 61 instruction slots used (11 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   _LightShadowData     c1       1
					//   unity_Lightmap_HDR   c2       1
					//   _LightColor0         c3       1
					//   _Depth               c4       1
					//   unity_Lightmap       s0       1
					//   _ShadowMapTexture    s1       1
					//   _Control             s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//
					
					    ps_3_0
					    def c5, 0, 1, -0.5, 0.5
					    def c6, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xy
					    dcl_texcoord7 v7
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld r0, v1.zwzw, s9
					    texld r1, v0.zwzw, s7
					    texld r2, v1, s8
					    texld_pp r3, v1.zwzw, s5
					    texld_pp r4, v0, s2
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s6
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s4
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s3
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c5.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c4.x
					    max r5, r4, c5.x
					    dp4 r0.z, r5, c5.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s10
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c5.z
					    mad_pp r0.yz, r0.x, r0, c5.w
					    mad_pp r1.xy, r0.yzzw, c6.x, c6.y
					    dp2add_sat_pp r0.y, r1, r1, c5.x
					    add_pp r0.y, -r0.y, c5.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.y, r2, c0
					    max_pp r1.x, r0.y, c5.x
					    texldp_pp r2, v7, s1
					    add_pp r0.y, r2.x, -c1.x
					    add_pp r0.z, -r0.y, c5.y
					    cmp_pp r0.y, r0.y, r0.z, c5.y
					    mul_pp r0.y, r0.y, r1.x
					    texld_pp r1, v6, s0
					    pow_pp r0.z, r1.w, c2.y
					    mul_pp r0.z, r0.z, c2.x
					    mul_pp r2.yzw, r1.xxyz, r0.z
					    mul_pp r1.xyz, r2.x, r1
					    min_pp r5.xyz, r1, r2.yzww
					    mad_pp r0.yzw, r0.y, -c3.xxyz, r2
					    max_pp r1.xyz, r5, r0.yzww
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mul_pp oC0.xyz, r1, r0
					    mov_pp oC0.w, c5.y
					
					// approximately 62 instruction slots used (11 texture, 51 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat5.z = u_xlat3.w + u_xlat4.z;
					    u_xlat6 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.w = u_xlat4.w + u_xlat6.w;
					    u_xlat0.x = max(u_xlat5.w, u_xlat5.z);
					    u_xlat7 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat5.y = u_xlat4.y + u_xlat7.w;
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.y);
					    u_xlat8 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat5.x = u_xlat4.x + u_xlat8.w;
					    u_xlat18 = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.x);
					    u_xlat4 = (-u_xlat0.xxxx) + u_xlat5;
					    u_xlat4 = u_xlat4 + vec4(_Depth);
					    u_xlat4 = max(u_xlat4, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0.x = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat4 = u_xlat4 / u_xlat0.xxxx;
					    u_xlat1.xz = u_xlat2.wy * u_xlat4.yy;
					    u_xlat1.xy = u_xlat4.xx * u_xlat1.wy + u_xlat1.xz;
					    u_xlat0.xy = u_xlat4.zz * u_xlat0.wy + u_xlat1.xy;
					    u_xlat1 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat4.ww * u_xlat1.wy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = vec2(u_xlat18) * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9.xz = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat9.xz);
					    u_xlat0.y = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat9.x = (-u_xlat0.y) + 1.0;
					    u_xlat0.x = u_xlat9.x * u_xlat0.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat9.x = log2(u_xlat2.w);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.x;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat9.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat10.xyz, u_xlat2.xyz);
					    u_xlat0.xyw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat10.xyz;
					    u_xlat0.xyw = max(u_xlat0.xyw, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat4.yyy;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat5.z = u_xlat3.w + u_xlat4.z;
					    u_xlat6 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.w = u_xlat4.w + u_xlat6.w;
					    u_xlat0.x = max(u_xlat5.w, u_xlat5.z);
					    u_xlat7 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat5.y = u_xlat4.y + u_xlat7.w;
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.y);
					    u_xlat8 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat5.x = u_xlat4.x + u_xlat8.w;
					    u_xlat18 = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.x);
					    u_xlat4 = (-u_xlat0.xxxx) + u_xlat5;
					    u_xlat4 = u_xlat4 + vec4(_Depth);
					    u_xlat4 = max(u_xlat4, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0.x = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat4 = u_xlat4 / u_xlat0.xxxx;
					    u_xlat1.xz = u_xlat2.wy * u_xlat4.yy;
					    u_xlat1.xy = u_xlat4.xx * u_xlat1.wy + u_xlat1.xz;
					    u_xlat0.xy = u_xlat4.zz * u_xlat0.wy + u_xlat1.xy;
					    u_xlat1 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat4.ww * u_xlat1.wy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = vec2(u_xlat18) * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9.xz = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat9.xz);
					    u_xlat0.y = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat9.x = (-u_xlat0.y) + 1.0;
					    u_xlat0.x = u_xlat9.x * u_xlat0.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat9.x = log2(u_xlat2.w);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.x;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat9.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat10.xyz, u_xlat2.xyz);
					    u_xlat0.xyw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat10.xyz;
					    u_xlat0.xyw = max(u_xlat0.xyw, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat4.yyy;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   _LightShadowData          c1       1
					//   unity_Lightmap_HDR        c2       1
					//   unity_DynamicLightmap_HDR c3       1
					//   _LightColor0              c4       1
					//   _Depth                    c5       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _ShadowMapTexture         s2       1
					//   _Control                  s3       1
					//   _Splat0                   s4       1
					//   _Splat1                   s5       1
					//   _Splat2                   s6       1
					//   _Splat3                   s7       1
					//   _Normal0                  s8       1
					//   _Normal1                  s9       1
					//   _Normal2                  s10      1
					//   _Normal3                  s11      1
					//
					
					    ps_3_0
					    def c6, 0, 1, -0.5, 0.5
					    def c7, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    texld r0, v1.zwzw, s10
					    texld r1, v0.zwzw, s8
					    texld r2, v1, s9
					    texld_pp r3, v1.zwzw, s6
					    texld_pp r4, v0, s3
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s7
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s5
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s4
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c6.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c5.x
					    max r5, r4, c6.x
					    dp4 r0.z, r5, c6.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s11
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c6.z
					    mad_pp r0.yz, r0.x, r0, c6.w
					    mad_pp r1.xy, r0.yzzw, c7.x, c7.y
					    dp2add_sat_pp r0.y, r1, r1, c6.x
					    add_pp r0.y, -r0.y, c6.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.y, r2, c0
					    max_pp r1.x, r0.y, c6.x
					    texldp_pp r2, v7, s2
					    add_pp r0.y, r2.x, -c1.x
					    add_pp r0.z, -r0.y, c6.y
					    cmp_pp r0.y, r0.y, r0.z, c6.y
					    mul_pp r0.y, r0.y, r1.x
					    texld_pp r1, v6, s0
					    pow_pp r0.z, r1.w, c2.y
					    mul_pp r0.z, r0.z, c2.x
					    mul_pp r2.yzw, r1.xxyz, r0.z
					    mul_pp r1.xyz, r2.x, r1
					    min_pp r5.xyz, r1, r2.yzww
					    mad_pp r0.yzw, r0.y, -c4.xxyz, r2
					    max_pp r1.xyz, r5, r0.yzww
					    texld_pp r2, v6.zwzw, s1
					    mul_pp r0.y, r2.w, c3.x
					    mul_pp r0.yzw, r2.xxyz, r0.y
					    log_pp r2.x, r0.y
					    log_pp r2.y, r0.z
					    log_pp r2.z, r0.w
					    mul_pp r0.yzw, r2.xxyz, c3.y
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    add_pp r0.yzw, r1.xxyz, r2.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp oC0.xyz, r0.yzww, r1
					    mov_pp oC0.w, c6.y
					
					// approximately 73 instruction slots used (12 texture, 61 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = (-u_xlat11.x) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat11.x = log2(u_xlat3.w);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.y;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.x;
					    u_xlat11.xyz = u_xlat3.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat2.xyz = min(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat11.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = max(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat11.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat11.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat11.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = (-u_xlat11.x) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat11.x = log2(u_xlat3.w);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.y;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.x;
					    u_xlat11.xyz = u_xlat3.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat2.xyz = min(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat11.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = max(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat11.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat11.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat11.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _WorldSpaceLightPos0        c0       1
					//   unity_DynamicLightmap_HDR   c1       1
					//   _LightColor0                c2       1
					//   _Depth                      c3       1
					//   unity_DynamicLightmap       s0       1
					//   unity_DynamicDirectionality s1       1
					//   _ShadowMapTexture           s2       1
					//   _Control                    s3       1
					//   _Splat0                     s4       1
					//   _Splat1                     s5       1
					//   _Splat2                     s6       1
					//   _Splat3                     s7       1
					//   _Normal0                    s8       1
					//   _Normal1                    s9       1
					//   _Normal2                    s10      1
					//   _Normal3                    s11      1
					//
					
					    ps_3_0
					    def c4, 0, 1, -0.5, 0.5
					    def c5, 2, -1, 9.99999975e-005, 10000
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6
					    dcl_texcoord9 v7.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    texld_pp r0, v7.zwzw, s0
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c1.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld r0, v1.zwzw, s10
					    texld r2, v0.zwzw, s8
					    texld r3, v1, s9
					    texld_pp r4, v1.zwzw, s6
					    texld_pp r5, v0, s3
					    add r6.z, r4.w, r5.z
					    texld_pp r7, v2, s7
					    add r6.w, r5.w, r7.w
					    max r0.x, r6.z, r6.w
					    texld_pp r8, v1, s5
					    add r6.y, r5.y, r8.w
					    max r1.w, r6.y, r0.x
					    texld_pp r9, v0.zwzw, s4
					    add r6.x, r5.x, r9.w
					    dp4_pp r0.x, r5, c4.y
					    max r0.z, r6.x, r1.w
					    add r5, -r0.z, r6
					    add r5, r5, c3.x
					    max r6, r5, c4.x
					    dp4 r0.z, r6, c4.y
					    rcp r0.z, r0.z
					    mul r5, r0.z, r6
					    mul r2.xz, r3.wyyw, r5.y
					    mad_pp r2.xy, r5.x, r2.wyzw, r2.xzzw
					    mad_pp r0.yz, r5.z, r0.xwyw, r2.xxyw
					    texld r2, v2, s11
					    mad_pp r0.yz, r5.w, r2.xwyw, r0
					    add_pp r0.yz, r0, c4.z
					    mad_pp r0.yz, r0.x, r0, c4.w
					    mad_pp r2.xy, r0.yzzw, c5.x, c5.y
					    dp2add_sat_pp r0.y, r2, r2, c4.x
					    add_pp r0.y, -r0.y, c4.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r2.z, r0.y
					    dp3_pp r3.x, v3, r2
					    dp3_pp r3.y, v4, r2
					    dp3_pp r3.z, v5, r2
					    texld_pp r2, v7.zwzw, s1
					    add_pp r0.yzw, r2.xxyz, c4.z
					    dp3_pp r0.y, r3, r0.yzww
					    dp3_pp r0.z, r3, c0
					    max_pp r1.w, r0.z, c4.x
					    add_pp r0.y, r0.y, c4.w
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    add r1.x, -r2.w, c5.z
					    rcp r1.y, r2.w
					    cmp r1.x, r1.x, c5.w, r1.y
					    mul_pp r0.yzw, r0, r1.x
					    mul r1.xyz, r8, r5.y
					    mad_pp r1.xyz, r5.x, r9, r1
					    mad_pp r1.xyz, r5.z, r4, r1
					    mad_pp r1.xyz, r5.w, r7, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    texldp_pp r2, v6, s2
					    mul_pp r2.xyz, r2.x, c2
					    mul_pp r1.xyz, r1, r2
					    mad_pp oC0.xyz, r1, r1.w, r0
					    mov_pp oC0.w, c4.y
					
					// approximately 70 instruction slots used (12 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_SHAr                c1       1
					//   unity_SHAg                c2       1
					//   unity_SHAb                c3       1
					//   unity_FogColor            c4       1
					//   unity_FogParams           c5       1
					//   unity_ColorSpaceLuminance c6       1
					//   _LightColor0              c7       1
					//   _Depth                    c8       1
					//   _Control                  s0       1
					//   _Splat0                   s1       1
					//   _Splat1                   s2       1
					//   _Splat2                   s3       1
					//   _Splat3                   s4       1
					//   _Normal0                  s5       1
					//   _Normal1                  s6       1
					//   _Normal2                  s7       1
					//   _Normal3                  s8       1
					//
					
					    ps_3_0
					    def c9, 0, 1, -0.5, 0.5
					    def c10, 2, -1, 0.416666657, 0
					    def c11, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld r0, v1.zwzw, s7
					    texld r1, v0.zwzw, s5
					    texld r2, v1, s6
					    texld_pp r3, v1.zwzw, s3
					    texld_pp r4, v0, s0
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s4
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s2
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s1
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c9.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c8.x
					    max r5, r4, c9.x
					    dp4 r0.z, r5, c9.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s8
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c9.z
					    mad_pp r0.yz, r0.x, r0, c9.w
					    mad_pp r1.xy, r0.yzzw, c10.x, c10.y
					    dp2add_sat_pp r0.y, r1, r1, c9.x
					    add_pp r0.y, -r0.y, c9.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mov r2.w, c9.y
					    dp4_pp r1.x, c1, r2
					    dp4_pp r1.y, c2, r2
					    dp4_pp r1.z, c3, r2
					    dp3_pp r0.y, r2, c0
					    max_pp r1.w, r0.y, c9.x
					    add_pp r0.yzw, r1.xxyz, v6.xxyz
					    max_pp r1.xyz, r0.yzww, c9.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r0.yzw, r2.xxyz, c10.z
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    mad_pp r0.yzw, r2.xxyz, c11.x, c11.y
					    max_pp r2.xyz, r0.yzww, c9.x
					    abs r0.y, c6.w
					    cmp_pp r0.yzw, -r0.y, r2.xxyz, r1.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    mul_pp r1.xyz, r1, c7
					    mad_pp r0.xyz, r1, r1.w, r0
					    add r0.xyz, r0, -c4
					    mul r0.w, c5.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c4
					    mov_pp oC0.w, c9.y
					
					// approximately 71 instruction slots used (9 texture, 62 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat2.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_FogColor            c1       1
					//   unity_FogParams           c2       1
					//   unity_DynamicLightmap_HDR c3       1
					//   _LightColor0              c4       1
					//   _Depth                    c5       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _Normal0                  s6       1
					//   _Normal1                  s7       1
					//   _Normal2                  s8       1
					//   _Normal3                  s9       1
					//
					
					    ps_3_0
					    def c6, 0, 1, -0.5, 0.5
					    def c7, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord8 v6.x
					    dcl_texcoord9 v7.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c6.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c5.x
					    max r2, r1, c6.x
					    dp4 r1.x, r2, c6.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r2, v7.zwzw, s0
					    mul_pp r2.w, r2.w, c3.x
					    mul_pp r2.xyz, r2, r2.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c3.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mul_pp r2.xyz, r0, r3
					    mul_pp r0.xyz, r0, c4
					    texld r3, v1, s7
					    mul r3.xy, r1.y, r3.wyzw
					    texld r4, v0.zwzw, s6
					    mad_pp r1.xy, r1.x, r4.wyzw, r3
					    texld r3, v1.zwzw, s8
					    mad_pp r1.xy, r1.z, r3.wyzw, r1
					    texld r3, v2, s9
					    mad_pp r1.xy, r1.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c6.z
					    mad_pp r1.xy, r0.w, r1, c6.w
					    mad_pp r1.xy, r1, c7.x, c7.y
					    dp2add_sat_pp r0.w, r1, r1, c6.x
					    add_pp r0.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v3, r1
					    dp3_pp r3.y, v4, r1
					    dp3_pp r3.z, v5, r1
					    dp3_pp r0.w, r3, c0
					    max_pp r1.x, r0.w, c6.x
					    mad_pp r0.xyz, r0, r1.x, r2
					    add r0.xyz, r0, -c1
					    mul r0.w, c2.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c6.y
					
					// approximately 64 instruction slots used (10 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_FogColor     c0       1
					//   unity_FogParams    c1       1
					//   unity_Lightmap_HDR c2       1
					//   _Depth             c3       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord6 v3.xy
					    dcl_texcoord8 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v3, s0
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r1.xyz, r1, r0.w
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 36 instruction slots used (6 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_Lightmap_HDR        c2       1
					//   unity_DynamicLightmap_HDR c3       1
					//   _Depth                    c4       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//
					
					    ps_3_0
					    def c5, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord6 v3
					    dcl_texcoord8 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c5.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c4.x
					    max r2, r1, c5.x
					    dp4 r1.x, r2, c5.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v3.zwzw, s1
					    mul_pp r0.w, r1.w, c3.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c3.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r1, v3, s0
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mad_pp r1.xyz, r0.w, r1, r2
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c5.y
					
					// approximately 46 instruction slots used (7 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _WorldSpaceLightPos0        c0       1
					//   unity_FogColor              c1       1
					//   unity_FogParams             c2       1
					//   unity_DynamicLightmap_HDR   c3       1
					//   _LightColor0                c4       1
					//   _Depth                      c5       1
					//   unity_DynamicLightmap       s0       1
					//   unity_DynamicDirectionality s1       1
					//   _Control                    s2       1
					//   _Splat0                     s3       1
					//   _Splat1                     s4       1
					//   _Splat2                     s5       1
					//   _Splat3                     s6       1
					//   _Normal0                    s7       1
					//   _Normal1                    s8       1
					//   _Normal2                    s9       1
					//   _Normal3                    s10      1
					//
					
					    ps_3_0
					    def c6, 2, -1, 9.99999975e-005, 10000
					    def c7, 0, 1, -0.5, 0.5
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord8 v6.x
					    dcl_texcoord9 v7.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld_pp r0, v7.zwzw, s0
					    mul_pp r0.w, r0.w, c3.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c3.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld r0, v1.zwzw, s9
					    texld r2, v0.zwzw, s7
					    texld r3, v1, s8
					    texld_pp r4, v1.zwzw, s5
					    texld_pp r5, v0, s2
					    add r6.z, r4.w, r5.z
					    texld_pp r7, v2, s6
					    add r6.w, r5.w, r7.w
					    max r0.x, r6.z, r6.w
					    texld_pp r8, v1, s4
					    add r6.y, r5.y, r8.w
					    max r1.w, r6.y, r0.x
					    texld_pp r9, v0.zwzw, s3
					    add r6.x, r5.x, r9.w
					    dp4_pp r0.x, r5, c7.y
					    max r0.z, r6.x, r1.w
					    add r5, -r0.z, r6
					    add r5, r5, c5.x
					    max r6, r5, c7.x
					    dp4 r0.z, r6, c7.y
					    rcp r0.z, r0.z
					    mul r5, r0.z, r6
					    mul r2.xz, r3.wyyw, r5.y
					    mad_pp r2.xy, r5.x, r2.wyzw, r2.xzzw
					    mad_pp r0.yz, r5.z, r0.xwyw, r2.xxyw
					    texld r2, v2, s10
					    mad_pp r0.yz, r5.w, r2.xwyw, r0
					    add_pp r0.yz, r0, c7.z
					    mad_pp r0.yz, r0.x, r0, c7.w
					    mad_pp r2.xy, r0.yzzw, c6.x, c6.y
					    dp2add_sat_pp r0.y, r2, r2, c7.x
					    add_pp r0.y, -r0.y, c7.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r2.z, r0.y
					    dp3_pp r3.x, v3, r2
					    dp3_pp r3.y, v4, r2
					    dp3_pp r3.z, v5, r2
					    texld_pp r2, v7.zwzw, s1
					    add_pp r0.yzw, r2.xxyz, c7.z
					    dp3_pp r0.y, r3, r0.yzww
					    dp3_pp r0.z, r3, c0
					    max_pp r1.w, r0.z, c7.x
					    add_pp r0.y, r0.y, c7.w
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    add r1.x, -r2.w, c6.z
					    rcp r1.y, r2.w
					    cmp r1.x, r1.x, c6.w, r1.y
					    mul_pp r0.yzw, r0, r1.x
					    mul r1.xyz, r8, r5.y
					    mad_pp r1.xyz, r5.x, r9, r1
					    mad_pp r1.xyz, r5.z, r4, r1
					    mad_pp r1.xyz, r5.w, r7, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    mul_pp r1.xyz, r1, c4
					    mad_pp r0.xyz, r1, r1.w, r0
					    add r0.xyz, r0, -c1
					    mul r0.w, c2.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c7.y
					
					// approximately 73 instruction slots used (11 texture, 62 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_SHAr                c1       1
					//   unity_SHAg                c2       1
					//   unity_SHAb                c3       1
					//   unity_FogColor            c4       1
					//   unity_FogParams           c5       1
					//   unity_ColorSpaceLuminance c6       1
					//   _LightColor0              c7       1
					//   _Depth                    c8       1
					//   _ShadowMapTexture         s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _Normal0                  s6       1
					//   _Normal1                  s7       1
					//   _Normal2                  s8       1
					//   _Normal3                  s9       1
					//
					
					    ps_3_0
					    def c9, 0, 1, -0.5, 0.5
					    def c10, 2, -1, 0.416666657, 0
					    def c11, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord7 v7
					    dcl_texcoord8 v8.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v1.zwzw, s8
					    texld r1, v0.zwzw, s6
					    texld r2, v1, s7
					    texld_pp r3, v1.zwzw, s4
					    texld_pp r4, v0, s1
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s5
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s3
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s2
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c9.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c8.x
					    max r5, r4, c9.x
					    dp4 r0.z, r5, c9.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s9
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c9.z
					    mad_pp r0.yz, r0.x, r0, c9.w
					    mad_pp r1.xy, r0.yzzw, c10.x, c10.y
					    dp2add_sat_pp r0.y, r1, r1, c9.x
					    add_pp r0.y, -r0.y, c9.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mov r2.w, c9.y
					    dp4_pp r1.x, c1, r2
					    dp4_pp r1.y, c2, r2
					    dp4_pp r1.z, c3, r2
					    dp3_pp r0.y, r2, c0
					    max_pp r1.w, r0.y, c9.x
					    add_pp r0.yzw, r1.xxyz, v6.xxyz
					    max_pp r1.xyz, r0.yzww, c9.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r0.yzw, r2.xxyz, c10.z
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    mad_pp r0.yzw, r2.xxyz, c11.x, c11.y
					    max_pp r2.xyz, r0.yzww, c9.x
					    abs r0.y, c6.w
					    cmp_pp r0.yzw, -r0.y, r2.xxyz, r1.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    texldp_pp r2, v7, s0
					    mul_pp r2.xyz, r2.x, c7
					    mul_pp r1.xyz, r1, r2
					    mad_pp r0.xyz, r1, r1.w, r0
					    add r0.xyz, r0, -c4
					    mul r0.w, c5.x, v8.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c4
					    mov_pp oC0.w, c9.y
					
					// approximately 73 instruction slots used (10 texture, 63 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD3.w;
					        u_xlat10.y = vs_TEXCOORD4.w;
					        u_xlat10.z = vs_TEXCOORD5.w;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat10.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat5.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(u_xlat4, u_xlat3);
					        u_xlat4.y = dot(u_xlat5, u_xlat3);
					        u_xlat4.z = dot(u_xlat2, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(unity_SHAr, u_xlat3);
					        u_xlat4.y = dot(unity_SHAg, u_xlat3);
					        u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    }
					    u_xlat2.xyz = u_xlat4.xyz + vs_TEXCOORD6.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat4.xyz = log2(u_xlat2.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[2];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					float u_xlat8;
					vec3 u_xlat10;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD3.w;
					        u_xlat10.y = vs_TEXCOORD4.w;
					        u_xlat10.z = vs_TEXCOORD5.w;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : u_xlat10.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat5.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(u_xlat4, u_xlat3);
					        u_xlat4.y = dot(u_xlat5, u_xlat3);
					        u_xlat4.z = dot(u_xlat2, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(unity_SHAr, u_xlat3);
					        u_xlat4.y = dot(unity_SHAg, u_xlat3);
					        u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    }
					    u_xlat2.xyz = u_xlat4.xyz + vs_TEXCOORD6.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat4.xyz = log2(u_xlat2.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   unity_FogColor            c1       1
					//   unity_FogParams           c2       1
					//   unity_DynamicLightmap_HDR c3       1
					//   _LightColor0              c4       1
					//   _Depth                    c5       1
					//   unity_DynamicLightmap     s0       1
					//   _ShadowMapTexture         s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _Normal0                  s7       1
					//   _Normal1                  s8       1
					//   _Normal2                  s9       1
					//   _Normal3                  s10      1
					//
					
					    ps_3_0
					    def c6, 0, 1, -0.5, 0.5
					    def c7, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6
					    dcl_texcoord8 v7.x
					    dcl_texcoord9 v8.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c6.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c5.x
					    max r2, r1, c6.x
					    dp4 r1.x, r2, c6.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r2, v8.zwzw, s0
					    mul_pp r2.w, r2.w, c3.x
					    mul_pp r2.xyz, r2, r2.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c3.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mul_pp r2.xyz, r0, r3
					    texld r3, v1, s8
					    mul r3.xy, r1.y, r3.wyzw
					    texld r4, v0.zwzw, s7
					    mad_pp r1.xy, r1.x, r4.wyzw, r3
					    texld r3, v1.zwzw, s9
					    mad_pp r1.xy, r1.z, r3.wyzw, r1
					    texld r3, v2, s10
					    mad_pp r1.xy, r1.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c6.z
					    mad_pp r1.xy, r0.w, r1, c6.w
					    mad_pp r1.xy, r1, c7.x, c7.y
					    dp2add_sat_pp r0.w, r1, r1, c6.x
					    add_pp r0.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v3, r1
					    dp3_pp r3.y, v4, r1
					    dp3_pp r3.z, v5, r1
					    dp3_pp r0.w, r3, c0
					    max_pp r1.x, r0.w, c6.x
					    texldp_pp r3, v6, s1
					    mul_pp r1.yzw, r3.x, c4.xxyz
					    mul_pp r0.xyz, r0, r1.yzww
					    mad_pp r0.xyz, r0, r1.x, r2
					    add r0.xyz, r0, -c1
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c6.y
					
					// approximately 66 instruction slots used (11 texture, 55 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat21 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat4 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.xx * u_xlat4.wy + u_xlat3.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat2.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat2.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = vec2(u_xlat22) * u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat2.z = sqrt(u_xlat21);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   _LightShadowData     c1       1
					//   unity_FogColor       c2       1
					//   unity_FogParams      c3       1
					//   unity_Lightmap_HDR   c4       1
					//   _LightColor0         c5       1
					//   _Depth               c6       1
					//   unity_Lightmap       s0       1
					//   _ShadowMapTexture    s1       1
					//   _Control             s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//
					
					    ps_3_0
					    def c7, 0, 1, -0.5, 0.5
					    def c8, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xy
					    dcl_texcoord7 v7
					    dcl_texcoord8 v8.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld r0, v1.zwzw, s9
					    texld r1, v0.zwzw, s7
					    texld r2, v1, s8
					    texld_pp r3, v1.zwzw, s5
					    texld_pp r4, v0, s2
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s6
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s4
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s3
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c7.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c6.x
					    max r5, r4, c7.x
					    dp4 r0.z, r5, c7.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s10
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c7.z
					    mad_pp r0.yz, r0.x, r0, c7.w
					    mad_pp r1.xy, r0.yzzw, c8.x, c8.y
					    dp2add_sat_pp r0.y, r1, r1, c7.x
					    add_pp r0.y, -r0.y, c7.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.y, r2, c0
					    max_pp r1.x, r0.y, c7.x
					    texldp_pp r2, v7, s1
					    add_pp r0.y, r2.x, -c1.x
					    add_pp r0.z, -r0.y, c7.y
					    cmp_pp r0.y, r0.y, r0.z, c7.y
					    mul_pp r0.y, r0.y, r1.x
					    texld_pp r1, v6, s0
					    pow_pp r0.z, r1.w, c4.y
					    mul_pp r0.z, r0.z, c4.x
					    mul_pp r2.yzw, r1.xxyz, r0.z
					    mul_pp r1.xyz, r2.x, r1
					    min_pp r5.xyz, r1, r2.yzww
					    mad_pp r0.yzw, r0.y, -c5.xxyz, r2
					    max_pp r1.xyz, r5, r0.yzww
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mad r0.xyz, r0, r1, -c2
					    mul r0.w, c3.x, v8.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c7.y
					
					// approximately 66 instruction slots used (11 texture, 55 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat18;
					float u_xlat27;
					void main()
					{
					    u_xlat0 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat5.z = u_xlat3.w + u_xlat4.z;
					    u_xlat6 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.w = u_xlat4.w + u_xlat6.w;
					    u_xlat0.x = max(u_xlat5.w, u_xlat5.z);
					    u_xlat7 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat5.y = u_xlat4.y + u_xlat7.w;
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.y);
					    u_xlat8 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat5.x = u_xlat4.x + u_xlat8.w;
					    u_xlat18 = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.x);
					    u_xlat4 = (-u_xlat0.xxxx) + u_xlat5;
					    u_xlat4 = u_xlat4 + vec4(_Depth);
					    u_xlat4 = max(u_xlat4, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0.x = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat4 = u_xlat4 / u_xlat0.xxxx;
					    u_xlat1.xz = u_xlat2.wy * u_xlat4.yy;
					    u_xlat1.xy = u_xlat4.xx * u_xlat1.wy + u_xlat1.xz;
					    u_xlat0.xy = u_xlat4.zz * u_xlat0.wy + u_xlat1.xy;
					    u_xlat1 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat4.ww * u_xlat1.wy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = vec2(u_xlat18) * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9.xz = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat9.xz);
					    u_xlat0.y = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat9.x = (-u_xlat0.y) + 1.0;
					    u_xlat0.x = u_xlat9.x * u_xlat0.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat9.x = log2(u_xlat2.w);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.x;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat9.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat10.xyz, u_xlat2.xyz);
					    u_xlat0.xyw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat10.xyz;
					    u_xlat0.xyw = max(u_xlat0.xyw, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat4.yyy;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyw + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat18;
					float u_xlat27;
					void main()
					{
					    u_xlat0 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat5.z = u_xlat3.w + u_xlat4.z;
					    u_xlat6 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.w = u_xlat4.w + u_xlat6.w;
					    u_xlat0.x = max(u_xlat5.w, u_xlat5.z);
					    u_xlat7 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat5.y = u_xlat4.y + u_xlat7.w;
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.y);
					    u_xlat8 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat5.x = u_xlat4.x + u_xlat8.w;
					    u_xlat18 = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0.x = max(u_xlat0.x, u_xlat5.x);
					    u_xlat4 = (-u_xlat0.xxxx) + u_xlat5;
					    u_xlat4 = u_xlat4 + vec4(_Depth);
					    u_xlat4 = max(u_xlat4, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0.x = dot(u_xlat4, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat4 = u_xlat4 / u_xlat0.xxxx;
					    u_xlat1.xz = u_xlat2.wy * u_xlat4.yy;
					    u_xlat1.xy = u_xlat4.xx * u_xlat1.wy + u_xlat1.xz;
					    u_xlat0.xy = u_xlat4.zz * u_xlat0.wy + u_xlat1.xy;
					    u_xlat1 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat4.ww * u_xlat1.wy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = vec2(u_xlat18) * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.z = sqrt(u_xlat0.x);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9.xz = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat9.xz);
					    u_xlat0.y = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat9.x = (-u_xlat0.y) + 1.0;
					    u_xlat0.x = u_xlat9.x * u_xlat0.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat9.x = log2(u_xlat2.w);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.y;
					    u_xlat9.x = exp2(u_xlat9.x);
					    u_xlat9.x = u_xlat9.x * unity_Lightmap_HDR.x;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat9.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat10.xyz, u_xlat2.xyz);
					    u_xlat0.xyw = (-u_xlat0.xxx) * _LightColor0.xyz + u_xlat10.xyz;
					    u_xlat0.xyw = max(u_xlat0.xyw, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat4.yyy;
					    u_xlat1.xyz = u_xlat4.xxx * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat4.www * u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyw + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    SV_Target0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceLightPos0      c0       1
					//   _LightShadowData          c1       1
					//   unity_FogColor            c2       1
					//   unity_FogParams           c3       1
					//   unity_Lightmap_HDR        c4       1
					//   unity_DynamicLightmap_HDR c5       1
					//   _LightColor0              c6       1
					//   _Depth                    c7       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _ShadowMapTexture         s2       1
					//   _Control                  s3       1
					//   _Splat0                   s4       1
					//   _Splat1                   s5       1
					//   _Splat2                   s6       1
					//   _Splat3                   s7       1
					//   _Normal0                  s8       1
					//   _Normal1                  s9       1
					//   _Normal2                  s10      1
					//   _Normal3                  s11      1
					//
					
					    ps_3_0
					    def c8, 0, 1, -0.5, 0.5
					    def c9, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7
					    dcl_texcoord8 v8.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    texld r0, v1.zwzw, s10
					    texld r1, v0.zwzw, s8
					    texld r2, v1, s9
					    texld_pp r3, v1.zwzw, s6
					    texld_pp r4, v0, s3
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s7
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s5
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s4
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c8.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c7.x
					    max r5, r4, c8.x
					    dp4 r0.z, r5, c8.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s11
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c8.z
					    mad_pp r0.yz, r0.x, r0, c8.w
					    mad_pp r1.xy, r0.yzzw, c9.x, c9.y
					    dp2add_sat_pp r0.y, r1, r1, c8.x
					    add_pp r0.y, -r0.y, c8.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.y, r2, c0
					    max_pp r1.x, r0.y, c8.x
					    texldp_pp r2, v7, s2
					    add_pp r0.y, r2.x, -c1.x
					    add_pp r0.z, -r0.y, c8.y
					    cmp_pp r0.y, r0.y, r0.z, c8.y
					    mul_pp r0.y, r0.y, r1.x
					    texld_pp r1, v6, s0
					    pow_pp r0.z, r1.w, c4.y
					    mul_pp r0.z, r0.z, c4.x
					    mul_pp r2.yzw, r1.xxyz, r0.z
					    mul_pp r1.xyz, r2.x, r1
					    min_pp r5.xyz, r1, r2.yzww
					    mad_pp r0.yzw, r0.y, -c6.xxyz, r2
					    max_pp r1.xyz, r5, r0.yzww
					    texld_pp r2, v6.zwzw, s1
					    mul_pp r0.y, r2.w, c5.x
					    mul_pp r0.yzw, r2.xxyz, r0.y
					    log_pp r2.x, r0.y
					    log_pp r2.y, r0.z
					    log_pp r2.z, r0.w
					    mul_pp r0.yzw, r2.xxyz, c5.y
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    add_pp r0.yzw, r1.xxyz, r2.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mad r0.xyz, r1, r0.yzww, -c2
					    mul r0.w, c3.x, v8.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c8.y
					
					// approximately 77 instruction slots used (12 texture, 65 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = (-u_xlat11.x) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat11.x = log2(u_xlat3.w);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.y;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.x;
					    u_xlat11.xyz = u_xlat3.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat2.xyz = min(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat11.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = max(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat11.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat11.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Depth;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat30 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat11.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat11.xy);
					    u_xlat11.x = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = (-u_xlat11.x) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat11.x = log2(u_xlat3.w);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.y;
					    u_xlat11.x = exp2(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x * unity_Lightmap_HDR.x;
					    u_xlat11.xyz = u_xlat3.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat2.xyz = min(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat11.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = max(u_xlat11.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat11.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat11.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _ShadowMapTexture;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _WorldSpaceLightPos0        c0       1
					//   unity_FogColor              c1       1
					//   unity_FogParams             c2       1
					//   unity_DynamicLightmap_HDR   c3       1
					//   _LightColor0                c4       1
					//   _Depth                      c5       1
					//   unity_DynamicLightmap       s0       1
					//   unity_DynamicDirectionality s1       1
					//   _ShadowMapTexture           s2       1
					//   _Control                    s3       1
					//   _Splat0                     s4       1
					//   _Splat1                     s5       1
					//   _Splat2                     s6       1
					//   _Splat3                     s7       1
					//   _Normal0                    s8       1
					//   _Normal1                    s9       1
					//   _Normal2                    s10      1
					//   _Normal3                    s11      1
					//
					
					    ps_3_0
					    def c6, 2, -1, 9.99999975e-005, 10000
					    def c7, 0, 1, -0.5, 0.5
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6
					    dcl_texcoord8 v7.x
					    dcl_texcoord9 v8.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    texld_pp r0, v8.zwzw, s0
					    mul_pp r0.w, r0.w, c3.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c3.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld r0, v1.zwzw, s10
					    texld r2, v0.zwzw, s8
					    texld r3, v1, s9
					    texld_pp r4, v1.zwzw, s6
					    texld_pp r5, v0, s3
					    add r6.z, r4.w, r5.z
					    texld_pp r7, v2, s7
					    add r6.w, r5.w, r7.w
					    max r0.x, r6.z, r6.w
					    texld_pp r8, v1, s5
					    add r6.y, r5.y, r8.w
					    max r1.w, r6.y, r0.x
					    texld_pp r9, v0.zwzw, s4
					    add r6.x, r5.x, r9.w
					    dp4_pp r0.x, r5, c7.y
					    max r0.z, r6.x, r1.w
					    add r5, -r0.z, r6
					    add r5, r5, c5.x
					    max r6, r5, c7.x
					    dp4 r0.z, r6, c7.y
					    rcp r0.z, r0.z
					    mul r5, r0.z, r6
					    mul r2.xz, r3.wyyw, r5.y
					    mad_pp r2.xy, r5.x, r2.wyzw, r2.xzzw
					    mad_pp r0.yz, r5.z, r0.xwyw, r2.xxyw
					    texld r2, v2, s11
					    mad_pp r0.yz, r5.w, r2.xwyw, r0
					    add_pp r0.yz, r0, c7.z
					    mad_pp r0.yz, r0.x, r0, c7.w
					    mad_pp r2.xy, r0.yzzw, c6.x, c6.y
					    dp2add_sat_pp r0.y, r2, r2, c7.x
					    add_pp r0.y, -r0.y, c7.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r2.z, r0.y
					    dp3_pp r3.x, v3, r2
					    dp3_pp r3.y, v4, r2
					    dp3_pp r3.z, v5, r2
					    texld_pp r2, v8.zwzw, s1
					    add_pp r0.yzw, r2.xxyz, c7.z
					    dp3_pp r0.y, r3, r0.yzww
					    dp3_pp r0.z, r3, c0
					    max_pp r1.w, r0.z, c7.x
					    add_pp r0.y, r0.y, c7.w
					    mul_pp r0.yzw, r0.y, r1.xxyz
					    add r1.x, -r2.w, c6.z
					    rcp r1.y, r2.w
					    cmp r1.x, r1.x, c6.w, r1.y
					    mul_pp r0.yzw, r0, r1.x
					    mul r1.xyz, r8, r5.y
					    mad_pp r1.xyz, r5.x, r9, r1
					    mad_pp r1.xyz, r5.z, r4, r1
					    mad_pp r1.xyz, r5.w, r7, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    texldp_pp r2, v6, s2
					    mul_pp r2.xyz, r2.x, c4
					    mul_pp r1.xyz, r1, r2
					    mad_pp r0.xyz, r1, r1.w, r0
					    add r0.xyz, r0, -c1
					    mul r0.w, c2.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c7.y
					
					// approximately 75 instruction slots used (12 texture, 63 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_3;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD9;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat21;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = texture(unity_DynamicLightmap, vs_TEXCOORD9.zw);
					    u_xlat30 = u_xlat0.w * unity_DynamicLightmap_HDR.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat1 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat5 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat6.z = u_xlat4.w + u_xlat5.z;
					    u_xlat7 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat6.w = u_xlat5.w + u_xlat7.w;
					    u_xlat30 = max(u_xlat6.w, u_xlat6.z);
					    u_xlat8 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat5.y + u_xlat8.w;
					    u_xlat30 = max(u_xlat30, u_xlat6.y);
					    u_xlat9 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat6.x = u_xlat5.x + u_xlat9.w;
					    u_xlat1.x = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat30 = max(u_xlat30, u_xlat6.x);
					    u_xlat5 = (-vec4(u_xlat30)) + u_xlat6;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat30 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat30);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat11.xy = u_xlat5.zz * u_xlat1.wy + u_xlat2.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat11.xy = u_xlat5.ww * u_xlat2.wy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat11.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xx * u_xlat11.xy + vec2(0.5, 0.5);
					    u_xlat2.xy = u_xlat11.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat30 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat30 = min(u_xlat30, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.z = sqrt(u_xlat30);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD9.zw);
					    u_xlat11.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat30 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat11.x = dot(u_xlat3.xyz, u_xlat11.xyz);
					    u_xlat21 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat11.x = u_xlat11.x + 0.5;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat30);
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat5.yyy;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat9.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.zzz * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat1.xyw = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyw;
					    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyw * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
  ZWrite Off
  Blend One One
  GpuProgramID 101907
Program "vp" {
SubProgram "d3d9 " {
Keywords { "POINT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord8 o8.x
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o7.x, c4, v0
					    dp4 o7.y, c5, v0
					    dp4 o7.z, c6, v0
					    mov o0.z, r0.x
					    mov o8.x, r0.x
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat4.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "POINT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Depth               c5       1
					//   _LightTexture0       s0       1
					//   _Control             s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//
					
					    ps_3_0
					    def c6, 0, 1, -0.5, 0.5
					    def c7, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    mad r0, v6.xyzx, c6.yyyx, c6.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp3 r0.x, r1, r1
					    texld_pp r0, r0.x, s0
					    mul_pp r0.xyz, r0.x, c4
					    texld_pp r1, v1.zwzw, s4
					    texld_pp r2, v0, s1
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s5
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s3
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s2
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c6.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c5.x
					    max r3, r2, c6.x
					    dp4 r1.w, r3, c6.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s7
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s6
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s8
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s9
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c6.z
					    mad_pp r1.xy, r0.w, r1, c6.w
					    mad_pp r1.xy, r1, c7.x, c7.y
					    dp2add_sat_pp r0.w, r1, r1, c6.x
					    add_pp r0.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    add r1.xyz, c3, -v6
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.w, r2, r3
					    max_pp r1.x, r0.w, c6.x
					    mul_pp oC0.xyz, r0, r1.x
					    mov_pp oC0.w, c6.y
					
					// approximately 59 instruction slots used (10 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   _LightColor0         c1       1
					//   _Depth               c2       1
					//   _Control             s0       1
					//   _Splat0              s1       1
					//   _Splat1              s2       1
					//   _Splat2              s3       1
					//   _Splat3              s4       1
					//   _Normal0             s5       1
					//   _Normal1             s6       1
					//   _Normal2             s7       1
					//   _Normal3             s8       1
					//
					
					    ps_3_0
					    def c3, 0, 1, -0.5, 0.5
					    def c4, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c3.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c2.x
					    max r2, r1, c3.x
					    dp4 r1.x, r2, c3.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r0.xyz, r0, c1
					    texld r2, v1, s6
					    mul r2.xy, r1.y, r2.wyzw
					    texld r3, v0.zwzw, s5
					    mad_pp r1.xy, r1.x, r3.wyzw, r2
					    texld r2, v1.zwzw, s7
					    mad_pp r1.xy, r1.z, r2.wyzw, r1
					    texld r2, v2, s8
					    mad_pp r1.xy, r1.w, r2.wyzw, r1
					    add_pp r1.xy, r1, c3.z
					    mad_pp r1.xy, r0.w, r1, c3.w
					    mad_pp r1.xy, r1, c4.x, c4.y
					    dp2add_sat_pp r0.w, r1, r1, c3.x
					    add_pp r0.w, -r0.w, c3.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.w, r2, c0
					    max_pp r1.x, r0.w, c3.x
					    mul_pp oC0.xyz, r0, r1.x
					    mov_pp oC0.w, c3.y
					
					// approximately 48 instruction slots used (9 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Depth;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Depth;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _Depth               c6       1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Control             s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//
					
					    ps_3_0
					    def c7, 0, 1, -0.5, 0.5
					    def c8, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    mad r0, v6.xyzx, c7.yyyx, c7.xxxy
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mad r0.xy, r2, r1.x, c7.w
					    dp3 r0.z, r2, r2
					    texld_pp r1, r0.z, s1
					    texld_pp r0, r0, s0
					    mul r0.x, r1.x, r0.w
					    mul_pp r0.xyz, r0.x, c5
					    cmp_pp r0.xyz, -r2.z, c7.x, r0
					    texld_pp r1, v1.zwzw, s5
					    texld_pp r2, v0, s2
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s6
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s4
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s3
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c7.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c6.x
					    max r3, r2, c7.x
					    dp4 r1.w, r3, c7.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s8
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s7
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s9
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s10
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c7.z
					    mad_pp r1.xy, r0.w, r1, c7.w
					    mad_pp r1.xy, r1, c8.x, c8.y
					    dp2add_sat_pp r0.w, r1, r1, c7.x
					    add_pp r0.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    add r1.xyz, c4, -v6
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.w, r2, r3
					    max_pp r1.x, r0.w, c7.x
					    mul_pp oC0.xyz, r0, r1.x
					    mov_pp oC0.w, c7.y
					
					// approximately 65 instruction slots used (11 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD6.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD6.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD6.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb21 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD6.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD6.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD6.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb21 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _Depth               c5       1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Control             s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//
					
					    ps_3_0
					    def c6, 0, 1, -0.5, 0.5
					    def c7, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    mad r0, v6.xyzx, c6.yyyx, c6.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp3 r0.x, r1, r1
					    texld r1, r1, s0
					    texld r0, r0.x, s1
					    mul_pp r0.x, r1.w, r0.x
					    mul_pp r0.xyz, r0.x, c4
					    texld_pp r1, v1.zwzw, s5
					    texld_pp r2, v0, s2
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s6
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s4
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s3
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c6.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c5.x
					    max r3, r2, c6.x
					    dp4 r1.w, r3, c6.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s8
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s7
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s9
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s10
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c6.z
					    mad_pp r1.xy, r0.w, r1, c6.w
					    mad_pp r1.xy, r1, c7.x, c7.y
					    dp2add_sat_pp r0.w, r1, r1, c6.x
					    add_pp r0.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    add r1.xyz, c3, -v6
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.w, r2, r3
					    max_pp r1.x, r0.w, c6.x
					    mul_pp oC0.xyz, r0, r1.x
					    mov_pp oC0.w, c6.y
					
					// approximately 61 instruction slots used (11 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceLightPos0 c2       1
					//   _LightColor0         c3       1
					//   _Depth               c4       1
					//   _LightTexture0       s0       1
					//   _Control             s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//
					
					    ps_3_0
					    def c5, 0, 1, -0.5, 0.5
					    def c6, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    mad r0, v6.xyzx, c5.yyyx, c5.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    texld_pp r0, r1, s0
					    mul_pp r0.xyz, r0.w, c3
					    texld_pp r1, v1.zwzw, s4
					    texld_pp r2, v0, s1
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s5
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s3
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s2
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c5.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c4.x
					    max r3, r2, c5.x
					    dp4 r1.w, r3, c5.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s7
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s6
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s8
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s9
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c5.z
					    mad_pp r1.xy, r0.w, r1, c5.w
					    mad_pp r1.xy, r1, c6.x, c6.y
					    dp2add_sat_pp r0.w, r1, r1, c5.x
					    add_pp r0.w, -r0.w, c5.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.w, r2, c2
					    max_pp r1.x, r0.w, c5.x
					    mul_pp oC0.xyz, r0, r1.x
					    mov_pp oC0.w, c5.y
					
					// approximately 53 instruction slots used (10 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD6.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * vs_TEXCOORD6.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * vs_TEXCOORD6.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + unity_WorldToLight[3].xy;
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD6.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * vs_TEXCOORD6.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * vs_TEXCOORD6.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + unity_WorldToLight[3].xy;
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    SV_Target0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _Depth               c6       1
					//   _LightTexture0       s0       1
					//   _Control             s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//
					
					    ps_3_0
					    def c7, 0, 1, -0.5, 0.5
					    def c8, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    mad r0, v6.xyzx, c7.yyyx, c7.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp3 r0.x, r1, r1
					    texld_pp r0, r0.x, s0
					    mul_pp r0.xyz, r0.x, c5
					    texld_pp r1, v1.zwzw, s4
					    texld_pp r2, v0, s1
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s5
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s3
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s2
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c7.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c6.x
					    max r3, r2, c7.x
					    dp4 r1.w, r3, c7.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s7
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s6
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s8
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s9
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c7.z
					    mad_pp r1.xy, r0.w, r1, c7.w
					    mad_pp r1.xy, r1, c8.x, c8.y
					    dp2add_sat_pp r0.w, r1, r1, c7.x
					    add_pp r0.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    add r1.xyz, c3, -v6
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.w, r2, r3
					    max_pp r1.x, r0.w, c7.x
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c4.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.y
					
					// approximately 63 instruction slots used (10 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xx);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceLightPos0 c0       1
					//   unity_FogParams      c1       1
					//   _LightColor0         c2       1
					//   _Depth               c3       1
					//   _Control             s0       1
					//   _Splat0              s1       1
					//   _Splat1              s2       1
					//   _Splat2              s3       1
					//   _Splat3              s4       1
					//   _Normal0             s5       1
					//   _Normal1             s6       1
					//   _Normal2             s7       1
					//   _Normal3             s8       1
					//
					
					    ps_3_0
					    def c4, 0, 1, -0.5, 0.5
					    def c5, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord8 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r0.xyz, r0, c2
					    texld r2, v1, s6
					    mul r2.xy, r1.y, r2.wyzw
					    texld r3, v0.zwzw, s5
					    mad_pp r1.xy, r1.x, r3.wyzw, r2
					    texld r2, v1.zwzw, s7
					    mad_pp r1.xy, r1.z, r2.wyzw, r1
					    texld r2, v2, s8
					    mad_pp r1.xy, r1.w, r2.wyzw, r1
					    add_pp r1.xy, r1, c4.z
					    mad_pp r1.xy, r0.w, r1, c4.w
					    mad_pp r1.xy, r1, c5.x, c5.y
					    dp2add_sat_pp r0.w, r1, r1, c4.x
					    add_pp r0.w, -r0.w, c4.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.w, r2, c0
					    max_pp r1.x, r0.w, c4.x
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c1.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c4.y
					
					// approximately 52 instruction slots used (9 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Depth;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _Depth;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat18 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _Depth               c7       1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Control             s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//
					
					    ps_3_0
					    def c8, 0, 1, -0.5, 0.5
					    def c9, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    mad r0, v6.xyzx, c8.yyyx, c8.xxxy
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mad r0.xy, r2, r1.x, c8.w
					    dp3 r0.z, r2, r2
					    texld_pp r1, r0.z, s1
					    texld_pp r0, r0, s0
					    mul r0.x, r1.x, r0.w
					    mul_pp r0.xyz, r0.x, c6
					    cmp_pp r0.xyz, -r2.z, c8.x, r0
					    texld_pp r1, v1.zwzw, s5
					    texld_pp r2, v0, s2
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s6
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s4
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s3
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c8.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c7.x
					    max r3, r2, c8.x
					    dp4 r1.w, r3, c8.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s8
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s7
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s9
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s10
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c8.z
					    mad_pp r1.xy, r0.w, r1, c8.w
					    mad_pp r1.xy, r1, c9.x, c9.y
					    dp2add_sat_pp r0.w, r1, r1, c8.x
					    add_pp r0.w, -r0.w, c8.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    add r1.xyz, c4, -v6
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.w, r2, r3
					    max_pp r1.x, r0.w, c8.x
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c5.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c8.y
					
					// approximately 69 instruction slots used (11 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD6.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD6.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD6.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb21 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD6.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD6.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD6.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb21 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _Depth               c6       1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Control             s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//
					
					    ps_3_0
					    def c7, 0, 1, -0.5, 0.5
					    def c8, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    mad r0, v6.xyzx, c7.yyyx, c7.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp3 r0.x, r1, r1
					    texld r1, r1, s0
					    texld r0, r0.x, s1
					    mul_pp r0.x, r1.w, r0.x
					    mul_pp r0.xyz, r0.x, c5
					    texld_pp r1, v1.zwzw, s5
					    texld_pp r2, v0, s2
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s6
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s4
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s3
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c7.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c6.x
					    max r3, r2, c7.x
					    dp4 r1.w, r3, c7.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s8
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s7
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s9
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s10
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c7.z
					    mad_pp r1.xy, r0.w, r1, c7.w
					    mad_pp r1.xy, r1, c8.x, c8.y
					    dp2add_sat_pp r0.w, r1, r1, c7.x
					    add_pp r0.w, -r0.w, c7.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    add r1.xyz, c3, -v6
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.w, r2, r3
					    max_pp r1.x, r0.w, c7.x
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c4.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.y
					
					// approximately 65 instruction slots used (11 texture, 54 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceLightPos0 c2       1
					//   unity_FogParams      c3       1
					//   _LightColor0         c4       1
					//   _Depth               c5       1
					//   _LightTexture0       s0       1
					//   _Control             s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//
					
					    ps_3_0
					    def c6, 0, 1, -0.5, 0.5
					    def c7, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    mad r0, v6.xyzx, c6.yyyx, c6.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    texld_pp r0, r1, s0
					    mul_pp r0.xyz, r0.w, c4
					    texld_pp r1, v1.zwzw, s4
					    texld_pp r2, v0, s1
					    add r3.z, r1.w, r2.z
					    texld_pp r4, v2, s5
					    add r3.w, r2.w, r4.w
					    max r0.w, r3.z, r3.w
					    texld_pp r5, v1, s3
					    add r3.y, r2.y, r5.w
					    max r1.w, r3.y, r0.w
					    texld_pp r6, v0.zwzw, s2
					    add r3.x, r2.x, r6.w
					    dp4_pp r0.w, r2, c6.y
					    max r2.x, r3.x, r1.w
					    add r2, -r2.x, r3
					    add r2, r2, c5.x
					    max r3, r2, c6.x
					    dp4 r1.w, r3, c6.y
					    rcp r1.w, r1.w
					    mul r2, r1.w, r3
					    mul r3.xyz, r5, r2.y
					    mad_pp r3.xyz, r2.x, r6, r3
					    mad_pp r1.xyz, r2.z, r1, r3
					    mad_pp r1.xyz, r2.w, r4, r1
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    texld r1, v1, s7
					    mul r1.xy, r1.wyzw, r2.y
					    texld r3, v0.zwzw, s6
					    mad_pp r1.xy, r2.x, r3.wyzw, r1
					    texld r3, v1.zwzw, s8
					    mad_pp r1.xy, r2.z, r3.wyzw, r1
					    texld r3, v2, s9
					    mad_pp r1.xy, r2.w, r3.wyzw, r1
					    add_pp r1.xy, r1, c6.z
					    mad_pp r1.xy, r0.w, r1, c6.w
					    mad_pp r1.xy, r1, c7.x, c7.y
					    dp2add_sat_pp r0.w, r1, r1, c6.x
					    add_pp r0.w, -r0.w, c6.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    dp3_pp r0.w, r2, c2
					    max_pp r1.x, r0.w, c6.x
					    mul_pp r0.xyz, r0, r1.x
					    mul r0.w, c3.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c6.y
					
					// approximately 57 instruction slots used (10 texture, 47 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD6.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * vs_TEXCOORD6.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * vs_TEXCOORD6.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + unity_WorldToLight[3].xy;
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						float _Depth;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD6.yy * unity_WorldToLight[1].xy;
					    u_xlat0.xy = unity_WorldToLight[0].xy * vs_TEXCOORD6.xx + u_xlat0.xy;
					    u_xlat0.xy = unity_WorldToLight[2].xy * vs_TEXCOORD6.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + unity_WorldToLight[3].xy;
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.www * _LightColor0.xyz;
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat3.z = u_xlat1.w + u_xlat2.z;
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat3.w = u_xlat2.w + u_xlat4.w;
					    u_xlat21 = max(u_xlat3.w, u_xlat3.z);
					    u_xlat5 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3.y = u_xlat2.y + u_xlat5.w;
					    u_xlat21 = max(u_xlat21, u_xlat3.y);
					    u_xlat6 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat3.x = u_xlat2.x + u_xlat6.w;
					    u_xlat22 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat21 = max(u_xlat21, u_xlat3.x);
					    u_xlat2 = (-vec4(u_xlat21)) + u_xlat3;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat21 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat21);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat2.yyy;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.zzz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat1.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat2.xx * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1.xy = u_xlat2.zz * u_xlat3.wy + u_xlat1.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat2.ww * u_xlat3.wy + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = vec2(u_xlat22) * u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat21 = min(u_xlat21, 1.0);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat1.z = sqrt(u_xlat21);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD8 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
  GpuProgramID 136461
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _Control_ST                c11      1
					//   _Splat0_ST                 c12      1
					//   _Splat1_ST                 c13      1
					//   _Splat2_ST                 c14      1
					//   _Splat3_ST                 c15      1
					//
					
					    vs_3_0
					    def c16, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    mad r0, v0.xyzx, c16.yyyx, c16.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mad o1.zw, v2.xyxy, c12.xyxy, c12
					    mad o2.xy, v2, c13, c13.zwzw
					    mad o2.zw, v2.xyxy, c14.xyxy, c14
					    mad o3.xy, v2, c15, c15.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0.xyz, c16.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c16.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 39 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Depth       c0       1
					//   _Control     s0       1
					//   _Splat0      s1       1
					//   _Splat1      s2       1
					//   _Splat2      s3       1
					//   _Splat3      s4       1
					//   _Normal0     s5       1
					//   _Normal1     s6       1
					//   _Normal2     s7       1
					//   _Normal3     s8       1
					//
					
					    ps_3_0
					    def c1, 0, 1, -0.5, 0.5
					    def c2, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r0.z, r0.w, r1.z
					    texld_pp r2, v2, s4
					    add r0.w, r1.w, r2.w
					    max r2.x, r0.z, r0.w
					    texld_pp r3, v1, s2
					    add r0.y, r1.y, r3.w
					    max r3.x, r0.y, r2.x
					    texld_pp r2, v0.zwzw, s1
					    add r0.x, r1.x, r2.w
					    dp4_pp r1.x, r1, c1.y
					    max r1.y, r0.x, r3.x
					    add r0, r0, -r1.y
					    add r0, r0, c0.x
					    max r2, r0, c1.x
					    dp4 r0.x, r2, c1.y
					    rcp r0.x, r0.x
					    mul r0, r0.x, r2
					    texld r2, v1, s6
					    mul r1.yz, r0.y, r2.xwyw
					    texld r2, v0.zwzw, s5
					    mad_pp r0.xy, r0.x, r2.wyzw, r1.yzzw
					    texld r2, v1.zwzw, s7
					    mad_pp r0.xy, r0.z, r2.wyzw, r0
					    texld r2, v2, s8
					    mad_pp r0.xy, r0.w, r2.wyzw, r0
					    add_pp r0.xy, r0, c1.z
					    mad_pp r0.xy, r1.x, r0, c1.w
					    mad_pp r0.xy, r0, c2.x, c2.y
					    dp2add_sat_pp r0.w, r0, r0, c1.x
					    add_pp r0.w, -r0.w, c1.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    dp3_pp r1.x, v3, r0
					    dp3_pp r1.y, v4, r0
					    dp3_pp r1.z, v5, r0
					    mad_pp oC0.xyz, r1, c1.w, c1.w
					    mov_pp oC0.w, c1.x
					
					// approximately 40 instruction slots used (9 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[5];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat0.z = u_xlat0.w + u_xlat1.z;
					    u_xlat2 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat0.w = u_xlat1.w + u_xlat2.w;
					    u_xlat2.x = max(u_xlat0.w, u_xlat0.z);
					    u_xlat3 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat0.y = u_xlat1.y + u_xlat3.w;
					    u_xlat2.x = max(u_xlat2.x, u_xlat0.y);
					    u_xlat3 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat0.x = u_xlat1.x + u_xlat3.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5.x = max(u_xlat2.x, u_xlat0.x);
					    u_xlat0 = u_xlat0 + (-u_xlat5.xxxx);
					    u_xlat0 = u_xlat0 + vec4(_Depth);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0 = u_xlat0 / u_xlat5.xxxx;
					    u_xlat2 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat5.xy = u_xlat0.yy * u_xlat2.wy;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat0.xy = u_xlat0.xx * u_xlat2.wy + u_xlat5.xy;
					    u_xlat2 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat0.xy = u_xlat0.zz * u_xlat2.wy + u_xlat0.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat0.ww * u_xlat2.wy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = u_xlat1.xx * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[5];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat0.z = u_xlat0.w + u_xlat1.z;
					    u_xlat2 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat0.w = u_xlat1.w + u_xlat2.w;
					    u_xlat2.x = max(u_xlat0.w, u_xlat0.z);
					    u_xlat3 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat0.y = u_xlat1.y + u_xlat3.w;
					    u_xlat2.x = max(u_xlat2.x, u_xlat0.y);
					    u_xlat3 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat0.x = u_xlat1.x + u_xlat3.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5.x = max(u_xlat2.x, u_xlat0.x);
					    u_xlat0 = u_xlat0 + (-u_xlat5.xxxx);
					    u_xlat0 = u_xlat0 + vec4(_Depth);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat5.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat0 = u_xlat0 / u_xlat5.xxxx;
					    u_xlat2 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat5.xy = u_xlat0.yy * u_xlat2.wy;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat0.xy = u_xlat0.xx * u_xlat2.wy + u_xlat5.xy;
					    u_xlat2 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat0.xy = u_xlat0.zz * u_xlat2.wy + u_xlat0.xy;
					    u_xlat2 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat0.xy = u_xlat0.ww * u_xlat2.wy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = u_xlat1.xx * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
  ZWrite Off
  GpuProgramID 203225
Program "vp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _Control_ST               c20      1
					//   _Splat0_ST                c21      1
					//   _Splat1_ST                c22      1
					//   _Splat2_ST                c23      1
					//   _Splat3_ST                c24      1
					//
					
					    vs_3_0
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    def c26, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad o1.xy, v2, c20, c20.zwzw
					    mad o1.zw, v2.xyxy, c21.xyxy, c21
					    mad o2.xy, v2, c22, c22.zwzw
					    mad o2.zw, v2.xyxy, c23.xyxy, c23
					    mad o3.xy, v2, c24, c24.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c26.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c26.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c26.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c26.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c26.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c25.x, c25.y
					    max r1.xyz, r1, c26.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6, c26.y
					
					// approximately 52 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat5.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat5.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat5.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat5.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   _Control_ST                   c14      1
					//   _Splat0_ST                    c15      1
					//   _Splat1_ST                    c16      1
					//   _Splat2_ST                    c17      1
					//   _Splat3_ST                    c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad o1.xy, v1, c14, c14.zwzw
					    mad o1.zw, v1.xyxy, c15.xyxy, c15
					    mad o2.xy, v1, c16, c16.zwzw
					    mad o2.zw, v1.xyxy, c17.xyxy, c17
					    mad o3.xy, v1, c18, c18.zwzw
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c19.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c19.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.zw, c19.y
					
					// approximately 28 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_6_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   unity_DynamicLightmapST       c14      1
					//   _Control_ST                   c15      1
					//   _Splat0_ST                    c16      1
					//   _Splat1_ST                    c17      1
					//   _Splat2_ST                    c18      1
					//   _Splat3_ST                    c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad o1.xy, v1, c15, c15.zwzw
					    mad o1.zw, v1.xyxy, c16.xyxy, c16
					    mad o2.xy, v1, c17, c17.zwzw
					    mad o2.zw, v1.xyxy, c18.xyxy, c18
					    mad o3.xy, v1, c19, c19.zwzw
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c20.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c14.xyxy, c14
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c20.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					
					// approximately 28 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat5.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat5.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _Control_ST               c20      1
					//   _Splat0_ST                c21      1
					//   _Splat1_ST                c22      1
					//   _Splat2_ST                c23      1
					//   _Splat3_ST                c24      1
					//
					
					    vs_3_0
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    def c26, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad o1.xy, v2, c20, c20.zwzw
					    mad o1.zw, v2.xyxy, c21.xyxy, c21
					    mad o2.xy, v2, c22, c22.zwzw
					    mad o2.zw, v2.xyxy, c23.xyxy, c23
					    mad o3.xy, v2, c24, c24.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c26.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c26.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c26.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c26.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c26.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c25.x, c25.y
					    max r1.xyz, r1, c26.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6, c26.y
					
					// approximately 52 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat5.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat5.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat5.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat5.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   _Control_ST                   c14      1
					//   _Splat0_ST                    c15      1
					//   _Splat1_ST                    c16      1
					//   _Splat2_ST                    c17      1
					//   _Splat3_ST                    c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad o1.xy, v1, c14, c14.zwzw
					    mad o1.zw, v1.xyxy, c15.xyxy, c15
					    mad o2.xy, v1, c16, c16.zwzw
					    mad o2.zw, v1.xyxy, c17.xyxy, c17
					    mad o3.xy, v1, c18, c18.zwzw
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c19.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c19.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.zw, c19.y
					
					// approximately 28 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_6_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   unity_DynamicLightmapST       c14      1
					//   _Control_ST                   c15      1
					//   _Splat0_ST                    c16      1
					//   _Splat1_ST                    c17      1
					//   _Splat2_ST                    c18      1
					//   _Splat3_ST                    c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad o1.xy, v1, c15, c15.zwzw
					    mad o1.zw, v1.xyxy, c16.xyxy, c16
					    mad o2.xy, v1, c17, c17.zwzw
					    mad o2.zw, v1.xyxy, c18.xyxy, c18
					    mad o3.xy, v1, c19, c19.zwzw
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c20.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c14.xyxy, c14
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c20.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					
					// approximately 28 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat5.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat5.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _Control_ST               c20      1
					//   _Splat0_ST                c21      1
					//   _Splat1_ST                c22      1
					//   _Splat2_ST                c23      1
					//   _Splat3_ST                c24      1
					//
					
					    vs_3_0
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    def c26, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c20, c20.zwzw
					    mad o1.zw, v2.xyxy, c21.xyxy, c21
					    mad o2.xy, v2, c22, c22.zwzw
					    mad o2.zw, v2.xyxy, c23.xyxy, c23
					    mad o3.xy, v2, c24, c24.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c26.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c26.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c26.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c26.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c26.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c25.x, c25.y
					    max r1.xyz, r1, c26.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6, c26.y
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   _Control_ST                   c14      1
					//   _Splat0_ST                    c15      1
					//   _Splat1_ST                    c16      1
					//   _Splat2_ST                    c17      1
					//   _Splat3_ST                    c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    mad o1.xy, v1, c14, c14.zwzw
					    mad o1.zw, v1.xyxy, c15.xyxy, c15
					    mad o2.xy, v1, c16, c16.zwzw
					    mad o2.zw, v1.xyxy, c17.xyxy, c17
					    mad o3.xy, v1, c18, c18.zwzw
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c19.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c19.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mov o6.zw, c19.y
					
					// approximately 29 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_6_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7 = u_xlat2.z;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   unity_DynamicLightmapST       c14      1
					//   _Control_ST                   c15      1
					//   _Splat0_ST                    c16      1
					//   _Splat1_ST                    c17      1
					//   _Splat2_ST                    c18      1
					//   _Splat3_ST                    c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    mad o1.xy, v1, c15, c15.zwzw
					    mad o1.zw, v1.xyxy, c16.xyxy, c16
					    mad o2.xy, v1, c17, c17.zwzw
					    mad o2.zw, v1.xyxy, c18.xyxy, c18
					    mad o3.xy, v1, c19, c19.zwzw
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c20.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c14.xyxy, c14
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c20.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					
					// approximately 29 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7 = u_xlat2.z;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _Control_ST               c20      1
					//   _Splat0_ST                c21      1
					//   _Splat1_ST                c22      1
					//   _Splat2_ST                c23      1
					//   _Splat3_ST                c24      1
					//
					
					    vs_3_0
					    def c25, 1.05499995, -0.0549999997, 0, 0
					    def c26, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c20, c20.zwzw
					    mad o1.zw, v2.xyxy, c21.xyxy, c21
					    mad o2.xy, v2, c22, c22.zwzw
					    mad o2.zw, v2.xyxy, c23.xyxy, c23
					    mad o3.xy, v2, c24, c24.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c26.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c26.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c26.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c26.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c26.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c25.x, c25.y
					    max r1.xyz, r1, c26.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6, c26.y
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   _Control_ST                   c14      1
					//   _Splat0_ST                    c15      1
					//   _Splat1_ST                    c16      1
					//   _Splat2_ST                    c17      1
					//   _Splat3_ST                    c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    mad o1.xy, v1, c14, c14.zwzw
					    mad o1.zw, v1.xyxy, c15.xyxy, c15
					    mad o2.xy, v1, c16, c16.zwzw
					    mad o2.zw, v1.xyxy, c17.xyxy, c17
					    mad o3.xy, v1, c18, c18.zwzw
					    mad r0, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c19.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c19.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mov o6.zw, c19.y
					
					// approximately 29 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_6_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7 = u_xlat2.z;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD5.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   _ProjectionParams             c10      1
					//   _ScreenParams                 c11      1
					//   unity_ShadowFadeCenterAndType c12      1
					//   unity_LightmapST              c13      1
					//   unity_DynamicLightmapST       c14      1
					//   _Control_ST                   c15      1
					//   _Splat0_ST                    c16      1
					//   _Splat1_ST                    c17      1
					//   _Splat2_ST                    c18      1
					//   _Splat3_ST                    c19      1
					//
					
					    vs_3_0
					    def c20, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    mad o1.xy, v1, c15, c15.zwzw
					    mad o1.zw, v1.xyxy, c16.xyxy, c16
					    mad o2.xy, v1, c17, c17.zwzw
					    mad o2.zw, v1.xyxy, c18.xyxy, c18
					    mad o3.xy, v1, c19, c19.zwzw
					    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    mul r2.xz, r1.xyww, c20.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c14.xyxy, c14
					    mad o6.xy, v2, c13, c13.zwzw
					    dp4 r2.x, c7, v0
					    dp4 r2.y, c8, v0
					    dp4 r2.z, c9, v0
					    add r3.xyz, r2, -c12
					    mov o4.xyz, r2
					    mul o7.xyz, r3, c12.w
					    dp4 r2.x, c6, r0
					    dp4 r1.z, c2, r0
					    mov r0.x, c20.x
					    add r0.x, r0.x, -c12.w
					    mul o7.w, r0.x, -r2.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					
					// approximately 29 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_3_2[4];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_4[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat1.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat2 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat2 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_4_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_4[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_6;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					int u_xlati8;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7 = u_xlat2.z;
					    vs_TEXCOORD4.zw = u_xlat2.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat0.x * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat2.xy = u_xlat2.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat2.xy;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD6.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_DynamicLightmapST   c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _Control_ST               c21      1
					//   _Splat0_ST                c22      1
					//   _Splat1_ST                c23      1
					//   _Splat2_ST                c24      1
					//   _Splat3_ST                c25      1
					//
					
					    vs_3_0
					    def c26, 1.05499995, -0.0549999997, 0, 0
					    def c27, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.x
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    dp4 o4.x, c4, v0
					    dp4 o4.y, c5, v0
					    dp4 o4.z, c6, v0
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o8.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mad o6.zw, v3.xyxy, c19.xyxy, c19
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c27.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c27.y
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.w
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.x, c26.y
					    max r1.xyz, r1, c27.y
					    add r1.xyz, -r0, r1
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    mad o7.xyz, r0.w, r1, r0
					    mov o6.xy, c27.y
					
					// approximately 54 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat4 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_6_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati8 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD5.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD5.xy = vec2(0.0, 0.0);
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    vs_TEXCOORD6.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Depth       c0       1
					//   _Control     s0       1
					//   _Splat0      s1       1
					//   _Splat1      s2       1
					//   _Splat2      s3       1
					//   _Splat3      s4       1
					//   _LightBuffer s5       1
					//
					
					    ps_3_0
					    def c1, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c1.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c0.x
					    max r2, r1, c1.x
					    dp4 r1.x, r2, c1.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s5
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v4
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c1.y
					
					// approximately 31 instruction slots used (6 texture, 25 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_DynamicLightmap_HDR c0       1
					//   _Depth                    c1       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c0.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c0.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 42 instruction slots used (7 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_Lightmap_HDR c0       1
					//   _Depth             c1       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//   _LightBuffer       s6       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v4, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    texldp_pp r2, v3, s6
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mad_pp r1.xyz, r0.w, r1, -r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 36 instruction slots used (7 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_Lightmap_HDR        c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _Depth                    c2       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _LightBuffer              s7       1
					//
					
					    ps_3_0
					    def c3, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c3.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c2.x
					    max r2, r1, c3.x
					    dp4 r1.x, r2, c3.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v4, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    texldp_pp r2, v3, s7
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mad_pp r1.xyz, r0.w, r1, -r3
					    texld_pp r2, v4.zwzw, s1
					    mul_pp r0.w, r2.w, c1.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c1.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c3.y
					
					// approximately 47 instruction slots used (8 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_DynamicLightmap_HDR c0       1
					//   _Depth                    c1       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c0.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c0.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 42 instruction slots used (7 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Depth       c0       1
					//   _Control     s0       1
					//   _Splat0      s1       1
					//   _Splat1      s2       1
					//   _Splat2      s3       1
					//   _Splat3      s4       1
					//   _LightBuffer s5       1
					//
					
					    ps_3_0
					    def c1, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c1.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c0.x
					    max r2, r1, c1.x
					    dp4 r1.x, r2, c1.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s5
					    add_pp r1.xyz, r1, v4
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c1.y
					
					// approximately 28 instruction slots used (6 texture, 22 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_DynamicLightmap_HDR c0       1
					//   _Depth                    c1       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    add_pp r1.xyz, r1, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c0.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c0.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 39 instruction slots used (7 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_Lightmap_HDR c0       1
					//   _Depth             c1       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//   _LightBuffer       s6       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    texld_pp r2, v4, s0
					    pow_pp r0.w, r2.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mad_pp r1.xyz, r0.w, r2, r1
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 33 instruction slots used (7 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_Lightmap_HDR        c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _Depth                    c2       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _LightBuffer              s7       1
					//
					
					    ps_3_0
					    def c3, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c3.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c2.x
					    max r2, r1, c3.x
					    dp4 r1.x, r2, c3.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s7
					    texld_pp r2, v4, s0
					    pow_pp r0.w, r2.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mad_pp r1.xyz, r0.w, r2, r1
					    texld_pp r2, v4.zwzw, s1
					    mul_pp r0.w, r2.w, c1.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c1.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c3.y
					
					// approximately 44 instruction slots used (8 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_DynamicLightmap_HDR c0       1
					//   _Depth                    c1       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c2, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c2.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c1.x
					    max r2, r1, c2.x
					    dp4 r1.x, r2, c2.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    add_pp r1.xyz, r1, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c0.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c0.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c2.y
					
					// approximately 39 instruction slots used (7 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   unity_FogColor  c0       1
					//   unity_FogParams c1       1
					//   _Depth          c2       1
					//   _Control        s0       1
					//   _Splat0         s1       1
					//   _Splat1         s2       1
					//   _Splat2         s3       1
					//   _Splat3         s4       1
					//   _LightBuffer    s5       1
					//
					
					    ps_3_0
					    def c3, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.xyz
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c3.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c2.x
					    max r2, r1, c3.x
					    dp4 r1.x, r2, c3.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s5
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v4
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c3.y
					
					// approximately 35 instruction slots used (6 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_DynamicLightmap_HDR c2       1
					//   _Depth                    c3       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c2.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c2.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 46 instruction slots used (7 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_FogColor     c0       1
					//   unity_FogParams    c1       1
					//   unity_Lightmap_HDR c2       1
					//   _Depth             c3       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//   _LightBuffer       s6       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.xy
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v4, s0
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    texldp_pp r2, v3, s6
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mad_pp r1.xyz, r0.w, r1, -r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 40 instruction slots used (7 texture, 33 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_Lightmap_HDR        c2       1
					//   unity_DynamicLightmap_HDR c3       1
					//   _Depth                    c4       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _LightBuffer              s7       1
					//
					
					    ps_3_0
					    def c5, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c5.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c4.x
					    max r2, r1, c5.x
					    dp4 r1.x, r2, c5.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v4, s0
					    pow_pp r0.w, r1.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    texldp_pp r2, v3, s7
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mad_pp r1.xyz, r0.w, r1, -r3
					    texld_pp r2, v4.zwzw, s1
					    mul_pp r0.w, r2.w, c3.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c3.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c5.y
					
					// approximately 51 instruction slots used (8 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + (-u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_DynamicLightmap_HDR c2       1
					//   _Depth                    c3       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c2.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c2.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 46 instruction slots used (7 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   unity_FogColor  c0       1
					//   unity_FogParams c1       1
					//   _Depth          c2       1
					//   _Control        s0       1
					//   _Splat0         s1       1
					//   _Splat1         s2       1
					//   _Splat2         s3       1
					//   _Splat3         s4       1
					//   _LightBuffer    s5       1
					//
					
					    ps_3_0
					    def c3, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.xyz
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c3.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c2.x
					    max r2, r1, c3.x
					    dp4 r1.x, r2, c3.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s5
					    add_pp r1.xyz, r1, v4
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c3.y
					
					// approximately 32 instruction slots used (6 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_DynamicLightmap_HDR c2       1
					//   _Depth                    c3       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    add_pp r1.xyz, r1, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c2.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c2.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 43 instruction slots used (7 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_FogColor     c0       1
					//   unity_FogParams    c1       1
					//   unity_Lightmap_HDR c2       1
					//   _Depth             c3       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//   _LightBuffer       s6       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.xy
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    texld_pp r2, v4, s0
					    pow_pp r0.w, r2.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mad_pp r1.xyz, r0.w, r2, r1
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 37 instruction slots used (7 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_Lightmap_HDR        c2       1
					//   unity_DynamicLightmap_HDR c3       1
					//   _Depth                    c4       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _LightBuffer              s7       1
					//
					
					    ps_3_0
					    def c5, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    texld_pp r0, v1.zwzw, s5
					    texld_pp r1, v0, s2
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s6
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s4
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s3
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c5.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c4.x
					    max r2, r1, c5.x
					    dp4 r1.x, r2, c5.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s7
					    texld_pp r2, v4, s0
					    pow_pp r0.w, r2.w, c2.y
					    mul_pp r0.w, r0.w, c2.x
					    mad_pp r1.xyz, r0.w, r2, r1
					    texld_pp r2, v4.zwzw, s1
					    mul_pp r0.w, r2.w, c3.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c3.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c5.y
					
					// approximately 48 instruction slots used (8 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD5.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _LightBuffer;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_FogColor            c0       1
					//   unity_FogParams           c1       1
					//   unity_DynamicLightmap_HDR c2       1
					//   _Depth                    c3       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _LightBuffer              s6       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.zw
					    dcl_texcoord6 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    texld_pp r0, v1.zwzw, s4
					    texld_pp r1, v0, s1
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s5
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s3
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s2
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c3.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    texldp_pp r1, v3, s6
					    add_pp r1.xyz, r1, v5
					    texld_pp r2, v4.zwzw, s0
					    mul_pp r0.w, r2.w, c2.x
					    mul_pp r2.xyz, r2, r0.w
					    log_pp r3.x, r2.x
					    log_pp r3.y, r2.y
					    log_pp r3.z, r2.z
					    mul_pp r2.xyz, r3, c2.y
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    add_pp r1.xyz, r1, r3
					    mad r0.xyz, r0, r1, -c0
					    mul r0.w, c1.x, v6.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c4.y
					
					// approximately 43 instruction slots used (7 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD5.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_LightBuffer, u_xlat2.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD7 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
  GpuProgramID 276724
Program "vp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.xyz
					    mad r0, v0.xyzx, c20.yyyx, c20.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0, c8.xyzz, v1.y
					    mad r0, c7.xyzz, v1.x, r0
					    mad r0, c9.xyzz, v1.z, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o8.xyz, c13, r1.x, r3
					    mul r1.xyz, c20.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c20.yxxw, -r1
					    dp3 r2.z, c4, r1
					    dp3 r2.x, c5, r1
					    dp3 r2.y, c6, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o7, c20.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = dot(u_xlat0.xyw, u_xlat0.xyw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.wxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.ywx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat0.w;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat0 = u_xlat0.ywzx * u_xlat0;
					    u_xlat2.x = dot(unity_SHBr, u_xlat0);
					    u_xlat2.y = dot(unity_SHBg, u_xlat0);
					    u_xlat2.z = dot(unity_SHBb, u_xlat0);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat1;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_WorldTransformParams    c14      1
					//   unity_LightmapST              c15      1
					//   _Control_ST                   c16      1
					//   _Splat0_ST                    c17      1
					//   _Splat1_ST                    c18      1
					//   _Splat2_ST                    c19      1
					//   _Splat3_ST                    c20      1
					//
					
					    vs_3_0
					    def c21, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c21.yyyx, c21.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c16, c16.zwzw
					    mad o1.zw, v2.xyxy, c17.xyxy, c17
					    mad o2.xy, v2, c18, c18.zwzw
					    mad o2.zw, v2.xyxy, c19.xyxy, c19
					    mad o3.xy, v2, c20, c20.zwzw
					    mad o7.xy, v3, c15, c15.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o4.w, r1.x
					    mov o5.w, r1.y
					    mov o6.w, r1.z
					    mul o8.xyz, r0.yzww, c13.w
					    mov r0.y, c21.y
					    add r0.y, r0.y, -c13.w
					    mul o8.w, r0.y, -r0.x
					    mul r0.xyz, c21.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c21.yxxw, -r0
					    dp3 r1.z, c7, r0
					    dp3 r1.x, c8, r0
					    dp3 r1.y, c9, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c11.zxyw, v1.y
					    mad r1.xyz, c10.zxyw, v1.x, r1
					    mad r1.xyz, c12.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.zw, c21.x
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    u_xlat0.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat8;
					int u_xlati15;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    u_xlat3.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat3.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat3.xy);
					    u_xlat8.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat3.xxx + u_xlat8.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati15 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati15].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_WorldTransformParams    c14      1
					//   unity_LightmapST              c15      1
					//   unity_DynamicLightmapST       c16      1
					//   _Control_ST                   c17      1
					//   _Splat0_ST                    c18      1
					//   _Splat1_ST                    c19      1
					//   _Splat2_ST                    c20      1
					//   _Splat3_ST                    c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    mad o7.zw, v4.xyxy, c16.xyxy, c16
					    mad o7.xy, v3, c15, c15.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o4.w, r1.x
					    mov o5.w, r1.y
					    mov o6.w, r1.z
					    mul o8.xyz, r0.yzww, c13.w
					    mov r0.y, c22.y
					    add r0.y, r0.y, -c13.w
					    mul o8.w, r0.y, -r0.x
					    mul r0.xyz, c22.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c22.yxxw, -r0
					    dp3 r1.z, c7, r0
					    dp3 r1.x, c8, r0
					    dp3 r1.y, c9, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c11.zxyw, v1.y
					    mad r1.xyz, c10.zxyw, v1.x, r1
					    mad r1.xyz, c12.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    u_xlat0.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat8;
					int u_xlati15;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    u_xlat3.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat3.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat3.xy);
					    u_xlat8.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat3.xxx + u_xlat8.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati15 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati15].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.xyz
					    mad r0, v0.xyzx, c20.yyyx, c20.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0, c8.xyzz, v1.y
					    mad r0, c7.xyzz, v1.x, r0
					    mad r0, c9.xyzz, v1.z, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o8.xyz, c13, r1.x, r3
					    mul r1.xyz, c20.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c20.yxxw, -r1
					    dp3 r2.z, c4, r1
					    dp3 r2.x, c5, r1
					    dp3 r2.y, c6, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o7, c20.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat1.x = dot(u_xlat0.xyw, u_xlat0.xyw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.wxy * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.ywx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat0.w;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat0 = u_xlat0.ywzx * u_xlat0;
					    u_xlat2.x = dot(unity_SHBr, u_xlat0);
					    u_xlat2.y = dot(unity_SHBg, u_xlat0);
					    u_xlat2.z = dot(unity_SHBb, u_xlat0);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.zw = in_NORMAL0.xx * unity_WorldToObject[2].xx;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.zw = in_NORMAL0.yy * unity_WorldToObject[2].yy;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.zw = in_NORMAL0.zz * unity_WorldToObject[2].zz;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat0.x = dot(u_xlat1.xyw, u_xlat1.xyw);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1 = u_xlat0.xxxx * u_xlat1;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD5.z = u_xlat1.w;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD7.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_WorldTransformParams    c14      1
					//   unity_LightmapST              c15      1
					//   _Control_ST                   c16      1
					//   _Splat0_ST                    c17      1
					//   _Splat1_ST                    c18      1
					//   _Splat2_ST                    c19      1
					//   _Splat3_ST                    c20      1
					//
					
					    vs_3_0
					    def c21, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c21.yyyx, c21.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c16, c16.zwzw
					    mad o1.zw, v2.xyxy, c17.xyxy, c17
					    mad o2.xy, v2, c18, c18.zwzw
					    mad o2.zw, v2.xyxy, c19.xyxy, c19
					    mad o3.xy, v2, c20, c20.zwzw
					    mad o7.xy, v3, c15, c15.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o4.w, r1.x
					    mov o5.w, r1.y
					    mov o6.w, r1.z
					    mul o8.xyz, r0.yzww, c13.w
					    mov r0.y, c21.y
					    add r0.y, r0.y, -c13.w
					    mul o8.w, r0.y, -r0.x
					    mul r0.xyz, c21.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c21.yxxw, -r0
					    dp3 r1.z, c7, r0
					    dp3 r1.x, c8, r0
					    dp3 r1.y, c9, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c11.zxyw, v1.y
					    mad r1.xyz, c10.zxyw, v1.x, r1
					    mad r1.xyz, c12.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.zw, c21.x
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    u_xlat0.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat8;
					int u_xlati15;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    u_xlat3.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat3.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat3.xy);
					    u_xlat8.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat3.xxx + u_xlat8.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD6.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati15 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati15].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_WorldTransformParams    c14      1
					//   unity_LightmapST              c15      1
					//   unity_DynamicLightmapST       c16      1
					//   _Control_ST                   c17      1
					//   _Splat0_ST                    c18      1
					//   _Splat1_ST                    c19      1
					//   _Splat2_ST                    c20      1
					//   _Splat3_ST                    c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8
					    mad r0, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    mad o7.zw, v4.xyxy, c16.xyxy, c16
					    mad o7.xy, v3, c15, c15.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o4.w, r1.x
					    mov o5.w, r1.y
					    mov o6.w, r1.z
					    mul o8.xyz, r0.yzww, c13.w
					    mov r0.y, c22.y
					    add r0.y, r0.y, -c13.w
					    mul o8.w, r0.y, -r0.x
					    mul r0.xyz, c22.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c22.yxxw, -r0
					    dp3 r1.z, c7, r0
					    dp3 r1.x, c8, r0
					    dp3 r1.y, c9, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c11.zxyw, v1.y
					    mad r1.xyz, c10.zxyw, v1.x, r1
					    mad r1.xyz, c12.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c14.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 50 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    u_xlat0.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					vec3 u_xlat8;
					int u_xlati15;
					float u_xlat17;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    u_xlat3.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat3.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat3.xy);
					    u_xlat8.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat3.xyz = unity_ObjectToWorld[0].yzx * u_xlat3.xxx + u_xlat8.xyz;
					    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat3.xyz = vec3(u_xlat17) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat3.x;
					    vs_TEXCOORD5.x = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati15 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati15].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati15 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat5 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD7.w = u_xlat5 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_DynamicLightmapST    c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mad o7.zw, v3.xyxy, c11.xyxy, c11
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o7.xy, c17.x
					
					// approximately 41 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_SHAr                c0       1
					//   unity_SHAg                c1       1
					//   unity_SHAb                c2       1
					//   unity_ColorSpaceLuminance c3       1
					//   _Depth                    c4       1
					//   _Control                  s0       1
					//   _Splat0                   s1       1
					//   _Splat1                   s2       1
					//   _Splat2                   s3       1
					//   _Splat3                   s4       1
					//   _Normal0                  s5       1
					//   _Normal1                  s6       1
					//   _Normal2                  s7       1
					//   _Normal3                  s8       1
					//
					
					    ps_3_0
					    def c5, 0, 1, -0.5, 0.5
					    def c6, 2, -1, 0.416666657, 0
					    def c7, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7_pp v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld r0, v1.zwzw, s7
					    texld r1, v0.zwzw, s5
					    texld r2, v1, s6
					    texld_pp r3, v1.zwzw, s3
					    texld_pp r4, v0, s0
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s4
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s2
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s1
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c5.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c4.x
					    max r5, r4, c5.x
					    dp4 r0.z, r5, c5.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s8
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c5.z
					    mad_pp r0.yz, r0.x, r0, c5.w
					    mad_pp r1.xy, r0.yzzw, c6.x, c6.y
					    dp2add_sat_pp r0.y, r1, r1, c5.x
					    add_pp r0.y, -r0.y, c5.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mov r2.w, c5.y
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c5.wwwy, c5.wwwx
					    add_pp r0.yzw, r1.xxyz, v6.xxyz
					    max_pp r1.xyz, r0.yzww, c5.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r0.yzw, r2.xxyz, c6.z
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    mad_pp r0.yzw, r2.xxyz, c7.x, c7.y
					    max_pp r2.xyz, r0.yzww, c5.x
					    abs r0.y, c3.w
					    cmp_pp r0.yzw, -r0.y, r2.xxyz, r1.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp r0.xyz, r0.yzww, r1
					    mov_pp oC0.xyz, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC0.w, c5.y
					    mov_pp oC1, c5.x
					    mov_pp oC3.w, c5.y
					
					// approximately 69 instruction slots used (9 texture, 60 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD7.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD7.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_DynamicLightmap_HDR c0       1
					//   _Depth                    c1       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _Normal0                  s6       1
					//   _Normal1                  s7       1
					//   _Normal2                  s8       1
					//   _Normal3                  s9       1
					//
					
					    ps_3_0
					    def c2, 0, 1, -0.5, 0.5
					    def c3, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v1.zwzw, s8
					    texld r1, v0.zwzw, s6
					    texld r2, v1, s7
					    texld_pp r3, v1.zwzw, s4
					    texld_pp r4, v0, s1
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s5
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s3
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s2
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c2.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c1.x
					    max r5, r4, c2.x
					    dp4 r0.z, r5, c2.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s9
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c2.z
					    mad_pp r0.yz, r0.x, r0, c2.w
					    mad_pp r1.xy, r0.yzzw, c3.x, c3.y
					    dp2add_sat_pp r0.y, r1, r1, c2.x
					    add_pp r0.y, -r0.y, c2.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c2.w, c2.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6.zwzw, s0
					    mul_pp r0.w, r1.w, c0.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c0.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mul_pp r1.xyz, r0, r2
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c2.y
					    mov_pp oC1, c2.x
					    mov_pp oC2.w, c2.y
					    mov_pp oC3.w, c2.y
					
					// approximately 63 instruction slots used (10 texture, 53 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_Lightmap_HDR c0       1
					//   _Depth             c1       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//   _Normal0           s6       1
					//   _Normal1           s7       1
					//   _Normal2           s8       1
					//   _Normal3           s9       1
					//
					
					    ps_3_0
					    def c2, 0, 1, -0.5, 0.5
					    def c3, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v1.zwzw, s8
					    texld r1, v0.zwzw, s6
					    texld r2, v1, s7
					    texld_pp r3, v1.zwzw, s4
					    texld_pp r4, v0, s1
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s5
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s3
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s2
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c2.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c1.x
					    max r5, r4, c2.x
					    dp4 r0.z, r5, c2.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s9
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c2.z
					    mad_pp r0.yz, r0.x, r0, c2.w
					    mad_pp r1.xy, r0.yzzw, c3.x, c3.y
					    dp2add_sat_pp r0.y, r1, r1, c2.x
					    add_pp r0.y, -r0.y, c2.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c2.w, c2.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp r1.xyz, r0, r1
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c2.y
					    mov_pp oC1, c2.x
					    mov_pp oC2.w, c2.y
					    mov_pp oC3.w, c2.y
					
					// approximately 59 instruction slots used (10 texture, 49 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_Lightmap_HDR        c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _Depth                    c2       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _Normal0                  s7       1
					//   _Normal1                  s8       1
					//   _Normal2                  s9       1
					//   _Normal3                  s10      1
					//
					
					    ps_3_0
					    def c3, 0, 1, -0.5, 0.5
					    def c4, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld r0, v1.zwzw, s9
					    texld r1, v0.zwzw, s7
					    texld r2, v1, s8
					    texld_pp r3, v1.zwzw, s5
					    texld_pp r4, v0, s2
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s6
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s4
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s3
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c3.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c2.x
					    max r5, r4, c3.x
					    dp4 r0.z, r5, c3.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s10
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c3.z
					    mad_pp r0.yz, r0.x, r0, c3.w
					    mad_pp r1.xy, r0.yzzw, c4.x, c4.y
					    dp2add_sat_pp r0.y, r1, r1, c3.x
					    add_pp r0.y, -r0.y, c3.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c3.w, c3.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6.zwzw, s1
					    mul_pp r0.w, r1.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r1, v6, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mad_pp r1.xyz, r0.w, r1, r2
					    mul_pp r1.xyz, r0, r1
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c3.y
					    mov_pp oC1, c3.x
					    mov_pp oC2.w, c3.y
					    mov_pp oC3.w, c3.y
					
					// approximately 69 instruction slots used (11 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   unity_DynamicLightmap_HDR   c0       1
					//   _Depth                      c1       1
					//   unity_DynamicLightmap       s0       1
					//   unity_DynamicDirectionality s1       1
					//   _Control                    s2       1
					//   _Splat0                     s3       1
					//   _Splat1                     s4       1
					//   _Splat2                     s5       1
					//   _Splat3                     s6       1
					//   _Normal0                    s7       1
					//   _Normal1                    s8       1
					//   _Normal2                    s9       1
					//   _Normal3                    s10      1
					//
					
					    ps_3_0
					    def c2, 0, 1, -0.5, 0.5
					    def c3, 2, -1, 9.99999975e-005, 10000
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld r0, v1.zwzw, s9
					    texld r1, v0.zwzw, s7
					    texld r2, v1, s8
					    texld_pp r3, v1.zwzw, s5
					    texld_pp r4, v0, s2
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s6
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s4
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s3
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c2.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c1.x
					    max r5, r4, c2.x
					    dp4 r0.z, r5, c2.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s10
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c2.z
					    mad_pp r0.yz, r0.x, r0, c2.w
					    mad_pp r1.xy, r0.yzzw, c3.x, c3.y
					    dp2add_sat_pp r0.y, r1, r1, c2.x
					    add_pp r0.y, -r0.y, c2.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c2.w, c2.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6.zwzw, s1
					    add_pp r1.xyz, r1, c2.z
					    dp3_pp r0.w, r2, r1
					    add_pp r0.w, r0.w, c2.w
					    texld_pp r2, v6.zwzw, s0
					    mul_pp r1.x, r2.w, c0.x
					    mul_pp r1.xyz, r2, r1.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c0.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mul_pp r1.xyz, r0.w, r2
					    add r0.w, -r1.w, c3.z
					    rcp r1.w, r1.w
					    cmp r0.w, r0.w, c3.w, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r1.xyz, r0, r1
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c2.y
					    mov_pp oC1, c2.x
					    mov_pp oC2.w, c2.y
					    mov_pp oC3.w, c2.y
					
					// approximately 72 instruction slots used (11 texture, 61 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat18 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat1.x + 0.5;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat7.x = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat7.xxx;
					    u_xlat7.xyz = log2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat18 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat1.x + 0.5;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat7.x = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat7.xxx;
					    u_xlat7.xyz = log2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_SHAr                c0       1
					//   unity_SHAg                c1       1
					//   unity_SHAb                c2       1
					//   unity_ColorSpaceLuminance c3       1
					//   _Depth                    c4       1
					//   _Control                  s0       1
					//   _Splat0                   s1       1
					//   _Splat1                   s2       1
					//   _Splat2                   s3       1
					//   _Splat3                   s4       1
					//   _Normal0                  s5       1
					//   _Normal1                  s6       1
					//   _Normal2                  s7       1
					//   _Normal3                  s8       1
					//
					
					    ps_3_0
					    def c5, 0, 1, -0.5, 0.5
					    def c6, 2, -1, 0.416666657, 0
					    def c7, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7_pp v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    texld r0, v1.zwzw, s7
					    texld r1, v0.zwzw, s5
					    texld r2, v1, s6
					    texld_pp r3, v1.zwzw, s3
					    texld_pp r4, v0, s0
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s4
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s2
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s1
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c5.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c4.x
					    max r5, r4, c5.x
					    dp4 r0.z, r5, c5.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s8
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c5.z
					    mad_pp r0.yz, r0.x, r0, c5.w
					    mad_pp r1.xy, r0.yzzw, c6.x, c6.y
					    dp2add_sat_pp r0.y, r1, r1, c5.x
					    add_pp r0.y, -r0.y, c5.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mov r2.w, c5.y
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c5.wwwy, c5.wwwx
					    add_pp r0.yzw, r1.xxyz, v6.xxyz
					    max_pp r1.xyz, r0.yzww, c5.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r0.yzw, r2.xxyz, c6.z
					    exp_pp r2.x, r0.y
					    exp_pp r2.y, r0.z
					    exp_pp r2.z, r0.w
					    mad_pp r0.yzw, r2.xxyz, c7.x, c7.y
					    max_pp r2.xyz, r0.yzww, c5.x
					    abs r0.y, c3.w
					    cmp_pp r0.yzw, -r0.y, r2.xxyz, r1.xxyz
					    mul r1.xyz, r7, r4.y
					    mad_pp r1.xyz, r4.x, r8, r1
					    mad_pp r1.xyz, r4.z, r3, r1
					    mad_pp r1.xyz, r4.w, r6, r1
					    mul_pp r1.xyz, r0.x, r1
					    mul_pp oC3.xyz, r0.yzww, r1
					    mov_pp oC0.xyz, r1
					    mov_pp oC0.w, c5.y
					    mov_pp oC1, c5.x
					    mov_pp oC3.w, c5.y
					
					// approximately 66 instruction slots used (9 texture, 57 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD7.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[4];
						float _Depth;
						vec4 unused_0_4[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat9;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat3 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat4 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat5.x = u_xlat0.x + u_xlat1.w;
					    u_xlat5.y = u_xlat0.y + u_xlat2.w;
					    u_xlat5.z = u_xlat0.z + u_xlat3.w;
					    u_xlat5.w = u_xlat0.w + u_xlat4.w;
					    u_xlat19 = max(u_xlat5.w, u_xlat5.z);
					    u_xlat19 = max(u_xlat19, u_xlat5.y);
					    u_xlat19 = max(u_xlat19, u_xlat5.x);
					    u_xlat5 = (-vec4(u_xlat19)) + u_xlat5;
					    u_xlat5 = u_xlat5 + vec4(_Depth);
					    u_xlat5 = max(u_xlat5, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat5, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5 = u_xlat5 / vec4(u_xlat19);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.yyy;
					    u_xlat1.xyz = u_xlat5.xxx * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat5.zzz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat5.www * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat2 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat2.xz = u_xlat3.wy * u_xlat5.yy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.wy + u_xlat2.xz;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2.xy = u_xlat5.zz * u_xlat3.wy + u_xlat2.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat2.xy = u_xlat5.ww * u_xlat3.wy + u_xlat2.xy;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat6.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat6.xy = u_xlat0.xx * u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.x = vs_TEXCOORD3.w;
					        u_xlat9.y = vs_TEXCOORD4.w;
					        u_xlat9.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat0.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat19);
					        u_xlat0.x = min(u_xlat3.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat4.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD7.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat0.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_DynamicLightmap_HDR c0       1
					//   _Depth                    c1       1
					//   unity_DynamicLightmap     s0       1
					//   _Control                  s1       1
					//   _Splat0                   s2       1
					//   _Splat1                   s3       1
					//   _Splat2                   s4       1
					//   _Splat3                   s5       1
					//   _Normal0                  s6       1
					//   _Normal1                  s7       1
					//   _Normal2                  s8       1
					//   _Normal3                  s9       1
					//
					
					    ps_3_0
					    def c2, 0, 1, -0.5, 0.5
					    def c3, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v1.zwzw, s8
					    texld r1, v0.zwzw, s6
					    texld r2, v1, s7
					    texld_pp r3, v1.zwzw, s4
					    texld_pp r4, v0, s1
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s5
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s3
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s2
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c2.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c1.x
					    max r5, r4, c2.x
					    dp4 r0.z, r5, c2.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s9
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c2.z
					    mad_pp r0.yz, r0.x, r0, c2.w
					    mad_pp r1.xy, r0.yzzw, c3.x, c3.y
					    dp2add_sat_pp r0.y, r1, r1, c2.x
					    add_pp r0.y, -r0.y, c2.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c2.w, c2.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6.zwzw, s0
					    mul_pp r0.w, r1.w, c0.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c0.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mul_pp oC3.xyz, r0, r2
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c2.y
					    mov_pp oC1, c2.x
					    mov_pp oC2.w, c2.y
					    mov_pp oC3.w, c2.y
					
					// approximately 60 instruction slots used (10 texture, 50 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   unity_Lightmap_HDR c0       1
					//   _Depth             c1       1
					//   unity_Lightmap     s0       1
					//   _Control           s1       1
					//   _Splat0            s2       1
					//   _Splat1            s3       1
					//   _Splat2            s4       1
					//   _Splat3            s5       1
					//   _Normal0           s6       1
					//   _Normal1           s7       1
					//   _Normal2           s8       1
					//   _Normal3           s9       1
					//
					
					    ps_3_0
					    def c2, 0, 1, -0.5, 0.5
					    def c3, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v1.zwzw, s8
					    texld r1, v0.zwzw, s6
					    texld r2, v1, s7
					    texld_pp r3, v1.zwzw, s4
					    texld_pp r4, v0, s1
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s5
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s3
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s2
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c2.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c1.x
					    max r5, r4, c2.x
					    dp4 r0.z, r5, c2.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s9
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c2.z
					    mad_pp r0.yz, r0.x, r0, c2.w
					    mad_pp r1.xy, r0.yzzw, c3.x, c3.y
					    dp2add_sat_pp r0.y, r1, r1, c2.x
					    add_pp r0.y, -r0.y, c2.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c2.w, c2.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mul_pp r1.xyz, r1, r0.w
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c2.y
					    mov_pp oC1, c2.x
					    mov_pp oC2.w, c2.y
					    mov_pp oC3.w, c2.y
					
					// approximately 56 instruction slots used (10 texture, 46 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_2[3];
						float _Depth;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat1.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_Lightmap_HDR        c0       1
					//   unity_DynamicLightmap_HDR c1       1
					//   _Depth                    c2       1
					//   unity_Lightmap            s0       1
					//   unity_DynamicLightmap     s1       1
					//   _Control                  s2       1
					//   _Splat0                   s3       1
					//   _Splat1                   s4       1
					//   _Splat2                   s5       1
					//   _Splat3                   s6       1
					//   _Normal0                  s7       1
					//   _Normal1                  s8       1
					//   _Normal2                  s9       1
					//   _Normal3                  s10      1
					//
					
					    ps_3_0
					    def c3, 0, 1, -0.5, 0.5
					    def c4, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld r0, v1.zwzw, s9
					    texld r1, v0.zwzw, s7
					    texld r2, v1, s8
					    texld_pp r3, v1.zwzw, s5
					    texld_pp r4, v0, s2
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s6
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s4
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s3
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c3.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c2.x
					    max r5, r4, c3.x
					    dp4 r0.z, r5, c3.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s10
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c3.z
					    mad_pp r0.yz, r0.x, r0, c3.w
					    mad_pp r1.xy, r0.yzzw, c4.x, c4.y
					    dp2add_sat_pp r0.y, r1, r1, c3.x
					    add_pp r0.y, -r0.y, c3.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c3.w, c3.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6.zwzw, s1
					    mul_pp r0.w, r1.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r1, v6, s0
					    pow_pp r0.w, r1.w, c0.y
					    mul_pp r0.w, r0.w, c0.x
					    mad_pp r1.xyz, r0.w, r1, r2
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c3.y
					    mov_pp oC1, c3.x
					    mov_pp oC2.w, c3.y
					    mov_pp oC3.w, c3.y
					
					// approximately 66 instruction slots used (11 texture, 55 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_3[2];
						float _Depth;
						vec4 unused_0_5[7];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat18 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD6.xy);
					    u_xlat18 = log2(u_xlat2.w);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.y;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat18 = u_xlat18 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   unity_DynamicLightmap_HDR   c0       1
					//   _Depth                      c1       1
					//   unity_DynamicLightmap       s0       1
					//   unity_DynamicDirectionality s1       1
					//   _Control                    s2       1
					//   _Splat0                     s3       1
					//   _Splat1                     s4       1
					//   _Splat2                     s5       1
					//   _Splat3                     s6       1
					//   _Normal0                    s7       1
					//   _Normal1                    s8       1
					//   _Normal2                    s9       1
					//   _Normal3                    s10      1
					//
					
					    ps_3_0
					    def c2, 0, 1, -0.5, 0.5
					    def c3, 2, -1, 9.99999975e-005, 10000
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6 v6.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    texld r0, v1.zwzw, s9
					    texld r1, v0.zwzw, s7
					    texld r2, v1, s8
					    texld_pp r3, v1.zwzw, s5
					    texld_pp r4, v0, s2
					    add r5.z, r3.w, r4.z
					    texld_pp r6, v2, s6
					    add r5.w, r4.w, r6.w
					    max r0.x, r5.z, r5.w
					    texld_pp r7, v1, s4
					    add r5.y, r4.y, r7.w
					    max r1.x, r5.y, r0.x
					    texld_pp r8, v0.zwzw, s3
					    add r5.x, r4.x, r8.w
					    dp4_pp r0.x, r4, c2.y
					    max r0.z, r5.x, r1.x
					    add r4, -r0.z, r5
					    add r4, r4, c1.x
					    max r5, r4, c2.x
					    dp4 r0.z, r5, c2.y
					    rcp r0.z, r0.z
					    mul r4, r0.z, r5
					    mul r1.xz, r2.wyyw, r4.y
					    mad_pp r1.xy, r4.x, r1.wyzw, r1.xzzw
					    mad_pp r0.yz, r4.z, r0.xwyw, r1.xxyw
					    texld r1, v2, s10
					    mad_pp r0.yz, r4.w, r1.xwyw, r0
					    add_pp r0.yz, r0, c2.z
					    mad_pp r0.yz, r0.x, r0, c2.w
					    mad_pp r1.xy, r0.yzzw, c3.x, c3.y
					    dp2add_sat_pp r0.y, r1, r1, c2.x
					    add_pp r0.y, -r0.y, c2.y
					    rsq_pp r0.y, r0.y
					    rcp_pp r1.z, r0.y
					    dp3_pp r2.x, v3, r1
					    dp3_pp r2.y, v4, r1
					    dp3_pp r2.z, v5, r1
					    mad_pp oC2.xyz, r2, c2.w, c2.w
					    mul r0.yzw, r7.xxyz, r4.y
					    mad_pp r0.yzw, r4.x, r8.xxyz, r0
					    mad_pp r0.yzw, r4.z, r3.xxyz, r0
					    mad_pp r0.yzw, r4.w, r6.xxyz, r0
					    mul_pp r0.xyz, r0.x, r0.yzww
					    texld_pp r1, v6.zwzw, s1
					    add_pp r1.xyz, r1, c2.z
					    dp3_pp r0.w, r2, r1
					    add_pp r0.w, r0.w, c2.w
					    texld_pp r2, v6.zwzw, s0
					    mul_pp r1.x, r2.w, c0.x
					    mul_pp r1.xyz, r2, r1.x
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c0.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mul_pp r1.xyz, r0.w, r2
					    add r0.w, -r1.w, c3.z
					    rcp r1.w, r1.w
					    cmp r0.w, r0.w, c3.w, r1.w
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c2.y
					    mov_pp oC1, c2.x
					    mov_pp oC2.w, c2.y
					    mov_pp oC3.w, c2.y
					
					// approximately 69 instruction slots used (11 texture, 58 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat18 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat1.x + 0.5;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat7.x = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat7.xxx;
					    u_xlat7.xyz = log2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat18);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_2[2];
						float _Depth;
						vec4 unused_0_4[6];
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat3 = texture(_Normal1, vs_TEXCOORD1.xy);
					    u_xlat7.xy = u_xlat2.yy * u_xlat3.wy;
					    u_xlat3 = texture(_Normal0, vs_TEXCOORD0.zw);
					    u_xlat7.xy = u_xlat2.xx * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat7.xy = u_xlat2.zz * u_xlat3.wy + u_xlat7.xy;
					    u_xlat3 = texture(_Normal3, vs_TEXCOORD2.xy);
					    u_xlat7.xy = u_xlat2.ww * u_xlat3.wy + u_xlat7.xy;
					    u_xlat7.xy = u_xlat7.xy + vec2(-0.5, -0.5);
					    u_xlat1.xy = u_xlat1.xx * u_xlat7.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat18 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = u_xlat1.x + 0.5;
					    u_xlat2 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat7.x = u_xlat2.w * unity_DynamicLightmap_HDR.x;
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat7.xxx;
					    u_xlat7.xyz = log2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat18);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "QUEUE"="Geometry-100" "RenderType"="Opaque" "SplatCount"="4" }
  Cull Off
  GpuProgramID 334612
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_LightmapST           c11      1
					//   unity_DynamicLightmapST    c12      1
					//   unity_MetaVertexControl    c13      1
					//   _Control_ST                c14      1
					//   _Splat0_ST                 c15      1
					//   _Splat1_ST                 c16      1
					//   _Splat2_ST                 c17      1
					//   _Splat3_ST                 c18      1
					//
					
					    vs_3_0
					    def c19, 0, 1, 9.99999975e-005, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    slt r0.x, c19.x, v0.z
					    mul r0.z, r0.x, c19.z
					    mad r0.xy, v3, c11, c11.zwzw
					    lrp r1.xyz, c13.x, r0, v0
					    slt r0.x, c19.x, r1.z
					    mul r0.z, r0.x, c19.z
					    mad r0.xy, v4, c12, c12.zwzw
					    lrp r2.xyz, c13.y, r0, r1
					    mov r2.w, c19.y
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    mad o1.xy, v2, c14, c14.zwzw
					    mad o1.zw, v2.xyxy, c15.xyxy, c15
					    mad o2.xy, v2, c16, c16.zwzw
					    mad o2.zw, v2.xyxy, c17.xyxy, c17
					    mad o3.xy, v2, c18, c18.zwzw
					    dp4 o4.w, c4, v0
					    dp4 o5.w, c5, v0
					    dp4 o6.w, c6, v0
					    mul r0.xyz, c19.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c19.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c8.zxyw, v1.y
					    mad r1.xyz, c7.zxyw, v1.x, r1
					    mad r1.xyz, c9.zxyw, v1.z, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c10.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb12 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb12 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb12 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb12 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD3.z = u_xlat0.y;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD4.z = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Control;
					//   float _Depth;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Depth                    c0       1
					//   unity_MetaFragmentControl c1       1
					//   unity_OneOverOutputBoost  c2       1
					//   unity_MaxOutputValue      c3       1
					//   _Control                  s0       1
					//   _Splat0                   s1       1
					//   _Splat1                   s2       1
					//   _Splat2                   s3       1
					//   _Splat3                   s4       1
					//
					
					    ps_3_0
					    def c4, 0, 1, 0.0235294141, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v1.zwzw, s3
					    texld_pp r1, v0, s0
					    add r2.z, r0.w, r1.z
					    texld_pp r3, v2, s4
					    add r2.w, r1.w, r3.w
					    max r0.w, r2.z, r2.w
					    texld_pp r4, v1, s2
					    add r2.y, r1.y, r4.w
					    max r3.w, r2.y, r0.w
					    texld_pp r5, v0.zwzw, s1
					    add r2.x, r1.x, r5.w
					    dp4_pp r0.w, r1, c4.y
					    max r1.x, r2.x, r3.w
					    add r1, -r1.x, r2
					    add r1, r1, c0.x
					    max r2, r1, c4.x
					    dp4 r1.x, r2, c4.y
					    rcp r1.x, r1.x
					    mul r1, r1.x, r2
					    mul r2.xyz, r4, r1.y
					    mad_pp r2.xyz, r1.x, r5, r2
					    mad_pp r0.xyz, r1.z, r0, r2
					    mad_pp r0.xyz, r1.w, r3, r0
					    mul_pp r0.xyz, r0.w, r0
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mov_sat r0.x, c2.x
					    mul r0.xyz, r1, r0.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    min_pp r0.xyz, c3.x, r1
					    mov r1.xz, c4
					    cmp_pp r0.xyz, -c1.x, r1.x, r0
					    mov r0.w, c1.x
					    cmp_pp oC0, -c1.y, r0, r1.xxxz
					
					// approximately 37 instruction slots used (5 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat18 = unity_OneOverOutputBoost;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Depth;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 unused_0_4[5];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _Control;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Control, vs_TEXCOORD0.xy);
					    u_xlat2.z = u_xlat0.w + u_xlat1.z;
					    u_xlat3 = texture(_Splat3, vs_TEXCOORD2.xy);
					    u_xlat2.w = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat2.w, u_xlat2.z);
					    u_xlat4 = texture(_Splat1, vs_TEXCOORD1.xy);
					    u_xlat2.y = u_xlat1.y + u_xlat4.w;
					    u_xlat18 = max(u_xlat18, u_xlat2.y);
					    u_xlat5 = texture(_Splat0, vs_TEXCOORD0.zw);
					    u_xlat2.x = u_xlat1.x + u_xlat5.w;
					    u_xlat1.x = dot(u_xlat1, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat18 = max(u_xlat18, u_xlat2.x);
					    u_xlat2 = (-vec4(u_xlat18)) + u_xlat2;
					    u_xlat2 = u_xlat2 + vec4(_Depth);
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat18 = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat7.xyz = u_xlat4.xyz * u_xlat2.yyy;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat5.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.zzz * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat18 = unity_OneOverOutputBoost;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
}
 }
}
Dependency "AddPassShader" = "Hidden/TerrainEngine/Splatmap/Lightmap-AddPass-Advanced-Lite Bumped"
Dependency "BaseMapShader" = "Diffuse"
Dependency "Details0" = "Hidden/TerrainEngine/Details/Vertexlit"
Dependency "Details1" = "Hidden/TerrainEngine/Details/WavingDoublePass"
Dependency "Details2" = "Hidden/TerrainEngine/Details/BillboardWavingDoublePass"
Dependency "Tree0" = "Hidden/TerrainEngine/BillboardTree"
Fallback "Nature/Terrain/Diffuse"
}