Shader "AG/RadialCooldownShader" {
Properties {
 _Color ("Color", Color) = (0.000000,1.000000,0.000000,1.000000)
 _BackgroundColor ("Background Color", Color) = (1.000000,0.000000,0.000000,1.000000)
}
SubShader { 
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  GpuProgramID 40711
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   unity_SHAr                c10      1
					//   unity_SHAg                c11      1
					//   unity_SHAb                c12      1
					//   unity_SHBr                c13      1
					//   unity_SHBg                c14      1
					//   unity_SHBb                c15      1
					//   unity_SHC                 c16      1
					//   unity_ColorSpaceLuminance c17      1
					//   _PlaneCenterLocal         c18      1
					//   _PlaneNormalLocal         c19      1
					//   _PlaneForwardLocal        c20      1
					//
					
					    vs_3_0
					    def c21, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c22, 1.57072878, -2, 3.14159274, 0
					    def c23, 6.28318024, 0.159155071, 1, 0
					    def c24, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    add r0.xyz, -c18.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c19
					    mad r0.xyz, c19.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c20.zxyw
					    mad r1.xyz, c20.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c20.yzxw, r0
					    dp3 r0.y, r1, c19
					    slt r0.y, r0.y, c22.w
					    mad r0.z, r0_abs.x, c21.y, c21.z
					    mad r0.z, r0.z, r0_abs.x, c21.w
					    mad r0.z, r0.z, r0_abs.x, c22.x
					    add r0.w, -r0_abs.x, c21.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c22.y, c22.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c23.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c23.y
					    mad r0, v0.xyzx, c23.zzzw, c23.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mad r0.xyz, c16, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c10, r1
					    dp4 r2.y, c11, r1
					    dp4 r2.z, c12, r1
					    mov o1.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.w
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c24.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c24.y, c24.z
					    max r1.xyz, r1, c22.w
					    abs r0.w, c17.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max o4.xyz, r2, c22.w
					
					// approximately 65 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord6 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v2.xyxy, c10.xyxy, c10
					    mov o4.xy, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_LightmapST    c10      1
					//   _PlaneCenterLocal   c11      1
					//   _PlaneNormalLocal   c12      1
					//   _PlaneForwardLocal  c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.xy, v2, c10, c10.zwzw
					    mov o4.zw, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_LightmapST        c10      1
					//   unity_DynamicLightmapST c11      1
					//   _PlaneCenterLocal       c12      1
					//   _PlaneNormalLocal       c13      1
					//   _PlaneForwardLocal      c14      1
					//
					
					    vs_3_0
					    def c15, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c16, 1.57072878, -2, 3.14159274, 0
					    def c17, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    add r0.xyz, -c12.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c13
					    mad r0.xyz, c13.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c14.zxyw
					    mad r1.xyz, c14.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c14.yzxw, r0
					    dp3 r0.y, r1, c13
					    slt r0.y, r0.y, c16.w
					    mad r0.z, r0_abs.x, c15.y, c15.z
					    mad r0.z, r0.z, r0_abs.x, c15.w
					    mad r0.z, r0.z, r0_abs.x, c16.x
					    add r0.w, -r0_abs.x, c15.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c16.y, c16.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c17.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c17.y
					    mad r0, v0.xyzx, c17.zzzw, c17.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c11.xyxy, c11
					    mad o4.xy, v2, c10, c10.zwzw
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord6 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v2.xyxy, c10.xyxy, c10
					    mov o4.xy, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_ColorSpaceLuminance c19      1
					//   _PlaneCenterLocal         c20      1
					//   _PlaneNormalLocal         c21      1
					//   _PlaneForwardLocal        c22      1
					//
					
					    vs_3_0
					    def c23, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c24, 1.57072878, -2, 3.14159274, 0
					    def c25, 6.28318024, 0.159155071, 1, 0
					    def c26, 0.416666657, 1.05499995, -0.0549999997, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    add r0.xyz, -c20.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c21
					    mad r0.xyz, c21.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c22.zxyw
					    mad r1.xyz, c22.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c22.yzxw, r0
					    dp3 r0.y, r1, c21
					    slt r0.y, r0.y, c24.w
					    mad r0.z, r0_abs.x, c23.y, c23.z
					    mad r0.z, r0.z, r0_abs.x, c23.w
					    mad r0.z, r0.z, r0_abs.x, c24.x
					    add r0.w, -r0_abs.x, c23.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c24.y, c24.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c25.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c25.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c23.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    mov o1.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c24.w
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c26.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c26.y, c26.z
					    max r1.xyz, r1, c24.w
					    abs r0.w, c19.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max o4.xyz, r2, c24.w
					    mad r0, v0.xyzx, c25.zzzw, c25.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c26.w
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c26.w
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 71 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat11;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat16 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat11 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat16 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat11 * u_xlat16 + u_xlat1.x;
					    u_xlat11 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb6) ? u_xlat11 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat11;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat16 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6.x<0.0;
					    u_xlat11 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat16 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat11 * u_xlat16 + u_xlat1.x;
					    u_xlat11 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb6) ? u_xlat11 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat6.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat6.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat16 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat11 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat16 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat11 * u_xlat16 + u_xlat1.x;
					    u_xlat11 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb6) ? u_xlat11 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o5.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c17.w
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_LightmapST    c12      1
					//   _PlaneCenterLocal   c13      1
					//   _PlaneNormalLocal   c14      1
					//   _PlaneForwardLocal  c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.xy, v2, c12, c12.zwzw
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o4.zw, c17.w
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_LightmapST        c12      1
					//   unity_DynamicLightmapST c13      1
					//   _PlaneCenterLocal       c14      1
					//   _PlaneNormalLocal       c15      1
					//   _PlaneForwardLocal      c16      1
					//
					
					    vs_3_0
					    def c17, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c18, 1.57072878, -2, 3.14159274, 0
					    def c19, 6.28318024, 0.159155071, 1, 0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    add r0.xyz, -c14.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c15
					    mad r0.xyz, c15.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c16.zxyw
					    mad r1.xyz, c16.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c16.yzxw, r0
					    dp3 r0.y, r1, c15
					    slt r0.y, r0.y, c18.w
					    mad r0.z, r0_abs.x, c17.y, c17.z
					    mad r0.z, r0.z, r0_abs.x, c17.w
					    mad r0.z, r0.z, r0_abs.x, c18.x
					    add r0.w, -r0_abs.x, c17.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c18.y, c18.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c19.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c19.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c13.xyxy, c13
					    mad o4.xy, v2, c12, c12.zwzw
					    mad r0, v0.xyzx, c19.zzzw, c19.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c20.x
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o5.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c17.w
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   unity_4LightPosX0         c14      1
					//   unity_4LightPosY0         c15      1
					//   unity_4LightPosZ0         c16      1
					//   unity_4LightAtten0        c17      1
					//   unity_SHAr                c18      1
					//   unity_SHAg                c19      1
					//   unity_SHAb                c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_ColorSpaceLuminance c25      1
					//   _PlaneCenterLocal         c26      1
					//   _PlaneNormalLocal         c27      1
					//   _PlaneForwardLocal        c28      1
					//
					
					    vs_3_0
					    def c29, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c30, 1.57072878, -2, 3.14159274, 0
					    def c31, 6.28318024, 0.159155071, 1, 0
					    def c32, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    add r0.xyz, -c26.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c27
					    mad r0.xyz, c27.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c28.zxyw
					    mad r1.xyz, c28.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c28.yzxw, r0
					    dp3 r0.y, r1, c27
					    slt r0.y, r0.y, c30.w
					    mad r0.z, r0_abs.x, c29.y, c29.z
					    mad r0.z, r0.z, r0_abs.x, c29.w
					    mad r0.z, r0.z, r0_abs.x, c30.x
					    add r0.w, -r0_abs.x, c29.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c30.y, c30.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c31.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c31.y
					    mad r0, v0.xyzx, c31.zzzw, c31.wwwz
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.z, c6, r0
					    dp4 o0.w, c7, r0
					    mul r0.xyz, c12, v1.y
					    mad r0.xyz, c11, v1.x, r0
					    mad r0.xyz, c13, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r0.xyz, c24, r0.x, r3
					    mov r1.w, c29.x
					    dp4 r2.x, c18, r1
					    dp4 r2.y, c19, r1
					    dp4 r2.z, c20, r1
					    add r0.xyz, r0, r2
					    max r2.xyz, r0, c30.w
					    log r3.x, r2.x
					    log r3.y, r2.y
					    log r3.z, r2.z
					    mul r2.xyz, r3, c32.x
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    mad r2.xyz, r3, c32.y, c32.z
					    max r2.xyz, r2, c30.w
					    abs r0.w, c25.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r0
					    max r0.xyz, r3, c30.w
					    dp4 r2.y, c9, v0
					    add r3, -r2.y, c15
					    mul r4, r1.y, r3
					    mul r3, r3, r3
					    dp4 r2.x, c8, v0
					    add r5, -r2.x, c14
					    mad r4, r5, r1.x, r4
					    mad r3, r5, r5, r3
					    dp4 r2.z, c10, v0
					    add r5, -r2.z, c16
					    mov o2.xyz, r2
					    mad r2, r5, r1.z, r4
					    mov o1.xyz, r1
					    mad r1, r5, r5, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r4.x, c29.x
					    mad r1, r1, c17, r4.x
					    mul r2, r2, r3
					    max r2, r2, c30.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r2.xyz, r1.y, c1
					    mad r2.xyz, c0, r1.x, r2
					    mad r1.xyz, c2, r1.z, r2
					    mad r1.xyz, c3, r1.w, r1
					    add o4.xyz, r0, r1
					
					// approximately 93 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat18 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat12 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat18 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = u_xlat18 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat12 * u_xlat18 + u_xlat0.x;
					    u_xlat12 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb6) ? u_xlat12 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat0.y * u_xlat0.y;
					    u_xlat19 = u_xlat0.x * u_xlat0.x + (-u_xlat19);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat0.xxxx + u_xlat4;
					    u_xlat0 = u_xlat1 * u_xlat0.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat18 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat18 = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb1 = u_xlat1.x<0.0;
					    u_xlat7 = abs(u_xlat18) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat18) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat18) + 1.57072878;
					    u_xlat13 = -abs(u_xlat18) + 1.0;
					    u_xlatb18 = u_xlat18<(-u_xlat18);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlat19 = u_xlat13 * u_xlat7;
					    u_xlat19 = u_xlat19 * -2.0 + 3.14159274;
					    u_xlat18 = u_xlatb18 ? u_xlat19 : float(0.0);
					    u_xlat18 = u_xlat7 * u_xlat13 + u_xlat18;
					    u_xlat7 = (-u_xlat18) + 6.28318024;
					    u_xlat18 = (u_xlatb1) ? u_xlat7 : u_xlat18;
					    vs_TEXCOORD2 = u_xlat18 * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat18 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat12 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat18 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = u_xlat18 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat12 * u_xlat18 + u_xlat0.x;
					    u_xlat12 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb6) ? u_xlat12 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat0.y * u_xlat0.y;
					    u_xlat19 = u_xlat0.x * u_xlat0.x + (-u_xlat19);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat0.xxxx + u_xlat4;
					    u_xlat0 = u_xlat1 * u_xlat0.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord6 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v2.xyxy, c10.xyxy, c10
					    mov o4.xy, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord6 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v2.xyxy, c10.xyxy, c10
					    mov o4.xy, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _ProjectionParams         c14      1
					//   _ScreenParams             c15      1
					//   unity_4LightPosX0         c16      1
					//   unity_4LightPosY0         c17      1
					//   unity_4LightPosZ0         c18      1
					//   unity_4LightAtten0        c19      1
					//   unity_SHAr                c20      1
					//   unity_SHAg                c21      1
					//   unity_SHAb                c22      1
					//   unity_SHBr                c23      1
					//   unity_SHBg                c24      1
					//   unity_SHBb                c25      1
					//   unity_SHC                 c26      1
					//   unity_ColorSpaceLuminance c27      1
					//   _PlaneCenterLocal         c28      1
					//   _PlaneNormalLocal         c29      1
					//   _PlaneForwardLocal        c30      1
					//
					
					    vs_3_0
					    def c31, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c32, 1.57072878, -2, 3.14159274, 0
					    def c33, 6.28318024, 0.159155071, 1, 0
					    def c34, 0.416666657, 1.05499995, -0.0549999997, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    add r0.xyz, -c28.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c29
					    mad r0.xyz, c29.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c30.zxyw
					    mad r1.xyz, c30.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c30.yzxw, r0
					    dp3 r0.y, r1, c29
					    slt r0.y, r0.y, c32.w
					    mad r0.z, r0_abs.x, c31.y, c31.z
					    mad r0.z, r0.z, r0_abs.x, c31.w
					    mad r0.z, r0.z, r0_abs.x, c32.x
					    add r0.w, -r0_abs.x, c31.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c32.y, c32.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c33.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c33.y
					    mul r0.xyz, c12, v1.y
					    mad r0.xyz, c11, v1.x, r0
					    mad r0.xyz, c13, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c23, r2
					    dp4 r3.y, c24, r2
					    dp4 r3.z, c25, r2
					    mad r0.xyz, c26, r0.x, r3
					    mov r1.w, c31.x
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    add r0.xyz, r0, r2
					    max r2.xyz, r0, c32.w
					    log r3.x, r2.x
					    log r3.y, r2.y
					    log r3.z, r2.z
					    mul r2.xyz, r3, c34.x
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    mad r2.xyz, r3, c34.y, c34.z
					    max r2.xyz, r2, c32.w
					    abs r0.w, c27.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r0
					    max r0.xyz, r3, c32.w
					    dp4 r2.y, c9, v0
					    add r3, -r2.y, c17
					    mul r4, r1.y, r3
					    mul r3, r3, r3
					    dp4 r2.x, c8, v0
					    add r5, -r2.x, c16
					    mad r4, r5, r1.x, r4
					    mad r3, r5, r5, r3
					    dp4 r2.z, c10, v0
					    add r5, -r2.z, c18
					    mov o2.xyz, r2
					    mad r2, r5, r1.z, r4
					    mov o1.xyz, r1
					    mad r1, r5, r5, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r4.x, c31.x
					    mad r1, r1, c19, r4.x
					    mul r2, r2, r3
					    max r2, r2, c32.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r2.xyz, r1.y, c1
					    mad r2.xyz, c0, r1.x, r2
					    mad r1.xyz, c2, r1.z, r2
					    mad r1.xyz, c3, r1.w, r1
					    add o4.xyz, r0, r1
					    mad r0, v0.xyzx, c33.zzzw, c33.wwwz
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c34.w
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c34.w
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c15.zwzw, r2.xwzw
					
					// approximately 99 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat15;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat22 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat22) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat8 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb8 = u_xlat8<0.0;
					    u_xlat15 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat22 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat2.x = u_xlat22 * u_xlat15;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat15 * u_xlat22 + u_xlat1.x;
					    u_xlat15 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb8) ? u_xlat15 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat1.x * u_xlat1.x + (-u_xlat23);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat23) + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat9;
					int u_xlati14;
					float u_xlat16;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati21 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati21 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati21] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati21 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati21 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat21 = dot(u_xlat2.zxy, _PlaneNormalLocal.xyz);
					    u_xlat2.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _PlaneForwardLocal.zxy;
					    u_xlat3.xyz = _PlaneForwardLocal.yzx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat21 = dot(_PlaneForwardLocal.yzx, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2.x<0.0;
					    u_xlat9 = abs(u_xlat21) * -0.0187292993 + 0.0742610022;
					    u_xlat9 = u_xlat9 * abs(u_xlat21) + -0.212114394;
					    u_xlat9 = u_xlat9 * abs(u_xlat21) + 1.57072878;
					    u_xlat16 = -abs(u_xlat21) + 1.0;
					    u_xlatb21 = u_xlat21<(-u_xlat21);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat23 = u_xlat16 * u_xlat9;
					    u_xlat23 = u_xlat23 * -2.0 + 3.14159274;
					    u_xlat21 = u_xlatb21 ? u_xlat23 : float(0.0);
					    u_xlat21 = u_xlat9 * u_xlat16 + u_xlat21;
					    u_xlat9 = (-u_xlat21) + 6.28318024;
					    u_xlat21 = (u_xlatb2) ? u_xlat9 : u_xlat21;
					    vs_TEXCOORD2 = u_xlat21 * 0.159155071;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat2.y * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb21 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati14 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD4.zw = u_xlat1.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat22 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat22) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat8 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb8 = u_xlat8<0.0;
					    u_xlat15 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat22 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat2.x = u_xlat22 * u_xlat15;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat15 * u_xlat22 + u_xlat1.x;
					    u_xlat15 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb8) ? u_xlat15 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat1.x * u_xlat1.x + (-u_xlat23);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat23) + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o5.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c17.w
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o5.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c17.w
					
					// approximately 46 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   unity_SHAr                c10      1
					//   unity_SHAg                c11      1
					//   unity_SHAb                c12      1
					//   unity_SHBr                c13      1
					//   unity_SHBg                c14      1
					//   unity_SHBb                c15      1
					//   unity_SHC                 c16      1
					//   unity_FogParams           c17      1
					//   unity_ColorSpaceLuminance c18      1
					//   _PlaneCenterLocal         c19      1
					//   _PlaneNormalLocal         c20      1
					//   _PlaneForwardLocal        c21      1
					//
					
					    vs_3_0
					    def c22, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c23, 1.57072878, -2, 3.14159274, 0
					    def c24, 6.28318024, 0.159155071, 1, 0
					    def c25, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord5 o5.x
					    add r0.xyz, -c19.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c20
					    mad r0.xyz, c20.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c21.zxyw
					    mad r1.xyz, c21.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c21.yzxw, r0
					    dp3 r0.y, r1, c20
					    slt r0.y, r0.y, c23.w
					    mad r0.z, r0_abs.x, c22.y, c22.z
					    mad r0.z, r0.z, r0_abs.x, c22.w
					    mad r0.z, r0.z, r0_abs.x, c23.x
					    add r0.w, -r0_abs.x, c22.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c23.y, c23.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c24.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c24.y
					    mad r0, v0.xyzx, c24.zzzw, c24.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mad r0.yzw, c16.xxyz, r0.y, r3.xxyz
					    mov r1.w, c22.x
					    dp4 r2.x, c10, r1
					    dp4 r2.y, c11, r1
					    dp4 r2.z, c12, r1
					    mov o1.xyz, r1
					    add r0.yzw, r0, r2.xxyz
					    max r1.xyz, r0.yzww, c23.w
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c25.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c25.y, c25.z
					    max r1.xyz, r1, c23.w
					    abs r1.w, c18.w
					    sge r1.w, -r1.w, r1.w
					    lrp r2.xyz, r1.w, r1, r0.yzww
					    max o4.xyz, r2, c23.w
					    mul r0.y, r0.x, c17.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o5.x, r0.x
					
					// approximately 69 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o5.zw, v2.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c15.w
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_FogParams     c10      1
					//   unity_LightmapST    c11      1
					//   _PlaneCenterLocal   c12      1
					//   _PlaneNormalLocal   c13      1
					//   _PlaneForwardLocal  c14      1
					//
					
					    vs_3_0
					    def c15, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c16, 1.57072878, -2, 3.14159274, 0
					    def c17, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5.x
					    add r0.xyz, -c12.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c13
					    mad r0.xyz, c13.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c14.zxyw
					    mad r1.xyz, c14.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c14.yzxw, r0
					    dp3 r0.y, r1, c13
					    slt r0.y, r0.y, c16.w
					    mad r0.z, r0_abs.x, c15.y, c15.z
					    mad r0.z, r0.z, r0_abs.x, c15.w
					    mad r0.z, r0.z, r0_abs.x, c16.x
					    add r0.w, -r0_abs.x, c15.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c16.y, c16.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c17.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c17.y
					    mad r0, v0.xyzx, c17.zzzw, c17.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o4.xy, v2, c11, c11.zwzw
					    mul r0.y, r0.x, c10.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o5.x, r0.x
					    mov o4.zw, c16.w
					
					// approximately 44 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_LightmapST        c10      1
					//   unity_DynamicLightmapST c11      1
					//   _PlaneCenterLocal       c12      1
					//   _PlaneNormalLocal       c13      1
					//   _PlaneForwardLocal      c14      1
					//
					
					    vs_3_0
					    def c15, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c16, 1.57072878, -2, 3.14159274, 0
					    def c17, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5.x
					    add r0.xyz, -c12.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c13
					    mad r0.xyz, c13.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c14.zxyw
					    mad r1.xyz, c14.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c14.yzxw, r0
					    dp3 r0.y, r1, c13
					    slt r0.y, r0.y, c16.w
					    mad r0.z, r0_abs.x, c15.y, c15.z
					    mad r0.z, r0.z, r0_abs.x, c15.w
					    mad r0.z, r0.z, r0_abs.x, c16.x
					    add r0.w, -r0_abs.x, c15.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c16.y, c16.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c17.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c17.y
					    mad r0, v0.xyzx, c17.zzzw, c17.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o4.zw, v3.xyxy, c11.xyxy, c11
					    mad o4.xy, v2, c10, c10.zwzw
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o5.zw, v2.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c15.w
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   _ProjectionParams         c10      1
					//   _ScreenParams             c11      1
					//   unity_SHAr                c12      1
					//   unity_SHAg                c13      1
					//   unity_SHAb                c14      1
					//   unity_SHBr                c15      1
					//   unity_SHBg                c16      1
					//   unity_SHBb                c17      1
					//   unity_SHC                 c18      1
					//   unity_FogParams           c19      1
					//   unity_ColorSpaceLuminance c20      1
					//   _PlaneCenterLocal         c21      1
					//   _PlaneNormalLocal         c22      1
					//   _PlaneForwardLocal        c23      1
					//
					
					    vs_3_0
					    def c24, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c25, 1.57072878, -2, 3.14159274, 0
					    def c26, 6.28318024, 0.159155071, 1, 0
					    def c27, 0.416666657, 1.05499995, -0.0549999997, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    add r0.xyz, -c21.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c22
					    mad r0.xyz, c22.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c23.zxyw
					    mad r1.xyz, c23.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c23.yzxw, r0
					    dp3 r0.y, r1, c22
					    slt r0.y, r0.y, c25.w
					    mad r0.z, r0_abs.x, c24.y, c24.z
					    mad r0.z, r0.z, r0_abs.x, c24.w
					    mad r0.z, r0.z, r0_abs.x, c25.x
					    add r0.w, -r0_abs.x, c24.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c25.y, c25.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c26.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c26.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c15, r2
					    dp4 r3.y, c16, r2
					    dp4 r3.z, c17, r2
					    mad r0.xyz, c18, r0.x, r3
					    mov r1.w, c24.x
					    dp4 r2.x, c12, r1
					    dp4 r2.y, c13, r1
					    dp4 r2.z, c14, r1
					    mov o1.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c25.w
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c27.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c27.y, c27.z
					    max r1.xyz, r1, c25.w
					    abs r0.w, c20.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max o4.xyz, r2, c25.w
					    mad r0, v0.xyzx, c26.zzzw, c26.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c27.w
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c27.w
					    mov o0, r1
					    mov o5.zw, r1
					    mul r0.x, r1.z, c19.x
					    mul r0.x, r0.x, -r0.x
					    exp o6.x, r0.x
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 74 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat11;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat16 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat11 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat16 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat11 * u_xlat16 + u_xlat1.x;
					    u_xlat11 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb6) ? u_xlat11 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);
					    vs_TEXCOORD5 = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat11;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat16 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat6.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6.x<0.0;
					    u_xlat11 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat16 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat11 * u_xlat16 + u_xlat1.x;
					    u_xlat11 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb6) ? u_xlat11 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);
					    vs_TEXCOORD5 = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb16 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat2.xyz : u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat6.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat6.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat11;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat16 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat16) + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat6 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat11 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat11 = u_xlat11 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat16 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat2.x = u_xlat16 * u_xlat11;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat11 * u_xlat16 + u_xlat1.x;
					    u_xlat11 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb6) ? u_xlat11 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);
					    vs_TEXCOORD5 = exp2(u_xlat2.x);
					    u_xlat2.x = u_xlat1.y * u_xlat1.y;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x + (-u_xlat2.x);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat2.xyz = unity_SHC.xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD3.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o6.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c17.w
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_FogParams     c12      1
					//   unity_LightmapST    c13      1
					//   _PlaneCenterLocal   c14      1
					//   _PlaneNormalLocal   c15      1
					//   _PlaneForwardLocal  c16      1
					//
					
					    vs_3_0
					    def c17, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c18, 1.57072878, -2, 3.14159274, 0
					    def c19, 6.28318024, 0.159155071, 1, 0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    add r0.xyz, -c14.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c15
					    mad r0.xyz, c15.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c16.zxyw
					    mad r1.xyz, c16.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c16.yzxw, r0
					    dp3 r0.y, r1, c15
					    slt r0.y, r0.y, c18.w
					    mad r0.z, r0_abs.x, c17.y, c17.z
					    mad r0.z, r0.z, r0_abs.x, c17.w
					    mad r0.z, r0.z, r0_abs.x, c18.x
					    add r0.w, -r0_abs.x, c17.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c18.y, c18.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c19.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c19.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.xy, v2, c13, c13.zwzw
					    mad r0, v0.xyzx, c19.zzzw, c19.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c20.x
					    mov o0, r1
					    mov o5.zw, r1
					    mul r0.x, r1.z, c12.x
					    mul r0.x, r0.x, -r0.x
					    exp o6.x, r0.x
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o4.zw, c18.w
					
					// approximately 49 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD5 = exp2(u_xlat1.x);
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_6_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD5 = exp2(u_xlat1.x);
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    vs_TEXCOORD5 = exp2(u_xlat1.x);
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_LightmapST        c12      1
					//   unity_DynamicLightmapST c13      1
					//   _PlaneCenterLocal       c14      1
					//   _PlaneNormalLocal       c15      1
					//   _PlaneForwardLocal      c16      1
					//
					
					    vs_3_0
					    def c17, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c18, 1.57072878, -2, 3.14159274, 0
					    def c19, 6.28318024, 0.159155071, 1, 0
					    def c20, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    add r0.xyz, -c14.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c15
					    mad r0.xyz, c15.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c16.zxyw
					    mad r1.xyz, c16.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c16.yzxw, r0
					    dp3 r0.y, r1, c15
					    slt r0.y, r0.y, c18.w
					    mad r0.z, r0_abs.x, c17.y, c17.z
					    mad r0.z, r0.z, r0_abs.x, c17.w
					    mad r0.z, r0.z, r0_abs.x, c18.x
					    add r0.w, -r0_abs.x, c17.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c18.y, c18.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c19.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c19.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c13.xyxy, c13
					    mad o4.xy, v2, c12, c12.zwzw
					    mad r0, v0.xyzx, c19.zzzw, c19.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c20.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c20.x
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o6.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c17.w
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   unity_4LightPosX0         c14      1
					//   unity_4LightPosY0         c15      1
					//   unity_4LightPosZ0         c16      1
					//   unity_4LightAtten0        c17      1
					//   unity_SHAr                c18      1
					//   unity_SHAg                c19      1
					//   unity_SHAb                c20      1
					//   unity_SHBr                c21      1
					//   unity_SHBg                c22      1
					//   unity_SHBb                c23      1
					//   unity_SHC                 c24      1
					//   unity_FogParams           c25      1
					//   unity_ColorSpaceLuminance c26      1
					//   _PlaneCenterLocal         c27      1
					//   _PlaneNormalLocal         c28      1
					//   _PlaneForwardLocal        c29      1
					//
					
					    vs_3_0
					    def c30, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c31, 1.57072878, -2, 3.14159274, 0
					    def c32, 6.28318024, 0.159155071, 1, 0
					    def c33, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord5 o5.x
					    add r0.xyz, -c27.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c28
					    mad r0.xyz, c28.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c29.zxyw
					    mad r1.xyz, c29.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c29.yzxw, r0
					    dp3 r0.y, r1, c28
					    slt r0.y, r0.y, c31.w
					    mad r0.z, r0_abs.x, c30.y, c30.z
					    mad r0.z, r0.z, r0_abs.x, c30.w
					    mad r0.z, r0.z, r0_abs.x, c31.x
					    add r0.w, -r0_abs.x, c30.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c31.y, c31.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c32.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c32.y
					    mad r0, v0.xyzx, c32.zzzw, c32.wwwz
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.w, c7, r0
					    dp4 r0.x, c6, r0
					    mul r0.yzw, c12.xxyz, v1.y
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c21, r2
					    dp4 r3.y, c22, r2
					    dp4 r3.z, c23, r2
					    mad r0.yzw, c24.xxyz, r0.y, r3.xxyz
					    mov r1.w, c30.x
					    dp4 r2.x, c18, r1
					    dp4 r2.y, c19, r1
					    dp4 r2.z, c20, r1
					    add r0.yzw, r0, r2.xxyz
					    max r2.xyz, r0.yzww, c31.w
					    log r3.x, r2.x
					    log r3.y, r2.y
					    log r3.z, r2.z
					    mul r2.xyz, r3, c33.x
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    mad r2.xyz, r3, c33.y, c33.z
					    max r2.xyz, r2, c31.w
					    abs r1.w, c26.w
					    sge r1.w, -r1.w, r1.w
					    lrp r3.xyz, r1.w, r2, r0.yzww
					    max r0.yzw, r3.xxyz, c31.w
					    dp4 r2.y, c9, v0
					    add r3, -r2.y, c15
					    mul r4, r1.y, r3
					    mul r3, r3, r3
					    dp4 r2.x, c8, v0
					    add r5, -r2.x, c14
					    mad r4, r5, r1.x, r4
					    mad r3, r5, r5, r3
					    dp4 r2.z, c10, v0
					    add r5, -r2.z, c16
					    mov o2.xyz, r2
					    mad r2, r5, r1.z, r4
					    mov o1.xyz, r1
					    mad r1, r5, r5, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r4.x, c30.x
					    mad r1, r1, c17, r4.x
					    mul r2, r2, r3
					    max r2, r2, c31.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r2.xyz, r1.y, c1
					    mad r2.xyz, c0, r1.x, r2
					    mad r1.xyz, c2, r1.z, r2
					    mad r1.xyz, c3, r1.w, r1
					    add o4.xyz, r0.yzww, r1
					    mul r0.y, r0.x, c25.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o5.x, r0.x
					
					// approximately 97 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat18 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat12 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat18 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = u_xlat18 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat12 * u_xlat18 + u_xlat0.x;
					    u_xlat12 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb6) ? u_xlat12 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat0.y * u_xlat0.y;
					    u_xlat19 = u_xlat0.x * u_xlat0.x + (-u_xlat19);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat0.xxxx + u_xlat4;
					    u_xlat0 = u_xlat1 * u_xlat0.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					float u_xlat13;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat18 = u_xlat1.z * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    vs_TEXCOORD5 = exp2(u_xlat18);
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat18 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat18 = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb1 = u_xlat1.x<0.0;
					    u_xlat7 = abs(u_xlat18) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat18) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat18) + 1.57072878;
					    u_xlat13 = -abs(u_xlat18) + 1.0;
					    u_xlatb18 = u_xlat18<(-u_xlat18);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlat19 = u_xlat13 * u_xlat7;
					    u_xlat19 = u_xlat19 * -2.0 + 3.14159274;
					    u_xlat18 = u_xlatb18 ? u_xlat19 : float(0.0);
					    u_xlat18 = u_xlat7 * u_xlat13 + u_xlat18;
					    u_xlat7 = (-u_xlat18) + 6.28318024;
					    u_xlat18 = (u_xlatb1) ? u_xlat7 : u_xlat18;
					    vs_TEXCOORD2 = u_xlat18 * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat18 = u_xlat1.y * u_xlat1.y;
					    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat1);
					    u_xlat3.y = dot(unity_SHAg, u_xlat1);
					    u_xlat3.z = dot(unity_SHAb, u_xlat1);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat12;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD5 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat18 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat6 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat12 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat12 = u_xlat12 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat18 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat1.x = u_xlat18 * u_xlat12;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat12 * u_xlat18 + u_xlat0.x;
					    u_xlat12 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb6) ? u_xlat12 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat0.y * u_xlat0.y;
					    u_xlat19 = u_xlat0.x * u_xlat0.x + (-u_xlat19);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat3.x = dot(unity_SHAr, u_xlat0);
					    u_xlat3.y = dot(unity_SHAg, u_xlat0);
					    u_xlat3.z = dot(unity_SHAb, u_xlat0);
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat0.xxxx + u_xlat4;
					    u_xlat0 = u_xlat1 * u_xlat0.zzzz + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat1.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o5.zw, v2.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c15.w
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o5.zw, v2.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c15.w
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _ProjectionParams         c14      1
					//   _ScreenParams             c15      1
					//   unity_4LightPosX0         c16      1
					//   unity_4LightPosY0         c17      1
					//   unity_4LightPosZ0         c18      1
					//   unity_4LightAtten0        c19      1
					//   unity_SHAr                c20      1
					//   unity_SHAg                c21      1
					//   unity_SHAb                c22      1
					//   unity_SHBr                c23      1
					//   unity_SHBg                c24      1
					//   unity_SHBb                c25      1
					//   unity_SHC                 c26      1
					//   unity_FogParams           c27      1
					//   unity_ColorSpaceLuminance c28      1
					//   _PlaneCenterLocal         c29      1
					//   _PlaneNormalLocal         c30      1
					//   _PlaneForwardLocal        c31      1
					//
					
					    vs_3_0
					    def c32, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c33, 1.57072878, -2, 3.14159274, 0
					    def c34, 6.28318024, 0.159155071, 1, 0
					    def c35, 0.416666657, 1.05499995, -0.0549999997, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    add r0.xyz, -c29.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c30
					    mad r0.xyz, c30.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c31.zxyw
					    mad r1.xyz, c31.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c31.yzxw, r0
					    dp3 r0.y, r1, c30
					    slt r0.y, r0.y, c33.w
					    mad r0.z, r0_abs.x, c32.y, c32.z
					    mad r0.z, r0.z, r0_abs.x, c32.w
					    mad r0.z, r0.z, r0_abs.x, c33.x
					    add r0.w, -r0_abs.x, c32.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c33.y, c33.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c34.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c34.y
					    mul r0.xyz, c12, v1.y
					    mad r0.xyz, c11, v1.x, r0
					    mad r0.xyz, c13, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c23, r2
					    dp4 r3.y, c24, r2
					    dp4 r3.z, c25, r2
					    mad r0.xyz, c26, r0.x, r3
					    mov r1.w, c32.x
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    add r0.xyz, r0, r2
					    max r2.xyz, r0, c33.w
					    log r3.x, r2.x
					    log r3.y, r2.y
					    log r3.z, r2.z
					    mul r2.xyz, r3, c35.x
					    exp r3.x, r2.x
					    exp r3.y, r2.y
					    exp r3.z, r2.z
					    mad r2.xyz, r3, c35.y, c35.z
					    max r2.xyz, r2, c33.w
					    abs r0.w, c28.w
					    sge r0.w, -r0.w, r0.w
					    lrp r3.xyz, r0.w, r2, r0
					    max r0.xyz, r3, c33.w
					    dp4 r2.y, c9, v0
					    add r3, -r2.y, c17
					    mul r4, r1.y, r3
					    mul r3, r3, r3
					    dp4 r2.x, c8, v0
					    add r5, -r2.x, c16
					    mad r4, r5, r1.x, r4
					    mad r3, r5, r5, r3
					    dp4 r2.z, c10, v0
					    add r5, -r2.z, c18
					    mov o2.xyz, r2
					    mad r2, r5, r1.z, r4
					    mov o1.xyz, r1
					    mad r1, r5, r5, r3
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mov r4.x, c32.x
					    mad r1, r1, c19, r4.x
					    mul r2, r2, r3
					    max r2, r2, c33.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r2.xyz, r1.y, c1
					    mad r2.xyz, c0, r1.x, r2
					    mad r1.xyz, c2, r1.z, r2
					    mad r1.xyz, c3, r1.w, r1
					    add o4.xyz, r0, r1
					    mad r0, v0.xyzx, c34.zzzw, c34.wwwz
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c35.w
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c35.w
					    mov o0, r1
					    mov o5.zw, r1
					    mul r0.x, r1.z, c27.x
					    mul r0.x, r0.x, -r0.x
					    exp o6.x, r0.x
					    mad o5.xy, r2.z, c15.zwzw, r2.xwzw
					
					// approximately 102 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat15;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat22 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat22) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat8 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb8 = u_xlat8<0.0;
					    u_xlat15 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat22 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat2.x = u_xlat22 * u_xlat15;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat15 * u_xlat22 + u_xlat1.x;
					    u_xlat15 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb8) ? u_xlat15 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);
					    vs_TEXCOORD5 = exp2(u_xlat2.x);
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat1.x * u_xlat1.x + (-u_xlat23);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat23) + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb22)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_6_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat9;
					int u_xlati14;
					float u_xlat16;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati21 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati21 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati21] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati21 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati21 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat21 = dot(u_xlat2.zxy, _PlaneNormalLocal.xyz);
					    u_xlat2.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _PlaneForwardLocal.zxy;
					    u_xlat3.xyz = _PlaneForwardLocal.yzx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat21 = dot(_PlaneForwardLocal.yzx, u_xlat2.xyz);
					    u_xlat2.x = dot(u_xlat3.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2.x<0.0;
					    u_xlat9 = abs(u_xlat21) * -0.0187292993 + 0.0742610022;
					    u_xlat9 = u_xlat9 * abs(u_xlat21) + -0.212114394;
					    u_xlat9 = u_xlat9 * abs(u_xlat21) + 1.57072878;
					    u_xlat16 = -abs(u_xlat21) + 1.0;
					    u_xlatb21 = u_xlat21<(-u_xlat21);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlat23 = u_xlat16 * u_xlat9;
					    u_xlat23 = u_xlat23 * -2.0 + 3.14159274;
					    u_xlat21 = u_xlatb21 ? u_xlat23 : float(0.0);
					    u_xlat21 = u_xlat9 * u_xlat16 + u_xlat21;
					    u_xlat9 = (-u_xlat21) + 6.28318024;
					    u_xlat21 = (u_xlatb2) ? u_xlat9 : u_xlat21;
					    vs_TEXCOORD2 = u_xlat21 * 0.159155071;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    u_xlat21 = u_xlat1.z * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    vs_TEXCOORD5 = exp2(u_xlat21);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat2.y * u_xlat2.y;
					    u_xlat21 = u_xlat2.x * u_xlat2.x + (-u_xlat21);
					    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat2);
					    u_xlat4.y = dot(unity_SHAg, u_xlat2);
					    u_xlat4.z = dot(unity_SHAb, u_xlat2);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb21 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat3.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat2.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat2.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati14 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD4.zw = u_xlat1.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[31];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat15;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat22 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat22) + u_xlat1.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat8 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb8 = u_xlat8<0.0;
					    u_xlat15 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat15 = u_xlat15 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat22 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat22 = sqrt(u_xlat22);
					    u_xlat2.x = u_xlat22 * u_xlat15;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat15 * u_xlat22 + u_xlat1.x;
					    u_xlat15 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb8) ? u_xlat15 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat2.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);
					    vs_TEXCOORD5 = exp2(u_xlat2.x);
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    u_xlat23 = u_xlat1.y * u_xlat1.y;
					    u_xlat23 = u_xlat1.x * u_xlat1.x + (-u_xlat23);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat4.x = dot(unity_SHBr, u_xlat3);
					    u_xlat4.y = dot(unity_SHBg, u_xlat3);
					    u_xlat4.z = dot(unity_SHBb, u_xlat3);
					    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat23) + u_xlat4.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat4.x = dot(unity_SHAr, u_xlat1);
					    u_xlat4.y = dot(unity_SHAg, u_xlat1);
					    u_xlat4.z = dot(unity_SHAb, u_xlat1);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat6 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat6 * u_xlat1.xxxx + u_xlat5;
					    u_xlat1 = u_xlat2 * u_xlat1.zzzz + u_xlat5;
					    u_xlat4 = u_xlat6 * u_xlat6 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_2_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_2_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o6.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c17.w
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _PlaneCenterLocal       c13      1
					//   _PlaneNormalLocal       c14      1
					//   _PlaneForwardLocal      c15      1
					//
					
					    vs_3_0
					    def c16, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c17, 1.57072878, -2, 3.14159274, 0
					    def c18, 6.28318024, 0.159155071, 1, 0
					    def c19, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    add r0.xyz, -c13.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c14
					    mad r0.xyz, c14.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c15.zxyw
					    mad r1.xyz, c15.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c15.yzxw, r0
					    dp3 r0.y, r1, c14
					    slt r0.y, r0.y, c17.w
					    mad r0.z, r0_abs.x, c16.y, c16.z
					    mad r0.z, r0.z, r0_abs.x, c16.w
					    mad r0.z, r0.z, r0_abs.x, c17.x
					    add r0.w, -r0_abs.x, c16.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c17.y, c17.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c18.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c18.y
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o6.zw, v2.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c18.zzzw, c18.wwwz
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c19.x
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c19.x
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c17.w
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4 = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat7;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat10 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat1.x = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat4.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4.x<0.0;
					    u_xlat7 = abs(u_xlat1.x) * -0.0187292993 + 0.0742610022;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + -0.212114394;
					    u_xlat7 = u_xlat7 * abs(u_xlat1.x) + 1.57072878;
					    u_xlat10 = -abs(u_xlat1.x) + 1.0;
					    u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat2.x = u_xlat10 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * -2.0 + 3.14159274;
					    u_xlat1.x = u_xlatb1 ? u_xlat2.x : float(0.0);
					    u_xlat1.x = u_xlat7 * u_xlat10 + u_xlat1.x;
					    u_xlat7 = (-u_xlat1.x) + 6.28318024;
					    u_xlat1.x = (u_xlatb4) ? u_xlat7 : u_xlat1.x;
					    vs_TEXCOORD2 = u_xlat1.x * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD0.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Progress                      c5       1
					//   _Color                         c6       1
					//   _BackgroundColor               c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//
					
					    ps_3_0
					    def c8, 6, 1, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3_pp v3.xyz
					    dcl_cube s0
					    dcl_2d s1
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c8.x
					    texldl_pp r0, r0, s0
					    pow_pp r1.w, r0.w, c2.y
					    mul_pp r0.w, r1.w, c2.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_pp r0.w, r1, r2
					    add_pp r1.w, r0.w, r0.w
					    mov_sat_pp r0.w, r0.w
					    add_pp r3.y, -r0.w, c8.y
					    mad_pp r1.xyz, r2, -r1.w, r1
					    dp3_pp r3.x, r1, c1
					    mul_pp r1.xy, r3, r3
					    mul_pp r1.xy, r1, r1
					    mov r0.w, c3.w
					    add_sat_pp r0.w, -r0.w, c8.y
					    lrp_pp r2.xyz, r1.y, r0.w, c3
					    mul_pp r0.xyz, r0, r2
					    add r0.w, c5.x, -v2.x
					    mov r2.xyz, c6
					    cmp_pp r2.xyz, r0.w, r2, c7
					    mul_pp r2.xyz, r2, c3.w
					    mad_pp r0.xyz, v3, r2, r0
					    mov_pp r1.z, c8.y
					    texld r1, r1.xzzw, s1
					    mul_pp r0.w, r1.x, c8.z
					    mad_pp r1.xyz, r0.w, c3, r2
					    dp3_sat_pp r0.w, v0, c1
					    mul_pp r2.xyz, r0.w, c4
					    mad_pp oC0.xyz, r1, r2, r0
					    mov_pp oC0.w, c8.y
					
					// approximately 43 instruction slots used (3 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat10 = u_xlat9 + u_xlat9;
					    u_xlat9 = u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat9) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat9 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat3 = u_xlat3 + u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat3)) + (-u_xlat1.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat3 = log2(u_xlat1.w);
					    u_xlat3 = u_xlat3 * unity_SpecCube0_HDR.y;
					    u_xlat3 = exp2(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat3);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb3 = _Progress<vs_TEXCOORD2;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat12)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat12 = log2(u_xlat1.w);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12);
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat4) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat10 = u_xlat9 + u_xlat9;
					    u_xlat9 = u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat9) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat9 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat3 = u_xlat3 + u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat3)) + (-u_xlat1.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat3 = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat3);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb3 = _Progress<vs_TEXCOORD2;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Progress                      c14      1
					//   _Color                         c15      1
					//   _BackgroundColor               c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//
					
					    ps_3_0
					    def c17, 0, 6, 0.999989986, 0.00100000005
					    def c18, 31.622776, 9.99999975e-006, 1, -0.5
					    def c19, 0.5, 9.99999975e-005, 0.00999999978, 0.720000029
					    def c20, 0, 1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord6 v3.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c14.x, -v2.x
					    mov r2.xyz, c15
					    cmp_pp r2.xyz, r1.w, r2, c16
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c17.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xyz, v0, -r1.w, -r1
					    texld_pp r4, v3.zwzw, s0
					    mul_pp r1.w, r4.w, c12.x
					    mul_pp r4.xyz, r4, r1.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c12.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    mov r4.xz, c17
					    if_lt -c4.w, r4.x
					      nrm_pp r6.xyz, r3
					      add r7.xyz, c2, -v1
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c3, -v1
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r1.w, r7.y, r7.x
					      min_pp r4.y, r7.z, r1.w
					      add r7.xyz, -c4, v1
					      mad_pp r6.xyz, r6, r4.y, r7
					    else
					      mov_pp r6.xyz, r3
					    endif
					    mov_pp r6.w, c17.y
					    texldl_pp r6, r6, s1
					    pow_pp r1.w, r6.w, c5.y
					    mul_pp r1.w, r1.w, c5.x
					    mul_pp r7.xyz, r6, r1.w
					    if_lt c3.w, r4.z
					      if_lt -c8.w, r4.x
					        nrm_pp r4.xyz, r3
					        add r8.xyz, c6, -v1
					        rcp r9.x, r4.x
					        rcp r9.y, r4.y
					        rcp r9.z, r4.z
					        mul_pp r8.xyz, r8, r9
					        add r10.xyz, c7, -v1
					        mul_pp r9.xyz, r9, r10
					        cmp_pp r8.xyz, -r4, r9, r8
					        min_pp r4.w, r8.y, r8.x
					        min_pp r5.w, r8.z, r4.w
					        add r8.xyz, -c8, v1
					        mad_pp r3.xyz, r4, r5.w, r8
					      endif
					      mov_pp r3.w, c17.y
					      texldl_pp r3, r3, s2
					      pow_pp r4.x, r3.w, c9.y
					      mul_pp r3.w, r4.x, c9.x
					      mul_pp r3.xyz, r3, r3.w
					      mad r4.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c3.w, r4, r3
					    endif
					    nrm_pp r3.xyz, v0
					    mul_pp r2.xyz, r2, c10.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r1.w, -r0.w, c17.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c18.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r3, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c18.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c18.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c18.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    dp2add_pp r0.w, r1.y, r1.y, c18.w
					    mad_pp r0.y, r0.w, r0.y, c18.z
					    mad_pp r0.w, r0.w, r0.z, c18.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, -c18.w
					    abs r1.x, c11.w
					    mad r0.x, r0.x, -c19.x, c19.y
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c19.z, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c19.w, c19.x
					    dp3_pp r1.x, c10, c10
					    cmp r1.x, -r1.x, c20.x, c20.y
					    mul_pp r0.x, r0.x, r1.x
					    mov r3, c10
					    add_pp r3, -r3.wxyz, c18.z
					    mov_sat_pp r3.x, r3.x
					    mad_pp r1.xzw, c13.xyyz, r0.y, r5.xyyz
					    mul_pp r4.xyz, r0.x, c13
					    add_pp r0.x, -r1.y, c18.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r3.yzw, r3, r0.x, c10.xxyz
					    mul_pp r3.yzw, r3, r4.xxyz
					    mad_pp r1.xyz, r2, r1.xzww, r3.yzww
					    mul_pp r0.xyw, r7.xyzz, r0.w
					    lrp_pp r2.xyz, r0.z, r3.x, c10
					    mad_pp oC0.xyz, r0.xyww, r2, r1
					    mov_pp oC0.w, c18.z
					
					// approximately 143 instruction slots used (5 texture, 138 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_SpecCube0_HDR            c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_Lightmap_HDR             c3       1
					//   _Progress                      c4       1
					//   _Color                         c5       1
					//   _BackgroundColor               c6       1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//
					
					    ps_3_0
					    def c7, 6, 1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_cube s1
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c7.x
					    texldl_pp r0, r0, s1
					    pow_pp r1.w, r0.w, c1.y
					    mul_pp r0.w, r1.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_sat_pp r0.w, r2, r1
					    add_pp r0.w, -r0.w, c7.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r0.w
					    mov r1.w, c2.w
					    add_sat_pp r1.x, -r1.w, c7.y
					    lrp_pp r2.xyz, r0.w, r1.x, c2
					    mul_pp r0.xyz, r0, r2
					    texld_pp r1, v3, s0
					    pow_pp r0.w, r1.w, c3.y
					    mul_pp r0.w, r0.w, c3.x
					    mul_pp r1.xyz, r1, r0.w
					    add r0.w, c4.x, -v2.x
					    mov r2.xyz, c5
					    cmp_pp r2.xyz, r0.w, r2, c6
					    mul_pp r2.xyz, r2, c2.w
					    mad_pp oC0.xyz, r1, r2, r0
					    mov_pp oC0.w, c7.y
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_2_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_2_2[4];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat9 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_SpecCube0_BoxMax         c1       1
					//   unity_SpecCube0_BoxMin         c2       1
					//   unity_SpecCube0_ProbePosition  c3       1
					//   unity_SpecCube0_HDR            c4       1
					//   unity_SpecCube1_BoxMax         c5       1
					//   unity_SpecCube1_BoxMin         c6       1
					//   unity_SpecCube1_ProbePosition  c7       1
					//   unity_SpecCube1_HDR            c8       1
					//   unity_ColorSpaceDielectricSpec c9       1
					//   unity_ColorSpaceLuminance      c10      1
					//   unity_Lightmap_HDR             c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _Progress                      c13      1
					//   _Color                         c14      1
					//   _BackgroundColor               c15      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//
					
					    ps_3_0
					    def c16, 0, 6, 0.999989986, 1
					    def c17, 0.720000029, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    add r0.x, c13.x, -v2.x
					    mov r2.xyz, c14
					    cmp_pp r0.xyz, r0.x, r2, c15
					    dp3_pp r0.w, -r1, v0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r2.xyz, v0, -r0.w, -r1
					    texld_pp r3, v3, s0
					    pow_pp r0.w, r3.w, c11.y
					    mul_pp r0.w, r0.w, c11.x
					    texld_pp r4, v3.zwzw, s1
					    mul_pp r1.w, r4.w, c12.x
					    mul_pp r4.xyz, r4, r1.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c12.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    mad_pp r3.xyz, r0.w, r3, r5
					    mov r4.xzw, c16
					    if_lt -c3.w, r4.x
					      nrm_pp r5.xyz, r2
					      add r6.xyz, c1, -v1
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c2, -v1
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r0.w, r6.y, r6.x
					      min_pp r1.w, r6.z, r0.w
					      add r6.xyz, -c3, v1
					      mad_pp r5.xyz, r5, r1.w, r6
					    else
					      mov_pp r5.xyz, r2
					    endif
					    mov_pp r5.w, c16.y
					    texldl_pp r5, r5, s2
					    pow_pp r0.w, r5.w, c4.y
					    mul_pp r0.w, r0.w, c4.x
					    mul_pp r6.xyz, r5, r0.w
					    if_lt c2.w, r4.z
					      if_lt -c7.w, r4.x
					        nrm_pp r4.xyz, r2
					        add r7.xyz, c5, -v1
					        rcp r8.x, r4.x
					        rcp r8.y, r4.y
					        rcp r8.z, r4.z
					        mul_pp r7.xyz, r7, r8
					        add r9.xyz, c6, -v1
					        mul_pp r8.xyz, r8, r9
					        cmp_pp r7.xyz, -r4, r8, r7
					        min_pp r1.w, r7.y, r7.x
					        min_pp r3.w, r7.z, r1.w
					        add r7.xyz, -c7, v1
					        mad_pp r2.xyz, r4, r3.w, r7
					      endif
					      mov_pp r2.w, c16.y
					      texldl_pp r2, r2, s3
					      pow_pp r1.w, r2.w, c8.y
					      mul_pp r1.w, r1.w, c8.x
					      mul_pp r2.xyz, r2, r1.w
					      mad r4.xyz, r0.w, r5, -r2
					      mad_pp r6.xyz, c2.w, r4, r2
					    endif
					    nrm_pp r2.xyz, v0
					    mul_pp r0.xyz, r0, c9.w
					    dp3_pp r0.w, r2, r1
					    abs r1.x, c10.w
					    cmp_pp r1.x, -r1.x, c17.x, c17.y
					    add_sat_pp r1.y, r4.w, -c9.w
					    mul_pp r1.xzw, r6.xyyz, r1.x
					    add_pp r2.x, -r0.w, c16.w
					    cmp_pp r0.w, r0.w, r2.x, c16.w
					    mul_pp r2.x, r0.w, r0.w
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.w, r0.w, r2.x
					    lrp_pp r2.xyz, r0.w, r1.y, c9
					    mul_pp r1.xyz, r1.xzww, r2
					    mad_pp oC0.xyz, r0, r3, r1
					    mov_pp oC0.w, c16.w
					
					// approximately 107 instruction slots used (6 texture, 101 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat2.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat2.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Progress                      c14      1
					//   _Color                         c15      1
					//   _BackgroundColor               c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//
					
					    ps_3_0
					    def c17, 0, -0.5, 0.5, 9.99999975e-005
					    def c18, 10000, 6, 0.999989986, 0.00100000005
					    def c19, 31.622776, 9.99999975e-006, 1, 0.00999999978
					    def c20, 0.720000029, 0.5, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord6 v3.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c14.x, -v2.x
					    mov r2.xyz, c15
					    cmp_pp r2.xyz, r1.w, r2, c16
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c17.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xyz, v0, -r1.w, -r1
					    texld_pp r4, v3.zwzw, s0
					    mul_pp r1.w, r4.w, c12.x
					    mul_pp r4.xyz, r4, r1.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c12.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    texld_pp r4, v3.zwzw, s1
					    add_pp r4.xyz, r4, c17.y
					    dp3_pp r1.w, v0, r4
					    add_pp r1.w, r1.w, c17.z
					    mul_pp r4.xyz, r1.w, r5
					    add r1.w, -r4.w, c17.w
					    rcp r4.w, r4.w
					    cmp r1.w, r1.w, c18.x, r4.w
					    mov r5.x, c17.x
					    if_lt -c4.w, r5.x
					      nrm_pp r6.xyz, r3
					      add r5.yzw, c2.xxyz, -v1.xxyz
					      rcp r7.x, r6.x
					      rcp r7.y, r6.y
					      rcp r7.z, r6.z
					      mul_pp r5.yzw, r5, r7.xxyz
					      add r8.xyz, c3, -v1
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r5.yzw, -r6.xxyz, r7.xxyz, r5
					      min_pp r4.w, r5.z, r5.y
					      min_pp r6.w, r5.w, r4.w
					      add r5.yzw, -c4.xxyz, v1.xxyz
					      mad_pp r6.xyz, r6, r6.w, r5.yzww
					    else
					      mov_pp r6.xyz, r3
					    endif
					    mov_pp r6.w, c18.y
					    texldl_pp r6, r6, s2
					    pow_pp r4.w, r6.w, c5.y
					    mul_pp r4.w, r4.w, c5.x
					    mul_pp r5.yzw, r6.xxyz, r4.w
					    mov r6.w, c3.w
					    if_lt r6.w, c18.z
					      if_lt -c8.w, r5.x
					        nrm_pp r7.xyz, r3
					        add r8.xyz, c6, -v1
					        rcp r9.x, r7.x
					        rcp r9.y, r7.y
					        rcp r9.z, r7.z
					        mul_pp r8.xyz, r8, r9
					        add r10.xyz, c7, -v1
					        mul_pp r9.xyz, r9, r10
					        cmp_pp r8.xyz, -r7, r9, r8
					        min_pp r5.x, r8.y, r8.x
					        min_pp r6.w, r8.z, r5.x
					        add r8.xyz, -c8, v1
					        mad_pp r3.xyz, r7, r6.w, r8
					      endif
					      mov_pp r3.w, c18.y
					      texldl_pp r3, r3, s3
					      pow_pp r5.x, r3.w, c9.y
					      mul_pp r3.w, r5.x, c9.x
					      mul_pp r3.xyz, r3, r3.w
					      mad r6.xyz, r4.w, r6, -r3
					      mad_pp r5.yzw, c3.w, r6.xxyz, r3.xxyz
					    endif
					    nrm_pp r3.xyz, v0
					    mul_pp r2.xyz, r2, c10.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r3.w, -r0.w, c18.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r3.w, c19.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r3, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c19.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c19.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    add_pp r0.w, r1.y, r1.y
					    mad_pp r0.w, r0.w, r1.y, c17.y
					    mad_pp r0.y, r0.w, r0.y, c19.z
					    mad_pp r0.w, r0.w, r0.z, c19.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, c17.z
					    abs r1.x, c11.w
					    mad r0.x, r0.x, -c17.z, c17.w
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c19.w, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c20.x, c20.y
					    dp3_pp r1.x, c10, c10
					    cmp r1.x, -r1.x, c20.z, c20.w
					    mul_pp r0.x, r0.x, r1.x
					    mov r3, c10
					    add_pp r3, -r3.wxyz, c19.z
					    mov_sat_pp r3.x, r3.x
					    mul_pp r6.xyz, r0.y, c13
					    mad_pp r1.xzw, r4.xyyz, r1.w, r6.xyyz
					    mul_pp r4.xyz, r0.x, c13
					    add_pp r0.x, -r1.y, c19.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r3.yzw, r3, r0.x, c10.xxyz
					    mul_pp r3.yzw, r3, r4.xxyz
					    mad_pp r1.xyz, r2, r1.xzww, r3.yzww
					    mul_pp r0.xyw, r5.yzzw, r0.w
					    lrp_pp r2.xyz, r0.z, r3.x, c10
					    mad_pp oC0.xyz, r0.xyww, r2, r1
					    mov_pp oC0.w, c19.z
					
					// approximately 153 instruction slots used (6 texture, 147 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, u_xlat5.xyz);
					    u_xlat35 = u_xlat35 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat35 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat35);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, u_xlat5.xyz);
					    u_xlat35 = u_xlat35 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat35 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat35);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   _LightColor0                   c4       1
					//   _Progress                      c5       1
					//   _Color                         c6       1
					//   _BackgroundColor               c7       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_3_0
					    def c8, 6, 1, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c8.x
					    texldl_pp r0, r0, s0
					    pow_pp r1.w, r0.w, c2.y
					    mul_pp r0.w, r1.w, c2.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_pp r0.w, r1, r2
					    add_pp r1.w, r0.w, r0.w
					    mov_sat_pp r0.w, r0.w
					    add_pp r3.y, -r0.w, c8.y
					    mad_pp r1.xyz, r2, -r1.w, r1
					    dp3_pp r3.x, r1, c1
					    mul_pp r1.xy, r3, r3
					    mul_pp r1.xy, r1, r1
					    mov r0.w, c3.w
					    add_sat_pp r0.w, -r0.w, c8.y
					    lrp_pp r2.xyz, r1.y, r0.w, c3
					    mul_pp r0.xyz, r0, r2
					    add r0.w, c5.x, -v2.x
					    mov r2.xyz, c6
					    cmp_pp r2.xyz, r0.w, r2, c7
					    mul_pp r2.xyz, r2, c3.w
					    mad_pp r0.xyz, v3, r2, r0
					    texldp_pp r3, v4, s2
					    mul_pp r3.xyz, r3.x, c4
					    dp3_sat_pp r0.w, v0, c1
					    mul_pp r3.xyz, r0.w, r3
					    mov_pp r1.z, c8.y
					    texld r1, r1.xzzw, s1
					    mul_pp r0.w, r1.x, c8.z
					    mad_pp r1.xyz, r0.w, c3, r2
					    mad_pp oC0.xyz, r1, r3, r0
					    mov_pp oC0.w, c8.y
					
					// approximately 45 instruction slots used (4 texture, 41 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat13)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat4.x = log2(u_xlat1.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xxx;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat4.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat4.xz);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat12)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat12 = log2(u_xlat1.w);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12);
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat4.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat4.xz);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat13)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat4.x = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xxx;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat4.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat4.xz);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Progress                      c14      1
					//   _Color                         c15      1
					//   _BackgroundColor               c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _ShadowMapTexture              s3       1
					//
					
					    ps_3_0
					    def c17, 0, 6, 0.999989986, 0.00100000005
					    def c18, 31.622776, 9.99999975e-006, 1, -0.5
					    def c19, 0.5, 9.99999975e-005, 0.00999999978, 0.720000029
					    def c20, 0, 1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c14.x, -v2.x
					    mov r2.xyz, c15
					    cmp_pp r2.xyz, r1.w, r2, c16
					    texldp_pp r3, v3, s3
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c17.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r4.xyz, v0, -r1.w, -r1
					    mul_pp r3.xyz, r3.x, c13
					    texld_pp r5, v4.zwzw, s0
					    mul_pp r1.w, r5.w, c12.x
					    mul_pp r5.xyz, r5, r1.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c12.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    mov r5.xz, c17
					    if_lt -c4.w, r5.x
					      nrm_pp r7.xyz, r4
					      add r8.xyz, c2, -v1
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c3, -v1
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r1.w, r8.y, r8.x
					      min_pp r3.w, r8.z, r1.w
					      add r8.xyz, -c4, v1
					      mad_pp r7.xyz, r7, r3.w, r8
					    else
					      mov_pp r7.xyz, r4
					    endif
					    mov_pp r7.w, c17.y
					    texldl_pp r7, r7, s1
					    pow_pp r1.w, r7.w, c5.y
					    mul_pp r1.w, r1.w, c5.x
					    mul_pp r8.xyz, r7, r1.w
					    if_lt c3.w, r5.z
					      if_lt -c8.w, r5.x
					        nrm_pp r5.xyz, r4
					        add r9.xyz, c6, -v1
					        rcp r10.x, r5.x
					        rcp r10.y, r5.y
					        rcp r10.z, r5.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c7, -v1
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r5, r10, r9
					        min_pp r3.w, r9.y, r9.x
					        min_pp r5.w, r9.z, r3.w
					        add r9.xyz, -c8, v1
					        mad_pp r4.xyz, r5, r5.w, r9
					      endif
					      mov_pp r4.w, c17.y
					      texldl_pp r4, r4, s2
					      pow_pp r3.w, r4.w, c9.y
					      mul_pp r3.w, r3.w, c9.x
					      mul_pp r4.xyz, r4, r3.w
					      mad r5.xyz, r1.w, r7, -r4
					      mad_pp r8.xyz, c3.w, r5, r4
					    endif
					    nrm_pp r4.xyz, v0
					    mul_pp r2.xyz, r2, c10.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r1.w, -r0.w, c17.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c18.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c18.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c18.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c18.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    dp2add_pp r0.w, r1.y, r1.y, c18.w
					    mad_pp r0.y, r0.w, r0.y, c18.z
					    mad_pp r0.w, r0.w, r0.z, c18.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, -c18.w
					    abs r1.x, c11.w
					    mad r0.x, r0.x, -c19.x, c19.y
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c19.z, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c19.w, c19.x
					    dp3_pp r1.x, c10, c10
					    cmp r1.x, -r1.x, c20.x, c20.y
					    mul_pp r0.x, r0.x, r1.x
					    mov r4, c10
					    add_pp r4, -r4.wxyz, c18.z
					    mov_sat_pp r4.x, r4.x
					    mad_pp r1.xzw, r3.xyyz, r0.y, r6.xyyz
					    mul_pp r3.xyz, r3, r0.x
					    add_pp r0.x, -r1.y, c18.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r4.yzw, r4, r0.x, c10.xxyz
					    mul_pp r3.xyz, r3, r4.yzww
					    mad_pp r1.xyz, r2, r1.xzww, r3
					    mul_pp r0.xyw, r8.xyzz, r0.w
					    lrp_pp r2.xyz, r0.z, r4.x, c10
					    mad_pp oC0.xyz, r0.xyww, r2, r1
					    mov_pp oC0.w, c18.z
					
					// approximately 145 instruction slots used (6 texture, 139 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_SpecCube0_HDR            c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   unity_Lightmap_HDR             c5       1
					//   _LightColor0                   c6       1
					//   _Progress                      c7       1
					//   _Color                         c8       1
					//   _BackgroundColor               c9       1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_3_0
					    def c10, 1, 6, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c10.y
					    texldl_pp r0, r0, s1
					    pow_pp r1.w, r0.w, c3.y
					    mul_pp r0.w, r1.w, c3.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_sat_pp r0.w, r2, r1
					    add_pp r0.w, -r0.w, c10.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r0.w
					    mov r1.w, c4.w
					    add_sat_pp r1.x, -r1.w, c10.x
					    lrp_pp r2.xyz, r0.w, r1.x, c4
					    mul_pp r0.xyz, r0, r2
					    texldp_pp r1, v4, s2
					    add_pp r0.w, r1.x, -c2.x
					    add_pp r1.y, -r0.w, c10.x
					    cmp_pp r0.w, r0.w, r1.y, c10.x
					    dp3_sat_pp r1.y, v0, c1
					    mul_pp r0.w, r0.w, r1.y
					    texld_pp r2, v3, s0
					    pow_pp r1.y, r2.w, c5.y
					    mul_pp r1.y, r1.y, c5.x
					    mul_pp r1.yzw, r2.xxyz, r1.y
					    mul_pp r2.xyz, r1.x, r2
					    min_pp r3.xyz, r2, r1.yzww
					    mad_pp r1.xyz, r0.w, -c6, r1.yzww
					    max_pp r2.xyz, r3, r1
					    add r0.w, c7.x, -v2.x
					    mov r1.xyz, c8
					    cmp_pp r1.xyz, r0.w, r1, c9
					    mul_pp r1.xyz, r1, c4.w
					    mad_pp oC0.xyz, r2, r1, r0
					    mov_pp oC0.w, c10.x
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat4.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat4.x = log2(u_xlat2.w);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-vec3(u_xlat9)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_5_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_5_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat4.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat4.x = log2(u_xlat2.w);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-vec3(u_xlat9)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat4.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat4.x = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-vec3(u_xlat9)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_SpecCube0_BoxMax         c3       1
					//   unity_SpecCube0_BoxMin         c4       1
					//   unity_SpecCube0_ProbePosition  c5       1
					//   unity_SpecCube0_HDR            c6       1
					//   unity_SpecCube1_BoxMax         c7       1
					//   unity_SpecCube1_BoxMin         c8       1
					//   unity_SpecCube1_ProbePosition  c9       1
					//   unity_SpecCube1_HDR            c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   unity_Lightmap_HDR             c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Progress                      c16      1
					//   _Color                         c17      1
					//   _BackgroundColor               c18      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c19, 0, 1, 6, 0.999989986
					    def c20, 0.720000029, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    add r0.x, c16.x, -v2.x
					    mov r2.xyz, c17
					    cmp_pp r0.xyz, r0.x, r2, c18
					    texldp_pp r2, v4, s4
					    dp3_pp r0.w, -r1, v0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r3.xyz, v0, -r0.w, -r1
					    texld_pp r4, v3, s0
					    pow_pp r0.w, r4.w, c13.y
					    mul_pp r0.w, r0.w, c13.x
					    mul_pp r2.yzw, r4.xxyz, r0.w
					    add_pp r0.w, r2.x, -c2.x
					    dp3_pp r1.w, v0, c1
					    max_pp r4.w, r1.w, c19.x
					    add_pp r1.w, -r0.w, c19.y
					    cmp_pp r0.w, r0.w, r1.w, c19.y
					    mul_pp r0.w, r0.w, r4.w
					    mad_pp r5.xyz, r0.w, -c15, r2.yzww
					    mul_pp r4.xyz, r2.x, r4
					    min_pp r6.xyz, r4, r2.yzww
					    max_pp r2.xyz, r6, r5
					    texld_pp r4, v3.zwzw, s1
					    mul_pp r0.w, r4.w, c14.x
					    mul_pp r4.xyz, r4, r0.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c14.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    add_pp r2.xyz, r2, r5
					    mov r4.xyw, c19
					    if_lt -c5.w, r4.x
					      nrm_pp r5.xyz, r3
					      add r6.xyz, c3, -v1
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c4, -v1
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r0.w, r6.y, r6.x
					      min_pp r1.w, r6.z, r0.w
					      add r6.xyz, -c5, v1
					      mad_pp r5.xyz, r5, r1.w, r6
					    else
					      mov_pp r5.xyz, r3
					    endif
					    mov_pp r5.w, c19.z
					    texldl_pp r5, r5, s2
					    pow_pp r0.w, r5.w, c6.y
					    mul_pp r0.w, r0.w, c6.x
					    mul_pp r6.xyz, r5, r0.w
					    if_lt c4.w, r4.w
					      if_lt -c9.w, r4.x
					        nrm_pp r7.xyz, r3
					        add r4.xzw, c7.xyyz, -v1.xyyz
					        rcp r8.x, r7.x
					        rcp r8.y, r7.y
					        rcp r8.z, r7.z
					        mul_pp r4.xzw, r4, r8.xyyz
					        add r9.xyz, c8, -v1
					        mul_pp r8.xyz, r8, r9
					        cmp_pp r4.xzw, -r7.xyyz, r8.xyyz, r4
					        min_pp r1.w, r4.z, r4.x
					        min_pp r2.w, r4.w, r1.w
					        add r4.xzw, -c9.xyyz, v1.xyyz
					        mad_pp r3.xyz, r7, r2.w, r4.xzww
					      endif
					      mov_pp r3.w, c19.z
					      texldl_pp r3, r3, s3
					      pow_pp r1.w, r3.w, c10.y
					      mul_pp r1.w, r1.w, c10.x
					      mul_pp r3.xyz, r3, r1.w
					      mad r4.xzw, r0.w, r5.xyyz, -r3.xyyz
					      mad_pp r6.xyz, c4.w, r4.xzww, r3
					    endif
					    nrm_pp r3.xyz, v0
					    mul_pp r0.xyz, r0, c11.w
					    dp3_pp r0.w, r3, r1
					    abs r1.x, c12.w
					    cmp_pp r1.x, -r1.x, c20.x, c20.y
					    add_sat_pp r1.y, r4.y, -c11.w
					    mul_pp r1.xzw, r6.xyyz, r1.x
					    add_pp r2.w, -r0.w, c19.y
					    cmp_pp r0.w, r0.w, r2.w, c19.y
					    mul_pp r2.w, r0.w, r0.w
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r0.w, r0.w, r2.w
					    lrp_pp r3.xyz, r0.w, r1.y, c11
					    mul_pp r1.xyz, r1.xzww, r3
					    mad_pp oC0.xyz, r0, r2, r1
					    mov_pp oC0.w, c19.y
					
					// approximately 119 instruction slots used (7 texture, 112 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec3 u_xlat12;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat12.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat30);
					    u_xlat30 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat31 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat5.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat30 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat12.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec3 u_xlat12;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat12.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat30);
					    u_xlat30 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat31 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat5.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat30 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat12.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Progress                      c14      1
					//   _Color                         c15      1
					//   _BackgroundColor               c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c17, 0, -0.5, 0.5, 9.99999975e-005
					    def c18, 10000, 6, 0.999989986, 0.00100000005
					    def c19, 31.622776, 9.99999975e-006, 1, 0.00999999978
					    def c20, 0.720000029, 0.5, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c14.x, -v2.x
					    mov r2.xyz, c15
					    cmp_pp r2.xyz, r1.w, r2, c16
					    texldp_pp r3, v3, s4
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c17.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r4.xyz, v0, -r1.w, -r1
					    mul_pp r3.xyz, r3.x, c13
					    texld_pp r5, v4.zwzw, s0
					    mul_pp r1.w, r5.w, c12.x
					    mul_pp r5.xyz, r5, r1.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c12.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    texld_pp r5, v4.zwzw, s1
					    add_pp r5.xyz, r5, c17.y
					    dp3_pp r1.w, v0, r5
					    add_pp r1.w, r1.w, c17.z
					    mul_pp r5.xyz, r1.w, r6
					    add r1.w, -r5.w, c17.w
					    rcp r3.w, r5.w
					    cmp r1.w, r1.w, c18.x, r3.w
					    mov r6.x, c17.x
					    if_lt -c4.w, r6.x
					      nrm_pp r7.xyz, r4
					      add r6.yzw, c2.xxyz, -v1.xxyz
					      rcp r8.x, r7.x
					      rcp r8.y, r7.y
					      rcp r8.z, r7.z
					      mul_pp r6.yzw, r6, r8.xxyz
					      add r9.xyz, c3, -v1
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r6.yzw, -r7.xxyz, r8.xxyz, r6
					      min_pp r3.w, r6.z, r6.y
					      min_pp r5.w, r6.w, r3.w
					      add r6.yzw, -c4.xxyz, v1.xxyz
					      mad_pp r7.xyz, r7, r5.w, r6.yzww
					    else
					      mov_pp r7.xyz, r4
					    endif
					    mov_pp r7.w, c18.y
					    texldl_pp r7, r7, s2
					    pow_pp r3.w, r7.w, c5.y
					    mul_pp r3.w, r3.w, c5.x
					    mul_pp r6.yzw, r7.xxyz, r3.w
					    mov r5.w, c3.w
					    if_lt r5.w, c18.z
					      if_lt -c8.w, r6.x
					        nrm_pp r8.xyz, r4
					        add r9.xyz, c6, -v1
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c7, -v1
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r5.w, r9.y, r9.x
					        min_pp r6.x, r9.z, r5.w
					        add r9.xyz, -c8, v1
					        mad_pp r4.xyz, r8, r6.x, r9
					      endif
					      mov_pp r4.w, c18.y
					      texldl_pp r4, r4, s3
					      pow_pp r5.w, r4.w, c9.y
					      mul_pp r4.w, r5.w, c9.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r7.xyz, r3.w, r7, -r4
					      mad_pp r6.yzw, c3.w, r7.xxyz, r4.xxyz
					    endif
					    nrm_pp r4.xyz, v0
					    mul_pp r2.xyz, r2, c10.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r3.w, -r0.w, c18.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r3.w, c19.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c19.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c19.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    add_pp r0.w, r1.y, r1.y
					    mad_pp r0.w, r0.w, r1.y, c17.y
					    mad_pp r0.y, r0.w, r0.y, c19.z
					    mad_pp r0.w, r0.w, r0.z, c19.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, c17.z
					    abs r1.x, c11.w
					    mad r0.x, r0.x, -c17.z, c17.w
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c19.w, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c20.x, c20.y
					    dp3_pp r1.x, c10, c10
					    cmp r1.x, -r1.x, c20.z, c20.w
					    mul_pp r0.x, r0.x, r1.x
					    mov r4, c10
					    add_pp r4, -r4.wxyz, c19.z
					    mov_sat_pp r4.x, r4.x
					    mul_pp r7.xyz, r0.y, r3
					    mad_pp r1.xzw, r5.xyyz, r1.w, r7.xyyz
					    mul_pp r3.xyz, r3, r0.x
					    add_pp r0.x, -r1.y, c19.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r4.yzw, r4, r0.x, c10.xxyz
					    mul_pp r3.xyz, r3, r4.yzww
					    mad_pp r1.xyz, r2, r1.xzww, r3
					    mul_pp r0.xyw, r6.yzzw, r0.w
					    lrp_pp r2.xyz, r0.z, r4.x, c10
					    mad_pp oC0.xyz, r0.xyww, r2, r1
					    mov_pp oC0.w, c19.z
					
					// approximately 155 instruction slots used (7 texture, 148 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, u_xlat6.xyz);
					    u_xlat38 = u_xlat38 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					    u_xlat38 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat38);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, u_xlat6.xyz);
					    u_xlat38 = u_xlat38 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					    u_xlat38 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat38);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_SpecCube0_HDR            c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   _LightColor0                   c5       1
					//   _Progress                      c6       1
					//   _Color                         c7       1
					//   _BackgroundColor               c8       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//
					
					    ps_3_0
					    def c9, 6, 1, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord5 v4.x
					    dcl_cube s0
					    dcl_2d s1
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c9.x
					    texldl_pp r0, r0, s0
					    pow_pp r1.w, r0.w, c3.y
					    mul_pp r0.w, r1.w, c3.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_pp r0.w, r1, r2
					    add_pp r1.w, r0.w, r0.w
					    mov_sat_pp r0.w, r0.w
					    add_pp r3.y, -r0.w, c9.y
					    mad_pp r1.xyz, r2, -r1.w, r1
					    dp3_pp r3.x, r1, c1
					    mul_pp r1.xy, r3, r3
					    mul_pp r1.xy, r1, r1
					    mov r0.w, c4.w
					    add_sat_pp r0.w, -r0.w, c9.y
					    lrp_pp r2.xyz, r1.y, r0.w, c4
					    mul_pp r0.xyz, r0, r2
					    add r0.w, c6.x, -v2.x
					    mov r2.xyz, c7
					    cmp_pp r2.xyz, r0.w, r2, c8
					    mul_pp r2.xyz, r2, c4.w
					    mad_pp r0.xyz, v3, r2, r0
					    mov_pp r1.z, c9.y
					    texld r1, r1.xzzw, s1
					    mul_pp r0.w, r1.x, c9.z
					    mad_pp r1.xyz, r0.w, c4, r2
					    dp3_sat_pp r0.w, v0, c1
					    mul_pp r2.xyz, r0.w, c5
					    mad_pp r0.xyz, r1, r2, r0
					    add r0.xyz, r0, -c2
					    mov_sat r0.w, v4.x
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c9.y
					
					// approximately 46 instruction slots used (3 texture, 43 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat10 = u_xlat9 + u_xlat9;
					    u_xlat9 = u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat9) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat9 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat3 = u_xlat3 + u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat3)) + (-u_xlat1.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat3 = log2(u_xlat1.w);
					    u_xlat3 = u_xlat3 * unity_SpecCube0_HDR.y;
					    u_xlat3 = exp2(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat3);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb3 = _Progress<vs_TEXCOORD2;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_4_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_5_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_5_2[4];
					};
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat12)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat12 = log2(u_xlat1.w);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12);
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat4) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat10 = u_xlat9 + u_xlat9;
					    u_xlat9 = u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat9) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat9 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat3 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat3 = u_xlat3 + u_xlat3;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat3)) + (-u_xlat1.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat3 = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat3);
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb3 = _Progress<vs_TEXCOORD2;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat3) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Progress                      c16      1
					//   _Color                         c17      1
					//   _BackgroundColor               c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//
					
					    ps_3_0
					    def c19, 0, 6, 0.999989986, 0.00100000005
					    def c20, 31.622776, 9.99999975e-006, 1, -0.5
					    def c21, 0.5, 9.99999975e-005, 0.00999999978, 0.720000029
					    def c22, 0, 1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord5 v3.x
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c16.x, -v2.x
					    mov r2.xyz, c17
					    cmp_pp r2.xyz, r1.w, r2, c18
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c19.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xyz, v0, -r1.w, -r1
					    texld_pp r4, v4.zwzw, s0
					    mul_pp r1.w, r4.w, c14.x
					    mul_pp r4.xyz, r4, r1.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c14.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    mov r4.xz, c19
					    if_lt -c6.w, r4.x
					      nrm_pp r6.xyz, r3
					      add r7.xyz, c4, -v1
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c5, -v1
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r1.w, r7.y, r7.x
					      min_pp r4.y, r7.z, r1.w
					      add r7.xyz, -c6, v1
					      mad_pp r6.xyz, r6, r4.y, r7
					    else
					      mov_pp r6.xyz, r3
					    endif
					    mov_pp r6.w, c19.y
					    texldl_pp r6, r6, s1
					    pow_pp r1.w, r6.w, c7.y
					    mul_pp r1.w, r1.w, c7.x
					    mul_pp r7.xyz, r6, r1.w
					    if_lt c5.w, r4.z
					      if_lt -c10.w, r4.x
					        nrm_pp r4.xyz, r3
					        add r8.xyz, c8, -v1
					        rcp r9.x, r4.x
					        rcp r9.y, r4.y
					        rcp r9.z, r4.z
					        mul_pp r8.xyz, r8, r9
					        add r10.xyz, c9, -v1
					        mul_pp r9.xyz, r9, r10
					        cmp_pp r8.xyz, -r4, r9, r8
					        min_pp r4.w, r8.y, r8.x
					        min_pp r5.w, r8.z, r4.w
					        add r8.xyz, -c10, v1
					        mad_pp r3.xyz, r4, r5.w, r8
					      endif
					      mov_pp r3.w, c19.y
					      texldl_pp r3, r3, s2
					      pow_pp r4.x, r3.w, c11.y
					      mul_pp r3.w, r4.x, c11.x
					      mul_pp r3.xyz, r3, r3.w
					      mad r4.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c5.w, r4, r3
					    endif
					    nrm_pp r3.xyz, v0
					    mul_pp r2.xyz, r2, c12.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r1.w, -r0.w, c19.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c20.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r3, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c20.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c20.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c20.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    add_pp r0.w, r1.y, r1.y
					    mad_pp r0.w, r0.w, r1.y, c20.w
					    mad_pp r0.y, r0.w, r0.y, c20.z
					    mad_pp r0.w, r0.w, r0.z, c20.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, -c20.w
					    abs r1.x, c13.w
					    mad r0.x, r0.x, -c21.x, c21.y
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c21.z, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c21.w, c21.x
					    dp3_pp r1.x, c12, c12
					    cmp r1.x, -r1.x, c22.x, c22.y
					    mul_pp r0.x, r0.x, r1.x
					    mov r3, c12
					    add_pp r3, -r3.wxyz, c20.z
					    mov_sat_pp r3.x, r3.x
					    mad_pp r1.xzw, c15.xyyz, r0.y, r5.xyyz
					    mul_pp r4.xyz, r0.x, c15
					    add_pp r0.x, -r1.y, c20.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r3.yzw, r3, r0.x, c12.xxyz
					    mul_pp r3.yzw, r3, r4.xxyz
					    mad_pp r1.xyz, r2, r1.xzww, r3.yzww
					    mul_pp r0.xyw, r7.xyzz, r0.w
					    lrp_pp r2.xyz, r0.z, r3.x, c12
					    mad_pp r0.xyz, r0.xyww, r2, r1
					    mul r0.w, c3.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c20.z
					
					// approximately 148 instruction slots used (5 texture, 143 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_FogColor                 c1       1
					//   unity_SpecCube0_HDR            c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_Lightmap_HDR             c4       1
					//   _Progress                      c5       1
					//   _Color                         c6       1
					//   _BackgroundColor               c7       1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//
					
					    ps_3_0
					    def c8, 6, 1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3.xy
					    dcl_texcoord5 v4.x
					    dcl_2d s0
					    dcl_cube s1
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c8.x
					    texldl_pp r0, r0, s1
					    pow_pp r1.w, r0.w, c2.y
					    mul_pp r0.w, r1.w, c2.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_sat_pp r0.w, r2, r1
					    add_pp r0.w, -r0.w, c8.y
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r0.w
					    mov r1.w, c3.w
					    add_sat_pp r1.x, -r1.w, c8.y
					    lrp_pp r2.xyz, r0.w, r1.x, c3
					    mul_pp r0.xyz, r0, r2
					    texld_pp r1, v3, s0
					    pow_pp r0.w, r1.w, c4.y
					    mul_pp r0.w, r0.w, c4.x
					    mul_pp r1.xyz, r1, r0.w
					    add r0.w, c5.x, -v2.x
					    mov r2.xyz, c6
					    cmp_pp r2.xyz, r0.w, r2, c7
					    mul_pp r2.xyz, r2, c3.w
					    mad_pp r0.xyz, r1, r2, r0
					    add r0.xyz, r0, -c1
					    mov_sat r0.w, v4.x
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c8.y
					
					// approximately 41 instruction slots used (3 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_2_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_3_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_3_2[4];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat9 = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_FogColor                 c1       1
					//   unity_FogParams                c2       1
					//   unity_SpecCube0_BoxMax         c3       1
					//   unity_SpecCube0_BoxMin         c4       1
					//   unity_SpecCube0_ProbePosition  c5       1
					//   unity_SpecCube0_HDR            c6       1
					//   unity_SpecCube1_BoxMax         c7       1
					//   unity_SpecCube1_BoxMin         c8       1
					//   unity_SpecCube1_ProbePosition  c9       1
					//   unity_SpecCube1_HDR            c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   unity_Lightmap_HDR             c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _Progress                      c15      1
					//   _Color                         c16      1
					//   _BackgroundColor               c17      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//
					
					    ps_3_0
					    def c18, 0, 6, 0.999989986, 1
					    def c19, 0.720000029, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3
					    dcl_texcoord5 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    add r0.x, c15.x, -v2.x
					    mov r2.xyz, c16
					    cmp_pp r0.xyz, r0.x, r2, c17
					    dp3_pp r0.w, -r1, v0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r2.xyz, v0, -r0.w, -r1
					    texld_pp r3, v3, s0
					    pow_pp r0.w, r3.w, c13.y
					    mul_pp r0.w, r0.w, c13.x
					    texld_pp r4, v3.zwzw, s1
					    mul_pp r1.w, r4.w, c14.x
					    mul_pp r4.xyz, r4, r1.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c14.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    mad_pp r3.xyz, r0.w, r3, r5
					    mov r4.xzw, c18
					    if_lt -c5.w, r4.x
					      nrm_pp r5.xyz, r2
					      add r6.xyz, c3, -v1
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c4, -v1
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r0.w, r6.y, r6.x
					      min_pp r1.w, r6.z, r0.w
					      add r6.xyz, -c5, v1
					      mad_pp r5.xyz, r5, r1.w, r6
					    else
					      mov_pp r5.xyz, r2
					    endif
					    mov_pp r5.w, c18.y
					    texldl_pp r5, r5, s2
					    pow_pp r0.w, r5.w, c6.y
					    mul_pp r0.w, r0.w, c6.x
					    mul_pp r6.xyz, r5, r0.w
					    if_lt c4.w, r4.z
					      if_lt -c9.w, r4.x
					        nrm_pp r4.xyz, r2
					        add r7.xyz, c7, -v1
					        rcp r8.x, r4.x
					        rcp r8.y, r4.y
					        rcp r8.z, r4.z
					        mul_pp r7.xyz, r7, r8
					        add r9.xyz, c8, -v1
					        mul_pp r8.xyz, r8, r9
					        cmp_pp r7.xyz, -r4, r8, r7
					        min_pp r1.w, r7.y, r7.x
					        min_pp r3.w, r7.z, r1.w
					        add r7.xyz, -c9, v1
					        mad_pp r2.xyz, r4, r3.w, r7
					      endif
					      mov_pp r2.w, c18.y
					      texldl_pp r2, r2, s3
					      pow_pp r1.w, r2.w, c10.y
					      mul_pp r1.w, r1.w, c10.x
					      mul_pp r2.xyz, r2, r1.w
					      mad r4.xyz, r0.w, r5, -r2
					      mad_pp r6.xyz, c4.w, r4, r2
					    endif
					    nrm_pp r2.xyz, v0
					    mul_pp r0.xyz, r0, c11.w
					    dp3_pp r0.w, r2, r1
					    abs r1.x, c12.w
					    cmp_pp r1.x, -r1.x, c19.x, c19.y
					    add_sat_pp r1.y, r4.w, -c11.w
					    mul_pp r1.xzw, r6.xyyz, r1.x
					    add_pp r2.x, -r0.w, c18.w
					    cmp_pp r0.w, r0.w, r2.x, c18.w
					    mul_pp r2.x, r0.w, r0.w
					    mul_pp r2.x, r2.x, r2.x
					    mul_pp r0.w, r0.w, r2.x
					    lrp_pp r2.xyz, r0.w, r1.y, c11
					    mul_pp r1.xyz, r1.xzww, r2
					    mad_pp r0.xyz, r0, r3, r1
					    mul r0.w, c2.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c1
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c18.w
					
					// approximately 112 instruction slots used (6 texture, 106 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat2.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat31 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat2.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat2.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat2.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat2.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Progress                      c16      1
					//   _Color                         c17      1
					//   _BackgroundColor               c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//
					
					    ps_3_0
					    def c19, 10000, 6, 0.999989986, 0.00100000005
					    def c20, 31.622776, 9.99999975e-006, 1, 0.00999999978
					    def c21, 0, -0.5, 0.5, 9.99999975e-005
					    def c22, 0.720000029, 0.5, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord5 v3.x
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c16.x, -v2.x
					    mov r2.xyz, c17
					    cmp_pp r2.xyz, r1.w, r2, c18
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c21.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xyz, v0, -r1.w, -r1
					    texld_pp r4, v4.zwzw, s0
					    mul_pp r1.w, r4.w, c14.x
					    mul_pp r4.xyz, r4, r1.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c14.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    texld_pp r4, v4.zwzw, s1
					    add_pp r4.xyz, r4, c21.y
					    dp3_pp r1.w, v0, r4
					    add_pp r1.w, r1.w, c21.z
					    mul_pp r4.xyz, r1.w, r5
					    add r1.w, -r4.w, c21.w
					    rcp r4.w, r4.w
					    cmp r1.w, r1.w, c19.x, r4.w
					    mov r5.x, c21.x
					    if_lt -c6.w, r5.x
					      nrm_pp r6.xyz, r3
					      add r5.yzw, c4.xxyz, -v1.xxyz
					      rcp r7.x, r6.x
					      rcp r7.y, r6.y
					      rcp r7.z, r6.z
					      mul_pp r5.yzw, r5, r7.xxyz
					      add r8.xyz, c5, -v1
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r5.yzw, -r6.xxyz, r7.xxyz, r5
					      min_pp r4.w, r5.z, r5.y
					      min_pp r6.w, r5.w, r4.w
					      add r5.yzw, -c6.xxyz, v1.xxyz
					      mad_pp r6.xyz, r6, r6.w, r5.yzww
					    else
					      mov_pp r6.xyz, r3
					    endif
					    mov_pp r6.w, c19.y
					    texldl_pp r6, r6, s2
					    pow_pp r4.w, r6.w, c7.y
					    mul_pp r4.w, r4.w, c7.x
					    mul_pp r5.yzw, r6.xxyz, r4.w
					    mov r6.w, c5.w
					    if_lt r6.w, c19.z
					      if_lt -c10.w, r5.x
					        nrm_pp r7.xyz, r3
					        add r8.xyz, c8, -v1
					        rcp r9.x, r7.x
					        rcp r9.y, r7.y
					        rcp r9.z, r7.z
					        mul_pp r8.xyz, r8, r9
					        add r10.xyz, c9, -v1
					        mul_pp r9.xyz, r9, r10
					        cmp_pp r8.xyz, -r7, r9, r8
					        min_pp r5.x, r8.y, r8.x
					        min_pp r6.w, r8.z, r5.x
					        add r8.xyz, -c10, v1
					        mad_pp r3.xyz, r7, r6.w, r8
					      endif
					      mov_pp r3.w, c19.y
					      texldl_pp r3, r3, s3
					      pow_pp r5.x, r3.w, c11.y
					      mul_pp r3.w, r5.x, c11.x
					      mul_pp r3.xyz, r3, r3.w
					      mad r6.xyz, r4.w, r6, -r3
					      mad_pp r5.yzw, c5.w, r6.xxyz, r3.xxyz
					    endif
					    nrm_pp r3.xyz, v0
					    mul_pp r2.xyz, r2, c12.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r3.w, -r0.w, c19.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r3.w, c20.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r3, r1
					    max_pp r1.x, r0.w, c21.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c21.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c20.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c20.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c20.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    dp2add_pp r0.w, r1.y, r1.y, c21.y
					    mad_pp r0.y, r0.w, r0.y, c20.z
					    mad_pp r0.w, r0.w, r0.z, c20.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, c21.z
					    abs r1.x, c13.w
					    mad r0.x, r0.x, -c21.z, c21.w
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c20.w, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c22.x, c22.y
					    dp3_pp r1.x, c12, c12
					    cmp r1.x, -r1.x, c22.z, c22.w
					    mul_pp r0.x, r0.x, r1.x
					    mov r3, c12
					    add_pp r3, -r3.wxyz, c20.z
					    mov_sat_pp r3.x, r3.x
					    mul_pp r6.xyz, r0.y, c15
					    mad_pp r1.xzw, r4.xyyz, r1.w, r6.xyyz
					    mul_pp r4.xyz, r0.x, c15
					    add_pp r0.x, -r1.y, c20.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r3.yzw, r3, r0.x, c12.xxyz
					    mul_pp r3.yzw, r3, r4.xxyz
					    mad_pp r1.xyz, r2, r1.xzww, r3.yzww
					    mul_pp r0.xyw, r5.yzzw, r0.w
					    lrp_pp r2.xyz, r0.z, r3.x, c12
					    mad_pp r0.xyz, r0.xyww, r2, r1
					    mul r0.w, c3.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c20.z
					
					// approximately 158 instruction slots used (6 texture, 152 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, u_xlat5.xyz);
					    u_xlat35 = u_xlat35 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat35 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat35);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					bool u_xlatb35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlatb34 = _Progress<vs_TEXCOORD2;
					    u_xlat34 = u_xlatb34 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz + _Color.xyz;
					    u_xlat34 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat35 = u_xlat35 + u_xlat35;
					    u_xlat3.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat35)) + (-u_xlat1.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat35 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat35);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat5.xyz = u_xlat5.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, u_xlat5.xyz);
					    u_xlat35 = u_xlat35 + 0.5;
					    u_xlat4.xyz = vec3(u_xlat35) * u_xlat4.xyz;
					    u_xlat35 = max(u_xlat5.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat35);
					    u_xlatb35 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb35){
					        u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat35 = inversesqrt(u_xlat35);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat35 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat35 = min(u_xlat6.z, u_xlat35);
					        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, 6.0);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, 6.0);
					        u_xlat36 = log2(u_xlat3.w);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.y;
					        u_xlat36 = exp2(u_xlat36);
					        u_xlat36 = u_xlat36 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat36);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat35 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat3.xyz = vec3(u_xlat35) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat11.x = u_xlat0.w + u_xlat34;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 2.0 / u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + 1.0;
					    u_xlat1.x = u_xlat22 * u_xlat22;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat22 = u_xlat22 * u_xlat1.x;
					    u_xlat33 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat33 = u_xlat33 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat22 = u_xlat1.x * u_xlat22 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat33 + 1.0;
					    u_xlat11.y = u_xlat22 * u_xlat1.x;
					    u_xlat11.x = u_xlat11.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat12.x = max(u_xlat11.x, 9.99999975e-05);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat11.x = (u_xlatb1) ? u_xlat12.x : u_xlat11.x;
					    u_xlat11.xy = vec2(u_xlat34) * u_xlat11.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat12.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat11.x = u_xlat11.x * u_xlat12.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat12.xyz = _LightColor0.xyz * u_xlat11.yyy + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat11.xxx * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_NHxRoughness;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_SpecCube0_HDR            c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   _LightColor0                   c5       1
					//   _Progress                      c6       1
					//   _Color                         c7       1
					//   _BackgroundColor               c8       1
					//   unity_SpecCube0                s0       1
					//   unity_NHxRoughness             s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_3_0
					    def c9, 6, 1, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c9.x
					    texldl_pp r0, r0, s0
					    pow_pp r1.w, r0.w, c3.y
					    mul_pp r0.w, r1.w, c3.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_pp r0.w, r1, r2
					    add_pp r1.w, r0.w, r0.w
					    mov_sat_pp r0.w, r0.w
					    add_pp r3.y, -r0.w, c9.y
					    mad_pp r1.xyz, r2, -r1.w, r1
					    dp3_pp r3.x, r1, c1
					    mul_pp r1.xy, r3, r3
					    mul_pp r1.xy, r1, r1
					    mov r0.w, c4.w
					    add_sat_pp r0.w, -r0.w, c9.y
					    lrp_pp r2.xyz, r1.y, r0.w, c4
					    mul_pp r0.xyz, r0, r2
					    add r0.w, c6.x, -v2.x
					    mov r2.xyz, c7
					    cmp_pp r2.xyz, r0.w, r2, c8
					    mul_pp r2.xyz, r2, c4.w
					    mad_pp r0.xyz, v3, r2, r0
					    texldp_pp r3, v4, s2
					    mul_pp r3.xyz, r3.x, c5
					    dp3_sat_pp r0.w, v0, c1
					    mul_pp r3.xyz, r0.w, r3
					    mov_pp r1.z, c9.y
					    texld r1, r1.xzzw, s1
					    mul_pp r0.w, r1.x, c9.z
					    mad_pp r1.xyz, r0.w, c4, r2
					    mad_pp r0.xyz, r1, r3, r0
					    add r0.xyz, r0, -c2
					    mov_sat r0.w, v5.x
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c9.y
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat13)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat4.x = log2(u_xlat1.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xxx;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat4.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat4.xz);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_4_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_5_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_5_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_NHxRoughness;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat12)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat12 = log2(u_xlat1.w);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.y;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat12 = u_xlat12 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat12);
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat3.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat2.xyz * (-vec3(u_xlat13)) + u_xlat0.xyz;
					    u_xlat3.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat4.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat4.xz);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_4_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_4_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat13 = u_xlat12 + u_xlat12;
					    u_xlat12 = u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.y = (-u_xlat12) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat13)) + u_xlat1.xyz;
					    u_xlat2.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = u_xlat2.xy * u_xlat2.xy;
					    u_xlat0.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat12 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat12) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat0.yyy * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-u_xlat4.xxx) + (-u_xlat1.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat4.x = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.xxx;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlatb4 = _Progress<vs_TEXCOORD2;
					    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat4.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat4.xz);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat4.xxx * u_xlat3.xyz;
					    u_xlat0.z = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xz);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Progress                      c16      1
					//   _Color                         c17      1
					//   _BackgroundColor               c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _ShadowMapTexture              s3       1
					//
					
					    ps_3_0
					    def c19, 0, 6, 0.999989986, 0.00100000005
					    def c20, 31.622776, 9.99999975e-006, 1, -0.5
					    def c21, 0.5, 9.99999975e-005, 0.00999999978, 0.720000029
					    def c22, 0, 1, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.x
					    dcl_texcoord6 v5.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c16.x, -v2.x
					    mov r2.xyz, c17
					    cmp_pp r2.xyz, r1.w, r2, c18
					    texldp_pp r3, v3, s3
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c19.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r4.xyz, v0, -r1.w, -r1
					    mul_pp r3.xyz, r3.x, c15
					    texld_pp r5, v5.zwzw, s0
					    mul_pp r1.w, r5.w, c14.x
					    mul_pp r5.xyz, r5, r1.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c14.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    mov r5.xz, c19
					    if_lt -c6.w, r5.x
					      nrm_pp r7.xyz, r4
					      add r8.xyz, c4, -v1
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c5, -v1
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r1.w, r8.y, r8.x
					      min_pp r3.w, r8.z, r1.w
					      add r8.xyz, -c6, v1
					      mad_pp r7.xyz, r7, r3.w, r8
					    else
					      mov_pp r7.xyz, r4
					    endif
					    mov_pp r7.w, c19.y
					    texldl_pp r7, r7, s1
					    pow_pp r1.w, r7.w, c7.y
					    mul_pp r1.w, r1.w, c7.x
					    mul_pp r8.xyz, r7, r1.w
					    if_lt c5.w, r5.z
					      if_lt -c10.w, r5.x
					        nrm_pp r5.xyz, r4
					        add r9.xyz, c8, -v1
					        rcp r10.x, r5.x
					        rcp r10.y, r5.y
					        rcp r10.z, r5.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c9, -v1
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r5, r10, r9
					        min_pp r3.w, r9.y, r9.x
					        min_pp r5.w, r9.z, r3.w
					        add r9.xyz, -c10, v1
					        mad_pp r4.xyz, r5, r5.w, r9
					      endif
					      mov_pp r4.w, c19.y
					      texldl_pp r4, r4, s2
					      pow_pp r3.w, r4.w, c11.y
					      mul_pp r3.w, r3.w, c11.x
					      mul_pp r4.xyz, r4, r3.w
					      mad r5.xyz, r1.w, r7, -r4
					      mad_pp r8.xyz, c5.w, r5, r4
					    endif
					    nrm_pp r4.xyz, v0
					    mul_pp r2.xyz, r2, c12.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r1.w, -r0.w, c19.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c20.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c20.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c20.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c20.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    dp2add_pp r0.w, r1.y, r1.y, c20.w
					    mad_pp r0.y, r0.w, r0.y, c20.z
					    mad_pp r0.w, r0.w, r0.z, c20.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, -c20.w
					    abs r1.x, c13.w
					    mad r0.x, r0.x, -c21.x, c21.y
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c21.z, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c21.w, c21.x
					    dp3_pp r1.x, c12, c12
					    cmp r1.x, -r1.x, c22.x, c22.y
					    mul_pp r0.x, r0.x, r1.x
					    mov r4, c12
					    add_pp r4, -r4.wxyz, c20.z
					    mov_sat_pp r4.x, r4.x
					    mad_pp r1.xzw, r3.xyyz, r0.y, r6.xyyz
					    mul_pp r3.xyz, r3, r0.x
					    add_pp r0.x, -r1.y, c20.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r4.yzw, r4, r0.x, c12.xxyz
					    mul_pp r3.xyz, r3, r4.yzww
					    mad_pp r1.xyz, r2, r1.xzww, r3
					    mul_pp r0.xyw, r8.xyzz, r0.w
					    lrp_pp r2.xyz, r0.z, r4.x, c12
					    mad_pp r0.xyz, r0.xyww, r2, r1
					    mul r0.w, c3.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c20.z
					
					// approximately 150 instruction slots used (6 texture, 144 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_FogColor;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_FogColor                 c3       1
					//   unity_SpecCube0_HDR            c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_Lightmap_HDR             c6       1
					//   _LightColor0                   c7       1
					//   _Progress                      c8       1
					//   _Color                         c9       1
					//   _BackgroundColor               c10      1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//   _ShadowMapTexture              s2       1
					//
					
					    ps_3_0
					    def c11, 1, 6, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    dp3_pp r0.x, -r1, v0
					    add_pp r0.x, r0.x, r0.x
					    mad_pp r0.xyz, v0, -r0.x, -r1
					    mov_pp r0.w, c11.y
					    texldl_pp r0, r0, s1
					    pow_pp r1.w, r0.w, c4.y
					    mul_pp r0.w, r1.w, c4.x
					    mul_pp r0.xyz, r0, r0.w
					    nrm_pp r2.xyz, v0
					    dp3_sat_pp r0.w, r2, r1
					    add_pp r0.w, -r0.w, c11.x
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r0.w
					    mov r1.w, c5.w
					    add_sat_pp r1.x, -r1.w, c11.x
					    lrp_pp r2.xyz, r0.w, r1.x, c5
					    mul_pp r0.xyz, r0, r2
					    texldp_pp r1, v4, s2
					    add_pp r0.w, r1.x, -c2.x
					    add_pp r1.y, -r0.w, c11.x
					    cmp_pp r0.w, r0.w, r1.y, c11.x
					    dp3_sat_pp r1.y, v0, c1
					    mul_pp r0.w, r0.w, r1.y
					    texld_pp r2, v3, s0
					    pow_pp r1.y, r2.w, c6.y
					    mul_pp r1.y, r1.y, c6.x
					    mul_pp r1.yzw, r2.xxyz, r1.y
					    mul_pp r2.xyz, r1.x, r2
					    min_pp r3.xyz, r2, r1.yzww
					    mad_pp r1.xyz, r0.w, -c7, r1.yzww
					    max_pp r2.xyz, r3, r1
					    add r0.w, c8.x, -v2.x
					    mov r1.xyz, c9
					    cmp_pp r1.xyz, r0.w, r1, c10
					    mul_pp r1.xyz, r1, c5.w
					    mad_pp r0.xyz, r2, r1, r0
					    add r0.xyz, r0, -c3
					    mov_sat r0.w, v5.x
					    mad_pp oC0.xyz, r0.w, r0, c3
					    mov_pp oC0.w, c11.x
					
					// approximately 51 instruction slots used (4 texture, 47 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_4_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_5_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_5_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat4.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat4.x = log2(u_xlat2.w);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-vec3(u_xlat9)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_5_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_6_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_6_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = textureLod(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = log2(u_xlat1.w);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat4.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat4.x = log2(u_xlat2.w);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-vec3(u_xlat9)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_4_1;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unused_5_0[3];
						vec4 unity_SpecCube0_HDR;
						vec4 unused_5_2[4];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat1.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat9)) + (-u_xlat0.xyz);
					    u_xlat1 = texture(unity_SpecCube0, u_xlat1.xyz, 6.0);
					    u_xlat9 = u_xlat1.w * unity_SpecCube0_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat1.xy);
					    u_xlat9 = u_xlat1.x + (-_LightShadowData.x);
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat4.x = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat4.x;
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat4.x = u_xlat2.w * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xxx;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat2.xyz = min(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = (-vec3(u_xlat9)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlatb9 = _Progress<vs_TEXCOORD2;
					    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz + _Color.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD5;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_FogColor                 c3       1
					//   unity_FogParams                c4       1
					//   unity_SpecCube0_BoxMax         c5       1
					//   unity_SpecCube0_BoxMin         c6       1
					//   unity_SpecCube0_ProbePosition  c7       1
					//   unity_SpecCube0_HDR            c8       1
					//   unity_SpecCube1_BoxMax         c9       1
					//   unity_SpecCube1_BoxMin         c10      1
					//   unity_SpecCube1_ProbePosition  c11      1
					//   unity_SpecCube1_HDR            c12      1
					//   unity_ColorSpaceDielectricSpec c13      1
					//   unity_ColorSpaceLuminance      c14      1
					//   unity_Lightmap_HDR             c15      1
					//   unity_DynamicLightmap_HDR      c16      1
					//   _LightColor0                   c17      1
					//   _Progress                      c18      1
					//   _Color                         c19      1
					//   _BackgroundColor               c20      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c21, 0, 1, 6, 0.999989986
					    def c22, 0.720000029, 0.5, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    add r0.x, c18.x, -v2.x
					    mov r2.xyz, c19
					    cmp_pp r0.xyz, r0.x, r2, c20
					    texldp_pp r2, v4, s4
					    dp3_pp r0.w, -r1, v0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r3.xyz, v0, -r0.w, -r1
					    texld_pp r4, v3, s0
					    pow_pp r0.w, r4.w, c15.y
					    mul_pp r0.w, r0.w, c15.x
					    mul_pp r2.yzw, r4.xxyz, r0.w
					    add_pp r0.w, r2.x, -c2.x
					    dp3_pp r1.w, v0, c1
					    max_pp r4.w, r1.w, c21.x
					    add_pp r1.w, -r0.w, c21.y
					    cmp_pp r0.w, r0.w, r1.w, c21.y
					    mul_pp r0.w, r0.w, r4.w
					    mad_pp r5.xyz, r0.w, -c17, r2.yzww
					    mul_pp r4.xyz, r2.x, r4
					    min_pp r6.xyz, r4, r2.yzww
					    max_pp r2.xyz, r6, r5
					    texld_pp r4, v3.zwzw, s1
					    mul_pp r0.w, r4.w, c16.x
					    mul_pp r4.xyz, r4, r0.w
					    log_pp r5.x, r4.x
					    log_pp r5.y, r4.y
					    log_pp r5.z, r4.z
					    mul_pp r4.xyz, r5, c16.y
					    exp_pp r5.x, r4.x
					    exp_pp r5.y, r4.y
					    exp_pp r5.z, r4.z
					    add_pp r2.xyz, r2, r5
					    mov r4.xyw, c21
					    if_lt -c7.w, r4.x
					      nrm_pp r5.xyz, r3
					      add r6.xyz, c5, -v1
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c6, -v1
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r0.w, r6.y, r6.x
					      min_pp r1.w, r6.z, r0.w
					      add r6.xyz, -c7, v1
					      mad_pp r5.xyz, r5, r1.w, r6
					    else
					      mov_pp r5.xyz, r3
					    endif
					    mov_pp r5.w, c21.z
					    texldl_pp r5, r5, s2
					    pow_pp r0.w, r5.w, c8.y
					    mul_pp r0.w, r0.w, c8.x
					    mul_pp r6.xyz, r5, r0.w
					    if_lt c6.w, r4.w
					      if_lt -c11.w, r4.x
					        nrm_pp r7.xyz, r3
					        add r4.xzw, c9.xyyz, -v1.xyyz
					        rcp r8.x, r7.x
					        rcp r8.y, r7.y
					        rcp r8.z, r7.z
					        mul_pp r4.xzw, r4, r8.xyyz
					        add r9.xyz, c10, -v1
					        mul_pp r8.xyz, r8, r9
					        cmp_pp r4.xzw, -r7.xyyz, r8.xyyz, r4
					        min_pp r1.w, r4.z, r4.x
					        min_pp r2.w, r4.w, r1.w
					        add r4.xzw, -c11.xyyz, v1.xyyz
					        mad_pp r3.xyz, r7, r2.w, r4.xzww
					      endif
					      mov_pp r3.w, c21.z
					      texldl_pp r3, r3, s3
					      pow_pp r1.w, r3.w, c12.y
					      mul_pp r1.w, r1.w, c12.x
					      mul_pp r3.xyz, r3, r1.w
					      mad r4.xzw, r0.w, r5.xyyz, -r3.xyyz
					      mad_pp r6.xyz, c6.w, r4.xzww, r3
					    endif
					    nrm_pp r3.xyz, v0
					    mul_pp r0.xyz, r0, c13.w
					    dp3_pp r0.w, r3, r1
					    abs r1.x, c14.w
					    cmp_pp r1.x, -r1.x, c22.x, c22.y
					    add_sat_pp r1.y, r4.y, -c13.w
					    mul_pp r1.xzw, r6.xyyz, r1.x
					    add_pp r2.w, -r0.w, c21.y
					    cmp_pp r0.w, r0.w, r2.w, c21.y
					    mul_pp r2.w, r0.w, r0.w
					    mul_pp r2.w, r2.w, r2.w
					    mul_pp r0.w, r0.w, r2.w
					    lrp_pp r3.xyz, r0.w, r1.y, c13
					    mul_pp r1.xyz, r1.xzww, r3
					    mad_pp r0.xyz, r0, r2, r1
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c3
					    mad_pp oC0.xyz, r0.w, r0, c3
					    mov_pp oC0.w, c21.y
					
					// approximately 124 instruction slots used (7 texture, 117 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec3 u_xlat12;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat12.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat30);
					    u_xlat30 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat31 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat5.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat30 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat12.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					vec3 u_xlat8;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec3 u_xlat12;
					float u_xlat20;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					bool u_xlatb31;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlatb30 = _Progress<vs_TEXCOORD2;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _Color.xyz;
					    u_xlat2.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat30 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat12.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat30)) + (-u_xlat0.xyz);
					    u_xlat3 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat30 = log2(u_xlat3.w);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat30);
					    u_xlat30 = u_xlat2.x + (-_LightShadowData.x);
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat31 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat5.xyz = (-vec3(u_xlat30)) * _LightColor0.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat4 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat30 = u_xlat4.w * unity_DynamicLightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlatb30 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb30){
					        u_xlat30 = dot(u_xlat12.xyz, u_xlat12.xyz);
					        u_xlat30 = inversesqrt(u_xlat30);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat12.xyz;
					        u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;
					        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat5;
					            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;
					            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;
					            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;
					            u_xlat5 = hlslcc_movcTemp;
					        }
					        u_xlat30 = min(u_xlat5.y, u_xlat5.x);
					        u_xlat30 = min(u_xlat5.z, u_xlat30);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat30) + u_xlat5.xyz;
					    } else {
					        u_xlat4.xyz = u_xlat12.xyz;
					    }
					    u_xlat4 = textureLod(unity_SpecCube0, u_xlat4.xyz, 6.0);
					    u_xlat30 = log2(u_xlat4.w);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.y;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat30 = u_xlat30 * unity_SpecCube0_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat30);
					    u_xlatb31 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb31){
					        u_xlatb31 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb31){
					            u_xlat31 = dot(u_xlat12.xyz, u_xlat12.xyz);
					            u_xlat31 = inversesqrt(u_xlat31);
					            u_xlat6.xyz = vec3(u_xlat31) * u_xlat12.xyz;
					            u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat7;
					                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					                u_xlat7 = hlslcc_movcTemp;
					            }
					            u_xlat31 = min(u_xlat7.y, u_xlat7.x);
					            u_xlat31 = min(u_xlat7.z, u_xlat31);
					            u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat12.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat7.xyz;
					        }
					        u_xlat2 = textureLod(unity_SpecCube1, u_xlat12.xyz, 6.0);
					        u_xlat31 = log2(u_xlat2.w);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.y;
					        u_xlat31 = exp2(u_xlat31);
					        u_xlat31 = u_xlat31 * unity_SpecCube1_HDR.x;
					        u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat31);
					        u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz + (-u_xlat2.xyz);
					        u_xlat5.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat2.xyz;
					    }
					    u_xlat30 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * vs_TEXCOORD0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlatb10 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat10.x = (u_xlatb10) ? 0.720000029 : 0.5;
					    u_xlat20 = (-unity_ColorSpaceDielectricSpec.w) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat5.xyz * u_xlat10.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat10.xyz = vec3(u_xlat20) + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat30 = u_xlat30 * (-u_xlat30);
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Progress                      c16      1
					//   _Color                         c17      1
					//   _BackgroundColor               c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//
					
					    ps_3_0
					    def c19, 0, -0.5, 0.5, 9.99999975e-005
					    def c20, 10000, 6, 0.999989986, 0.00100000005
					    def c21, 31.622776, 9.99999975e-006, 1, 0.00999999978
					    def c22, 0.720000029, 0.5, 0, 1
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.x
					    dcl_texcoord6 v5.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    add r1.w, c16.x, -v2.x
					    mov r2.xyz, c17
					    cmp_pp r2.xyz, r1.w, r2, c18
					    texldp_pp r3, v3, s4
					    dp3_pp r1.w, v0, c1
					    max_pp r2.w, r1.w, c19.x
					    dp3_pp r1.w, -r1, v0
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r4.xyz, v0, -r1.w, -r1
					    mul_pp r3.xyz, r3.x, c15
					    texld_pp r5, v5.zwzw, s0
					    mul_pp r1.w, r5.w, c14.x
					    mul_pp r5.xyz, r5, r1.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c14.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    texld_pp r5, v5.zwzw, s1
					    add_pp r5.xyz, r5, c19.y
					    dp3_pp r1.w, v0, r5
					    add_pp r1.w, r1.w, c19.z
					    mul_pp r5.xyz, r1.w, r6
					    add r1.w, -r5.w, c19.w
					    rcp r3.w, r5.w
					    cmp r1.w, r1.w, c20.x, r3.w
					    mov r6.x, c19.x
					    if_lt -c6.w, r6.x
					      nrm_pp r7.xyz, r4
					      add r6.yzw, c4.xxyz, -v1.xxyz
					      rcp r8.x, r7.x
					      rcp r8.y, r7.y
					      rcp r8.z, r7.z
					      mul_pp r6.yzw, r6, r8.xxyz
					      add r9.xyz, c5, -v1
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r6.yzw, -r7.xxyz, r8.xxyz, r6
					      min_pp r3.w, r6.z, r6.y
					      min_pp r5.w, r6.w, r3.w
					      add r6.yzw, -c6.xxyz, v1.xxyz
					      mad_pp r7.xyz, r7, r5.w, r6.yzww
					    else
					      mov_pp r7.xyz, r4
					    endif
					    mov_pp r7.w, c20.y
					    texldl_pp r7, r7, s2
					    pow_pp r3.w, r7.w, c7.y
					    mul_pp r3.w, r3.w, c7.x
					    mul_pp r6.yzw, r7.xxyz, r3.w
					    mov r5.w, c5.w
					    if_lt r5.w, c20.z
					      if_lt -c10.w, r6.x
					        nrm_pp r8.xyz, r4
					        add r9.xyz, c8, -v1
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c9, -v1
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r5.w, r9.y, r9.x
					        min_pp r6.x, r9.z, r5.w
					        add r9.xyz, -c10, v1
					        mad_pp r4.xyz, r8, r6.x, r9
					      endif
					      mov_pp r4.w, c20.y
					      texldl_pp r4, r4, s3
					      pow_pp r5.w, r4.w, c11.y
					      mul_pp r4.w, r5.w, c11.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r7.xyz, r3.w, r7, -r4
					      mad_pp r6.yzw, c5.w, r7.xxyz, r4.xxyz
					    endif
					    nrm_pp r4.xyz, v0
					    mul_pp r2.xyz, r2, c12.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r3.w, -r0.w, c20.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r3.w, c21.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    add r0.x, r1.x, r2.w
					    add r0.x, r0.x, c21.y
					    rcp r0.x, r0.x
					    add_pp r0.y, -r2.w, c21.z
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    add_pp r0.z, -r1.x, c21.z
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    add_pp r0.w, r1.y, r1.y
					    mad_pp r0.w, r0.w, r1.y, c19.y
					    mad_pp r0.y, r0.w, r0.y, c21.z
					    mad_pp r0.w, r0.w, r0.z, c21.z
					    mul_pp r0.y, r0.w, r0.y
					    mul_pp r0.w, r0.x, c19.z
					    abs r1.x, c13.w
					    mad r0.x, r0.x, -c19.z, c19.w
					    rsq r1.z, r0.w
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.x, r0.x, c21.w, r1.z
					    cmp_pp r0.x, -r1.x, r0.x, r0.w
					    mul_pp r0.xy, r2.w, r0
					    cmp_pp r0.w, -r1.x, c22.x, c22.y
					    dp3_pp r1.x, c12, c12
					    cmp r1.x, -r1.x, c22.z, c22.w
					    mul_pp r0.x, r0.x, r1.x
					    mov r4, c12
					    add_pp r4, -r4.wxyz, c21.z
					    mov_sat_pp r4.x, r4.x
					    mul_pp r7.xyz, r0.y, r3
					    mad_pp r1.xzw, r5.xyyz, r1.w, r7.xyyz
					    mul_pp r3.xyz, r3, r0.x
					    add_pp r0.x, -r1.y, c21.z
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    mad_pp r4.yzw, r4, r0.x, c12.xxyz
					    mul_pp r3.xyz, r3, r4.yzww
					    mad_pp r1.xyz, r2, r1.xzww, r3
					    mul_pp r0.xyw, r6.yzzw, r0.w
					    lrp_pp r2.xyz, r0.z, r4.x, c12
					    mad_pp r0.xyz, r0.xyww, r2, r1
					    mul r0.w, c3.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c21.z
					
					// approximately 160 instruction slots used (7 texture, 153 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, u_xlat6.xyz);
					    u_xlat38 = u_xlat38 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					    u_xlat38 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat38);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Progress;
						vec4 unused_0_8[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					vec2 u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					vec3 u_xlat15;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					bool u_xlatb38;
					float u_xlat39;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlatb37 = _Progress<vs_TEXCOORD2;
					    u_xlat37 = u_xlatb37 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat37) * u_xlat2.xyz + _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat37 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat37 = max(u_xlat37, 0.0);
					    u_xlat38 = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat38 = u_xlat38 + u_xlat38;
					    u_xlat15.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat38)) + (-u_xlat1.xyz);
					    u_xlat4.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat38 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat38);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, u_xlat6.xyz);
					    u_xlat38 = u_xlat38 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat38) * u_xlat5.xyz;
					    u_xlat38 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat38);
					    u_xlatb38 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb38){
					        u_xlat38 = dot(u_xlat15.xyz, u_xlat15.xyz);
					        u_xlat38 = inversesqrt(u_xlat38);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat15.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat38 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat38 = min(u_xlat7.z, u_xlat38);
					        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat38) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat15.xyz;
					    }
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, 6.0);
					    u_xlat38 = log2(u_xlat6.w);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.y;
					    u_xlat38 = exp2(u_xlat38);
					    u_xlat38 = u_xlat38 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat38);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat15.xyz, u_xlat15.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat8.xyz = u_xlat3.xxx * u_xlat15.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat9.y, u_xlat9.x);
					            u_xlat3.x = min(u_xlat9.z, u_xlat3.x);
					            u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat15.xyz = u_xlat8.xyz * u_xlat3.xxx + u_xlat9.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat15.xyz, 6.0);
					        u_xlat39 = log2(u_xlat3.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat38) * u_xlat6.xyz + (-u_xlat3.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat3.xyz;
					    }
					    u_xlat38 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat3.xyz = vec3(u_xlat38) * vs_TEXCOORD0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * unity_ColorSpaceDielectricSpec.www;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12.x = u_xlat0.w + u_xlat37;
					    u_xlat12.x = u_xlat12.x + 9.99999975e-06;
					    u_xlat12.x = 2.0 / u_xlat12.x;
					    u_xlat24 = (-u_xlat37) + 1.0;
					    u_xlat1.x = u_xlat24 * u_xlat24;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat36 = (-u_xlat0.w) + 1.0;
					    u_xlat1.x = u_xlat36 * u_xlat36;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat36 = u_xlat36 * u_xlat1.x;
					    u_xlat1.x = dot(u_xlat0.xx, u_xlat0.xx);
					    u_xlat1.x = u_xlat1.x + -0.5;
					    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat36 + 1.0;
					    u_xlat12.y = u_xlat24 * u_xlat1.x;
					    u_xlat12.x = u_xlat12.x * 0.25;
					    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat13.x = max(u_xlat12.x, 9.99999975e-05);
					    u_xlat13.x = sqrt(u_xlat13.x);
					    u_xlat12.x = (u_xlatb1) ? u_xlat13.x : u_xlat12.x;
					    u_xlat12.xy = vec2(u_xlat37) * u_xlat12.xy;
					    u_xlat1.x = (u_xlatb1) ? 0.720000029 : 0.5;
					    u_xlat13.x = dot(unity_ColorSpaceDielectricSpec.xyz, unity_ColorSpaceDielectricSpec.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat12.x * u_xlat13.x;
					    u_xlat3 = (-unity_ColorSpaceDielectricSpec.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat3.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat13.xyz = u_xlat4.xyz * u_xlat12.yyy + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat12.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat12.x = u_xlat0.x * u_xlat0.x;
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat12.x;
					    u_xlat0.xyz = u_xlat3.yzw * u_xlat0.xxx + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat13.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat1.xxx;
					    u_xlat2.xyz = u_xlat3.xxx + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(u_xlat36) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "RenderType"="Opaque" }
  ZWrite Off
  Blend One One
  GpuProgramID 113554
Program "vp" {
SubProgram "d3d9 " {
Keywords { "POINT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _PlaneCenterLocal   c10      1
					//   _PlaneNormalLocal   c11      1
					//   _PlaneForwardLocal  c12      1
					//
					
					    vs_3_0
					    def c13, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c14, 1.57072878, -2, 3.14159274, 0
					    def c15, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    add r0.xyz, -c10.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c11
					    mad r0.xyz, c11.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c12.zxyw
					    mad r1.xyz, c12.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c12.yzxw, r0
					    dp3 r0.y, r1, c11
					    slt r0.y, r0.y, c14.w
					    mad r0.z, r0_abs.x, c13.y, c13.z
					    mad r0.z, r0.z, r0_abs.x, c13.w
					    mad r0.z, r0.z, r0_abs.x, c14.x
					    add r0.w, -r0_abs.x, c13.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c14.y, c14.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c15.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c15.y
					    mad r0, v0.xyzx, c15.zzzw, c15.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _PlaneCenterLocal   c10      1
					//   _PlaneNormalLocal   c11      1
					//   _PlaneForwardLocal  c12      1
					//
					
					    vs_3_0
					    def c13, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c14, 1.57072878, -2, 3.14159274, 0
					    def c15, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    add r0.xyz, -c10.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c11
					    mad r0.xyz, c11.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c12.zxyw
					    mad r1.xyz, c12.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c12.yzxw, r0
					    dp3 r0.y, r1, c11
					    slt r0.y, r0.y, c14.w
					    mad r0.z, r0_abs.x, c13.y, c13.z
					    mad r0.z, r0.z, r0_abs.x, c13.w
					    mad r0.z, r0.z, r0_abs.x, c14.x
					    add r0.w, -r0_abs.x, c13.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c14.y, c14.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c15.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c15.y
					    mad r0, v0.xyzx, c15.zzzw, c15.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _PlaneCenterLocal   c10      1
					//   _PlaneNormalLocal   c11      1
					//   _PlaneForwardLocal  c12      1
					//
					
					    vs_3_0
					    def c13, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c14, 1.57072878, -2, 3.14159274, 0
					    def c15, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    add r0.xyz, -c10.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c11
					    mad r0.xyz, c11.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c12.zxyw
					    mad r1.xyz, c12.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c12.yzxw, r0
					    dp3 r0.y, r1, c11
					    slt r0.y, r0.y, c14.w
					    mad r0.z, r0_abs.x, c13.y, c13.z
					    mad r0.z, r0.z, r0_abs.x, c13.w
					    mad r0.z, r0.z, r0_abs.x, c14.x
					    add r0.w, -r0_abs.x, c13.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c14.y, c14.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c15.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c15.y
					    mad r0, v0.xyzx, c15.zzzw, c15.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _PlaneCenterLocal   c10      1
					//   _PlaneNormalLocal   c11      1
					//   _PlaneForwardLocal  c12      1
					//
					
					    vs_3_0
					    def c13, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c14, 1.57072878, -2, 3.14159274, 0
					    def c15, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    add r0.xyz, -c10.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c11
					    mad r0.xyz, c11.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c12.zxyw
					    mad r1.xyz, c12.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c12.yzxw, r0
					    dp3 r0.y, r1, c11
					    slt r0.y, r0.y, c14.w
					    mad r0.z, r0_abs.x, c13.y, c13.z
					    mad r0.z, r0.z, r0_abs.x, c13.w
					    mad r0.z, r0.z, r0_abs.x, c14.x
					    add r0.w, -r0_abs.x, c13.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c14.y, c14.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c15.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c15.y
					    mad r0, v0.xyzx, c15.zzzw, c15.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _PlaneCenterLocal   c10      1
					//   _PlaneNormalLocal   c11      1
					//   _PlaneForwardLocal  c12      1
					//
					
					    vs_3_0
					    def c13, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c14, 1.57072878, -2, 3.14159274, 0
					    def c15, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    add r0.xyz, -c10.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c11
					    mad r0.xyz, c11.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c12.zxyw
					    mad r1.xyz, c12.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c12.yzxw, r0
					    dp3 r0.y, r1, c11
					    slt r0.y, r0.y, c14.w
					    mad r0.z, r0_abs.x, c13.y, c13.z
					    mad r0.z, r0.z, r0_abs.x, c13.w
					    mad r0.z, r0.z, r0_abs.x, c14.x
					    add r0.w, -r0_abs.x, c13.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c14.y, c14.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c15.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c15.y
					    mad r0, v0.xyzx, c15.zzzw, c15.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 38 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_FogParams     c10      1
					//   _PlaneCenterLocal   c11      1
					//   _PlaneNormalLocal   c12      1
					//   _PlaneForwardLocal  c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4.x
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mul r0.y, r0.x, c10.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o4.x, r0.x
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_FogParams     c10      1
					//   _PlaneCenterLocal   c11      1
					//   _PlaneNormalLocal   c12      1
					//   _PlaneForwardLocal  c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4.x
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mul r0.y, r0.x, c10.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o4.x, r0.x
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_FogParams     c10      1
					//   _PlaneCenterLocal   c11      1
					//   _PlaneNormalLocal   c12      1
					//   _PlaneForwardLocal  c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4.x
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mul r0.y, r0.x, c10.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o4.x, r0.x
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_FogParams     c10      1
					//   _PlaneCenterLocal   c11      1
					//   _PlaneNormalLocal   c12      1
					//   _PlaneForwardLocal  c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4.x
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mul r0.y, r0.x, c10.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o4.x, r0.x
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_FogParams     c10      1
					//   _PlaneCenterLocal   c11      1
					//   _PlaneNormalLocal   c12      1
					//   _PlaneForwardLocal  c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4.x
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mul r0.y, r0.x, c10.x
					    mov o0.z, r0.x
					    mul r0.x, r0.y, -r0.y
					    exp o4.x, r0.x
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[13];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD4 = exp2(u_xlat0.x);
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "POINT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   _LightColor0                   c6       1
					//   _Progress                      c7       1
					//   _Color                         c8       1
					//   _BackgroundColor               c9       1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c3, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    add r1.xyz, c4, -v1
					    nrm_pp r2.xyz, r1
					    dp3_pp r0.x, r0, r2
					    dp3_sat_pp r0.y, v0, r2
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.x
					    mov r1.y, c10.x
					    texld r1, r1, s0
					    mul_pp r0.x, r1.x, c10.z
					    mul_pp r0.xzw, r0.x, c5.xyyz
					    add r1.x, c7.x, -v2.x
					    mov r2.xyz, c8
					    cmp_pp r1.xyz, r1.x, r2, c9
					    mad_pp r0.xzw, r1.xyyz, c5.w, r0
					    mad r1, v1.xyzx, c10.xxxy, c10.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld_pp r1, r1.x, s1
					    mul_pp r1.xyz, r1.x, c6
					    mul_pp r1.xyz, r0.y, r1
					    mul_pp oC0.xyz, r0.xzww, r1
					    mov_pp oC0.w, c10.x
					
					// approximately 36 instruction slots used (2 texture, 34 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat2 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat2) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat2 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat2) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat2 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat2) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Progress                      c4       1
					//   _Color                         c5       1
					//   _BackgroundColor               c6       1
					//   unity_NHxRoughness             s0       1
					//
					
					    ps_3_0
					    def c7, 1, 16, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    dp3_pp r0.x, r0, c1
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.x
					    mov r0.y, c7.x
					    texld r0, r0, s0
					    mul_pp r0.x, r0.x, c7.y
					    mul_pp r0.xyz, r0.x, c2
					    add r0.w, c4.x, -v2.x
					    mov r1.xyz, c5
					    cmp_pp r1.xyz, r0.w, r1, c6
					    mad_pp r0.xyz, r1, c2.w, r0
					    dp3_sat_pp r0.w, v0, c1
					    mul_pp r1.xyz, r0.w, c3
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c7.x
					
					// approximately 25 instruction slots used (1 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       4
					//   _WorldSpaceCameraPos           c4       1
					//   _WorldSpaceLightPos0           c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   _LightColor0                   c7       1
					//   _Progress                      c8       1
					//   _Color                         c9       1
					//   _BackgroundColor               c10      1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0.5, 16
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c4, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    add r1.xyz, c5, -v1
					    nrm_pp r2.xyz, r1
					    dp3_pp r0.x, r0, r2
					    dp3_sat_pp r0.y, v0, r2
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.x
					    mov r1.y, c11.x
					    texld r1, r1, s0
					    mul_pp r0.x, r1.x, c11.w
					    mul_pp r0.xzw, r0.x, c6.xyyz
					    add r1.x, c8.x, -v2.x
					    mov r2.xyz, c9
					    cmp_pp r1.xyz, r1.x, r2, c10
					    mad_pp r0.xzw, r1.xyyz, c6.w, r0
					    mad r1, v1.xyzx, c11.xxxy, c11.yyyx
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r1.xy, r3, r2.x, c11.z
					    dp3 r1.z, r3, r3
					    texld_pp r2, r1.z, s2
					    texld_pp r1, r1, s1
					    mul r1.x, r2.x, r1.w
					    mul_pp r1.xyz, r1.x, c7
					    mul_pp r1.xyz, r0.y, r1
					    cmp_pp r1.xyz, -r3.z, c11.y, r1
					    mul_pp oC0.xyz, r0.xzww, r1
					    mov_pp oC0.w, c11.x
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat4 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1 = vs_TEXCOORD1.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb13;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat4 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1 = vs_TEXCOORD1.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat4 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1 = vs_TEXCOORD1.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   _LightColor0                   c6       1
					//   _Progress                      c7       1
					//   _Color                         c8       1
					//   _BackgroundColor               c9       1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    add r0.xyz, c3, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    add r1.xyz, c4, -v1
					    nrm_pp r2.xyz, r1
					    dp3_pp r0.x, r0, r2
					    dp3_sat_pp r0.y, v0, r2
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.x
					    mov r1.y, c10.x
					    texld r1, r1, s0
					    mul_pp r0.x, r1.x, c10.z
					    mul_pp r0.xzw, r0.x, c5.xyyz
					    add r1.x, c7.x, -v2.x
					    mov r2.xyz, c8
					    cmp_pp r1.xyz, r1.x, r2, c9
					    mad_pp r0.xzw, r1.xyyz, c5.w, r0
					    mad r1, v1.xyzx, c10.xxxy, c10.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld r2, r2, s1
					    texld r1, r1.x, s2
					    mul_pp r1.x, r2.w, r1.x
					    mul_pp r1.xyz, r1.x, c6
					    mul_pp r1.xyz, r0.y, r1
					    mul_pp oC0.xyz, r0.xzww, r1
					    mov_pp oC0.w, c10.x
					
					// approximately 38 instruction slots used (3 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat3 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat4.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat3 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat4.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat3 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat4.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       2
					//   _WorldSpaceCameraPos           c2       1
					//   _WorldSpaceLightPos0           c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   _LightColor0                   c5       1
					//   _Progress                      c6       1
					//   _Color                         c7       1
					//   _BackgroundColor               c8       1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c9, 1, 0, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c2, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    dp3_pp r0.x, r0, c3
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.x
					    mov r0.y, c9.x
					    texld r0, r0, s0
					    mul_pp r0.x, r0.x, c9.z
					    mul_pp r0.xyz, r0.x, c4
					    add r0.w, c6.x, -v2.x
					    mov r1.xyz, c7
					    cmp_pp r1.xyz, r0.w, r1, c8
					    mad_pp r0.xyz, r1, c4.w, r0
					    mad r1, v1.xyzx, c9.xxxy, c9.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s1
					    mul_pp r1.xyz, r1.w, c5
					    dp3_sat_pp r0.w, v0, c3
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, c9.x
					
					// approximately 30 instruction slots used (2 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD1.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD1.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD1.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   _LightColor0                   c6       1
					//   _Progress                      c7       1
					//   _Color                         c8       1
					//   _BackgroundColor               c9       1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c3, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    add r1.xyz, c4, -v1
					    nrm_pp r2.xyz, r1
					    dp3_pp r0.x, r0, r2
					    dp3_sat_pp r0.y, v0, r2
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.x
					    mov r1.y, c10.x
					    texld r1, r1, s0
					    mul_pp r0.x, r1.x, c10.z
					    mul_pp r0.xzw, r0.x, c5.xyyz
					    add r1.x, c7.x, -v2.x
					    mov r2.xyz, c8
					    cmp_pp r1.xyz, r1.x, r2, c9
					    mad_pp r0.xzw, r1.xyyz, c5.w, r0
					    mad r1, v1.xyzx, c10.xxxy, c10.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld_pp r1, r1.x, s1
					    mul_pp r1.xyz, r1.x, c6
					    mul_pp r1.xyz, r0.y, r1
					    mul_pp r0.xyz, r0.xzww, r1
					    mov_sat r0.w, v3.x
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c10.x
					
					// approximately 38 instruction slots used (2 texture, 36 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat2 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat2) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat2 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat2) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					float u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat2 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat2) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   _LightColor0                   c3       1
					//   _Progress                      c4       1
					//   _Color                         c5       1
					//   _BackgroundColor               c6       1
					//   unity_NHxRoughness             s0       1
					//
					
					    ps_3_0
					    def c7, 1, 16, 0, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    dp3_pp r0.x, r0, c1
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.x
					    mov r0.y, c7.x
					    texld r0, r0, s0
					    mul_pp r0.x, r0.x, c7.y
					    mul_pp r0.xyz, r0.x, c2
					    add r0.w, c4.x, -v2.x
					    mov r1.xyz, c5
					    cmp_pp r1.xyz, r0.w, r1, c6
					    mad_pp r0.xyz, r1, c2.w, r0
					    dp3_sat_pp r0.w, v0, c1
					    mul_pp r1.xyz, r0.w, c3
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, v3.x
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c7.x
					
					// approximately 27 instruction slots used (1 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec3 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       4
					//   _WorldSpaceCameraPos           c4       1
					//   _WorldSpaceLightPos0           c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   _LightColor0                   c7       1
					//   _Progress                      c8       1
					//   _Color                         c9       1
					//   _BackgroundColor               c10      1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0.5, 16
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c4, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    add r1.xyz, c5, -v1
					    nrm_pp r2.xyz, r1
					    dp3_pp r0.x, r0, r2
					    dp3_sat_pp r0.y, v0, r2
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.x
					    mov r1.y, c11.x
					    texld r1, r1, s0
					    mul_pp r0.x, r1.x, c11.w
					    mul_pp r0.xzw, r0.x, c6.xyyz
					    add r1.x, c8.x, -v2.x
					    mov r2.xyz, c9
					    cmp_pp r1.xyz, r1.x, r2, c10
					    mad_pp r0.xzw, r1.xyyz, c6.w, r0
					    mad r1, v1.xyzx, c11.xxxy, c11.yyyx
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r1.xy, r3, r2.x, c11.z
					    dp3 r1.z, r3, r3
					    texld_pp r2, r1.z, s2
					    texld_pp r1, r1, s1
					    mul r1.x, r2.x, r1.w
					    mul_pp r1.xyz, r1.x, c7
					    mul_pp r1.xyz, r0.y, r1
					    cmp_pp r1.xyz, -r3.z, c11.y, r1
					    mul_pp r0.xyz, r0.xzww, r1
					    mov_sat r0.w, v3.x
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c11.x
					
					// approximately 44 instruction slots used (3 texture, 41 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat4 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1 = vs_TEXCOORD1.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb13;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat4 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1 = vs_TEXCOORD1.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat12;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat4 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1 = vs_TEXCOORD1.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat4) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   _LightColor0                   c6       1
					//   _Progress                      c7       1
					//   _Color                         c8       1
					//   _BackgroundColor               c9       1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_2d s2
					    add r0.xyz, c3, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    add r1.xyz, c4, -v1
					    nrm_pp r2.xyz, r1
					    dp3_pp r0.x, r0, r2
					    dp3_sat_pp r0.y, v0, r2
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.x
					    mov r1.y, c10.x
					    texld r1, r1, s0
					    mul_pp r0.x, r1.x, c10.z
					    mul_pp r0.xzw, r0.x, c5.xyyz
					    add r1.x, c7.x, -v2.x
					    mov r2.xyz, c8
					    cmp_pp r1.xyz, r1.x, r2, c9
					    mad_pp r0.xzw, r1.xyyz, c5.w, r0
					    mad r1, v1.xyzx, c10.xxxy, c10.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld r2, r2, s1
					    texld r1, r1.x, s2
					    mul_pp r1.x, r2.w, r1.x
					    mul_pp r1.xyz, r1.x, c6
					    mul_pp r1.xyz, r0.y, r1
					    mul_pp r0.xyz, r0.xzww, r1
					    mov_sat r0.w, v3.x
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c10.x
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat3 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat4.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat3 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat4.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat3 = dot(vs_TEXCOORD0.xyz, u_xlat1.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat1 = texture(unity_NHxRoughness, u_xlat1.xy);
					    u_xlat0.x = u_xlat1.x * 16.0;
					    u_xlat0.xzw = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb1 = _Progress<vs_TEXCOORD2;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat4.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + _Color.xyz;
					    u_xlat0.xzw = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xzw;
					    u_xlat1.xyz = vs_TEXCOORD1.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = vec3(u_xlat3) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   float _Progress;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_NHxRoughness;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       2
					//   _WorldSpaceCameraPos           c2       1
					//   _WorldSpaceLightPos0           c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   _LightColor0                   c5       1
					//   _Progress                      c6       1
					//   _Color                         c7       1
					//   _BackgroundColor               c8       1
					//   unity_NHxRoughness             s0       1
					//   _LightTexture0                 s1       1
					//
					
					    ps_3_0
					    def c9, 1, 0, 16, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.x
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c2, -v1
					    nrm_pp r1.xyz, r0
					    nrm_pp r0.xyz, v0
					    dp3_pp r0.w, r1, r0
					    add_pp r0.w, r0.w, r0.w
					    mad_pp r0.xyz, r0, -r0.w, r1
					    dp3_pp r0.x, r0, c3
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.x
					    mov r0.y, c9.x
					    texld r0, r0, s0
					    mul_pp r0.x, r0.x, c9.z
					    mul_pp r0.xyz, r0.x, c4
					    add r0.w, c6.x, -v2.x
					    mov r1.xyz, c7
					    cmp_pp r1.xyz, r0.w, r1, c8
					    mad_pp r0.xyz, r1, c4.w, r0
					    mad r1, v1.xyzx, c9.xxxy, c9.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s1
					    mul_pp r1.xyz, r1.w, c5
					    dp3_sat_pp r0.w, v0, c3
					    mul_pp r1.xyz, r0.w, r1
					    mul_pp r0.xyz, r0, r1
					    mov_sat r0.w, v3.x
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.x
					
					// approximately 32 instruction slots used (2 texture, 30 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD1.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD1.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[3];
						vec4 _LightColor0;
						vec4 unused_0_4;
						mat4x4 unity_WorldToLight;
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D unity_NHxRoughness;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD1;
					in  float vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat6 = u_xlat6 + u_xlat6;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0 = texture(unity_NHxRoughness, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * unity_ColorSpaceDielectricSpec.xyz;
					    u_xlatb6 = _Progress<vs_TEXCOORD2;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * unity_ColorSpaceDielectricSpec.www + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD1.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" }
  GpuProgramID 165760
Program "vp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   unity_SHAr                c10      1
					//   unity_SHAg                c11      1
					//   unity_SHAb                c12      1
					//   unity_SHBr                c13      1
					//   unity_SHBg                c14      1
					//   unity_SHBb                c15      1
					//   unity_SHC                 c16      1
					//   unity_ColorSpaceLuminance c17      1
					//   _PlaneCenterLocal         c18      1
					//   _PlaneNormalLocal         c19      1
					//   _PlaneForwardLocal        c20      1
					//
					
					    vs_3_0
					    def c21, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c22, 1.57072878, -2, 3.14159274, 0
					    def c23, 6.28318024, 0.159155071, 1, 0
					    def c24, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.xyz
					    add r0.xyz, -c18.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c19
					    mad r0.xyz, c19.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c20.zxyw
					    mad r1.xyz, c20.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c20.yzxw, r0
					    dp3 r0.y, r1, c19
					    slt r0.y, r0.y, c22.w
					    mad r0.z, r0_abs.x, c21.y, c21.z
					    mad r0.z, r0.z, r0_abs.x, c21.w
					    mad r0.z, r0.z, r0_abs.x, c22.x
					    add r0.w, -r0_abs.x, c21.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c22.y, c22.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c23.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c23.y
					    mad r0, v0.xyzx, c23.zzzw, c23.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mad r0.xyz, c16, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c10, r1
					    dp4 r2.y, c11, r1
					    dp4 r2.z, c12, r1
					    mov o1.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.w
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c24.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c24.y, c24.z
					    max r1.xyz, r1, c22.w
					    abs r0.w, c17.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max o5.xyz, r2, c22.w
					    mov o4, c22.w
					
					// approximately 66 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v2.xyxy, c10.xyxy, c10
					    mov o4.xy, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   _PlaneCenterLocal             c15      1
					//   _PlaneNormalLocal             c16      1
					//   _PlaneForwardLocal            c17      1
					//
					
					    vs_3_0
					    def c18, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c19, 1.57072878, -2, 3.14159274, 0
					    def c20, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    add r0.xyz, -c15.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c16
					    mad r0.xyz, c16.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c17.zxyw
					    mad r1.xyz, c17.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c17.yzxw, r0
					    dp3 r0.y, r1, c16
					    slt r0.y, r0.y, c19.w
					    mad r0.z, r0_abs.x, c18.y, c18.z
					    mad r0.z, r0.z, r0_abs.x, c18.w
					    mad r0.z, r0.z, r0_abs.x, c19.x
					    add r0.w, -r0_abs.x, c18.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c19.y, c19.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c20.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c20.y
					    mad r0, v0.xyzx, c20.zzzw, c20.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o4.xy, v2, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o2.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r0.w, c13.w
					    add r0.y, -r0.w, c18.x
					    mul o5.w, r0.y, -r0.x
					    mov o4.zw, c19.w
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat2.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat14 = dot(u_xlat2.zxy, _PlaneNormalLocal.xyz);
					    u_xlat2.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat14) + u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _PlaneForwardLocal.zxy;
					    u_xlat3.xyz = _PlaneForwardLocal.yzx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat2.x = dot(_PlaneForwardLocal.yzx, u_xlat2.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat10 = abs(u_xlat2.x) * -0.0187292993 + 0.0742610022;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + -0.212114394;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + 1.57072878;
					    u_xlat14 = -abs(u_xlat2.x) + 1.0;
					    u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat3.x = u_xlat14 * u_xlat10;
					    u_xlat3.x = u_xlat3.x * -2.0 + 3.14159274;
					    u_xlat2.x = u_xlatb2 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat10 * u_xlat14 + u_xlat2.x;
					    u_xlat10 = (-u_xlat2.x) + 6.28318024;
					    u_xlat2.x = (u_xlatb6) ? u_xlat10 : u_xlat2.x;
					    vs_TEXCOORD2 = u_xlat2.x * 0.159155071;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD0.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   unity_DynamicLightmapST       c15      1
					//   _PlaneCenterLocal             c16      1
					//   _PlaneNormalLocal             c17      1
					//   _PlaneForwardLocal            c18      1
					//
					
					    vs_3_0
					    def c19, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c20, 1.57072878, -2, 3.14159274, 0
					    def c21, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    add r0.xyz, -c16.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c17
					    mad r0.xyz, c17.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c18.zxyw
					    mad r1.xyz, c18.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c18.yzxw, r0
					    dp3 r0.y, r1, c17
					    slt r0.y, r0.y, c20.w
					    mad r0.z, r0_abs.x, c19.y, c19.z
					    mad r0.z, r0.z, r0_abs.x, c19.w
					    mad r0.z, r0.z, r0_abs.x, c20.x
					    add r0.w, -r0_abs.x, c19.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c20.y, c20.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c21.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c21.y
					    mad r0, v0.xyzx, c21.zzzw, c21.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o4.zw, v3.xyxy, c15.xyxy, c15
					    mad o4.xy, v2, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o2.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r0.w, c13.w
					    add r0.y, -r0.w, c19.x
					    mul o5.w, r0.y, -r0.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat2.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat14 = dot(u_xlat2.zxy, _PlaneNormalLocal.xyz);
					    u_xlat2.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat14) + u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _PlaneForwardLocal.zxy;
					    u_xlat3.xyz = _PlaneForwardLocal.yzx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat2.x = dot(_PlaneForwardLocal.yzx, u_xlat2.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat10 = abs(u_xlat2.x) * -0.0187292993 + 0.0742610022;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + -0.212114394;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + 1.57072878;
					    u_xlat14 = -abs(u_xlat2.x) + 1.0;
					    u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat3.x = u_xlat14 * u_xlat10;
					    u_xlat3.x = u_xlat3.x * -2.0 + 3.14159274;
					    u_xlat2.x = u_xlatb2 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat10 * u_xlat14 + u_xlat2.x;
					    u_xlat10 = (-u_xlat2.x) + 6.28318024;
					    u_xlat2.x = (u_xlatb6) ? u_xlat10 : u_xlat2.x;
					    vs_TEXCOORD2 = u_xlat2.x * 0.159155071;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD0.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _WorldSpaceCameraPos    c10      1
					//   unity_DynamicLightmapST c11      1
					//   _PlaneCenterLocal       c12      1
					//   _PlaneNormalLocal       c13      1
					//   _PlaneForwardLocal      c14      1
					//
					
					    vs_3_0
					    def c15, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c16, 1.57072878, -2, 3.14159274, 0
					    def c17, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    add r0.xyz, -c12.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c13
					    mad r0.xyz, c13.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c14.zxyw
					    mad r1.xyz, c14.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c14.yzxw, r0
					    dp3 r0.y, r1, c13
					    slt r0.y, r0.y, c16.w
					    mad r0.z, r0_abs.x, c15.y, c15.z
					    mad r0.z, r0.z, r0_abs.x, c15.w
					    mad r0.z, r0.z, r0_abs.x, c16.x
					    add r0.w, -r0_abs.x, c15.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c16.y, c16.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c17.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c17.y
					    mad r0, v0.xyzx, c17.zzzw, c17.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, -r0, c10
					    mov o2.xyz, r0
					    mad o5.zw, v2.xyxy, c11.xyxy, c11
					    mov o5.xy, c16.w
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat4;
					float u_xlat7;
					float u_xlat9;
					int u_xlati9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb1 = u_xlat1.x<0.0;
					    u_xlat4 = abs(u_xlat9) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat9) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat9) + 1.57072878;
					    u_xlat7 = -abs(u_xlat9) + 1.0;
					    u_xlatb9 = u_xlat9<(-u_xlat9);
					    u_xlat7 = sqrt(u_xlat7);
					    u_xlat10 = u_xlat7 * u_xlat4;
					    u_xlat10 = u_xlat10 * -2.0 + 3.14159274;
					    u_xlat9 = u_xlatb9 ? u_xlat10 : float(0.0);
					    u_xlat9 = u_xlat4 * u_xlat7 + u_xlat9;
					    u_xlat4 = (-u_xlat9) + 6.28318024;
					    u_xlat9 = (u_xlatb1) ? u_xlat4 : u_xlat9;
					    vs_TEXCOORD2 = u_xlat9 * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_ObjectToWorld       c4       3
					//   unity_WorldToObject       c7       3
					//   unity_SHAr                c10      1
					//   unity_SHAg                c11      1
					//   unity_SHAb                c12      1
					//   unity_SHBr                c13      1
					//   unity_SHBg                c14      1
					//   unity_SHBb                c15      1
					//   unity_SHC                 c16      1
					//   unity_ColorSpaceLuminance c17      1
					//   _PlaneCenterLocal         c18      1
					//   _PlaneNormalLocal         c19      1
					//   _PlaneForwardLocal        c20      1
					//
					
					    vs_3_0
					    def c21, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c22, 1.57072878, -2, 3.14159274, 0
					    def c23, 6.28318024, 0.159155071, 1, 0
					    def c24, 0.416666657, 1.05499995, -0.0549999997, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.xyz
					    add r0.xyz, -c18.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c19
					    mad r0.xyz, c19.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c20.zxyw
					    mad r1.xyz, c20.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c20.yzxw, r0
					    dp3 r0.y, r1, c19
					    slt r0.y, r0.y, c22.w
					    mad r0.z, r0_abs.x, c21.y, c21.z
					    mad r0.z, r0.z, r0_abs.x, c21.w
					    mad r0.z, r0.z, r0_abs.x, c22.x
					    add r0.w, -r0_abs.x, c21.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c22.y, c22.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c23.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c23.y
					    mad r0, v0.xyzx, c23.zzzw, c23.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c13, r2
					    dp4 r3.y, c14, r2
					    dp4 r3.z, c15, r2
					    mad r0.xyz, c16, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c10, r1
					    dp4 r2.y, c11, r1
					    dp4 r2.z, c12, r1
					    mov o1.xyz, r1
					    add r0.xyz, r0, r2
					    max r1.xyz, r0, c22.w
					    log r2.x, r1.x
					    log r2.y, r1.y
					    log r2.z, r1.z
					    mul r1.xyz, r2, c24.x
					    exp r2.x, r1.x
					    exp r2.y, r1.y
					    exp r2.z, r1.z
					    mad r1.xyz, r2, c24.y, c24.z
					    max r1.xyz, r1, c22.w
					    abs r0.w, c17.w
					    sge r0.w, -r0.w, r0.w
					    lrp r2.xyz, r0.w, r1, r0
					    max o5.xyz, r2, c22.w
					    mov o4, c22.w
					
					// approximately 66 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[5];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_6[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat12 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat12) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb4 = u_xlat4<0.0;
					    u_xlat8 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat8 = u_xlat8 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat12 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat1.x = u_xlat12 * u_xlat8;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat8 * u_xlat12 + u_xlat0.x;
					    u_xlat8 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb4) ? u_xlat8 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD5.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _PlaneCenterLocal       c11      1
					//   _PlaneNormalLocal       c12      1
					//   _PlaneForwardLocal      c13      1
					//
					
					    vs_3_0
					    def c14, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c15, 1.57072878, -2, 3.14159274, 0
					    def c16, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    add r0.xyz, -c11.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c12
					    mad r0.xyz, c12.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c13.zxyw
					    mad r1.xyz, c13.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c13.yzxw, r0
					    dp3 r0.y, r1, c12
					    slt r0.y, r0.y, c15.w
					    mad r0.z, r0_abs.x, c14.y, c14.z
					    mad r0.z, r0.z, r0_abs.x, c14.w
					    mad r0.z, r0.z, r0_abs.x, c15.x
					    add r0.w, -r0_abs.x, c14.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c15.y, c15.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c16.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c16.y
					    mad r0, v0.xyzx, c16.zzzw, c16.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    mad o4.zw, v2.xyxy, c10.xyxy, c10
					    mov o4.xy, c15.w
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   _PlaneCenterLocal             c15      1
					//   _PlaneNormalLocal             c16      1
					//   _PlaneForwardLocal            c17      1
					//
					
					    vs_3_0
					    def c18, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c19, 1.57072878, -2, 3.14159274, 0
					    def c20, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    add r0.xyz, -c15.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c16
					    mad r0.xyz, c16.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c17.zxyw
					    mad r1.xyz, c17.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c17.yzxw, r0
					    dp3 r0.y, r1, c16
					    slt r0.y, r0.y, c19.w
					    mad r0.z, r0_abs.x, c18.y, c18.z
					    mad r0.z, r0.z, r0_abs.x, c18.w
					    mad r0.z, r0.z, r0_abs.x, c19.x
					    add r0.w, -r0_abs.x, c18.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c19.y, c19.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c20.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c20.y
					    mad r0, v0.xyzx, c20.zzzw, c20.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o4.xy, v2, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o2.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r0.w, c13.w
					    add r0.y, -r0.w, c18.x
					    mul o5.w, r0.y, -r0.x
					    mov o4.zw, c19.w
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat2.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat14 = dot(u_xlat2.zxy, _PlaneNormalLocal.xyz);
					    u_xlat2.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat14) + u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _PlaneForwardLocal.zxy;
					    u_xlat3.xyz = _PlaneForwardLocal.yzx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat2.x = dot(_PlaneForwardLocal.yzx, u_xlat2.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat10 = abs(u_xlat2.x) * -0.0187292993 + 0.0742610022;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + -0.212114394;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + 1.57072878;
					    u_xlat14 = -abs(u_xlat2.x) + 1.0;
					    u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat3.x = u_xlat14 * u_xlat10;
					    u_xlat3.x = u_xlat3.x * -2.0 + 3.14159274;
					    u_xlat2.x = u_xlatb2 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat10 * u_xlat14 + u_xlat2.x;
					    u_xlat10 = (-u_xlat2.x) + 6.28318024;
					    u_xlat2.x = (u_xlatb6) ? u_xlat10 : u_xlat2.x;
					    vs_TEXCOORD2 = u_xlat2.x * 0.159155071;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD0.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   unity_DynamicLightmapST       c15      1
					//   _PlaneCenterLocal             c16      1
					//   _PlaneNormalLocal             c17      1
					//   _PlaneForwardLocal            c18      1
					//
					
					    vs_3_0
					    def c19, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c20, 1.57072878, -2, 3.14159274, 0
					    def c21, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    add r0.xyz, -c16.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c17
					    mad r0.xyz, c17.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c18.zxyw
					    mad r1.xyz, c18.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c18.yzxw, r0
					    dp3 r0.y, r1, c17
					    slt r0.y, r0.y, c20.w
					    mad r0.z, r0_abs.x, c19.y, c19.z
					    mad r0.z, r0.z, r0_abs.x, c19.w
					    mad r0.z, r0.z, r0_abs.x, c20.x
					    add r0.w, -r0_abs.x, c19.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c20.y, c20.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c21.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c21.y
					    mad r0, v0.xyzx, c21.zzzw, c21.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o1.xyz, r0.yzww, r1.x
					    mad o4.zw, v3.xyxy, c15.xyxy, c15
					    mad o4.xy, v2, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o2.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r0.w, c13.w
					    add r0.y, -r0.w, c19.x
					    mul o5.w, r0.y, -r0.x
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat10;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat2.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat14 = dot(u_xlat2.zxy, _PlaneNormalLocal.xyz);
					    u_xlat2.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat14) + u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _PlaneForwardLocal.zxy;
					    u_xlat3.xyz = _PlaneForwardLocal.yzx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat2.x = dot(_PlaneForwardLocal.yzx, u_xlat2.xyz);
					    u_xlat6 = dot(u_xlat3.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb6 = u_xlat6<0.0;
					    u_xlat10 = abs(u_xlat2.x) * -0.0187292993 + 0.0742610022;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + -0.212114394;
					    u_xlat10 = u_xlat10 * abs(u_xlat2.x) + 1.57072878;
					    u_xlat14 = -abs(u_xlat2.x) + 1.0;
					    u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat3.x = u_xlat14 * u_xlat10;
					    u_xlat3.x = u_xlat3.x * -2.0 + 3.14159274;
					    u_xlat2.x = u_xlatb2 ? u_xlat3.x : float(0.0);
					    u_xlat2.x = u_xlat10 * u_xlat14 + u_xlat2.x;
					    u_xlat10 = (-u_xlat2.x) + 6.28318024;
					    u_xlat2.x = (u_xlatb6) ? u_xlat10 : u_xlat2.x;
					    vs_TEXCOORD2 = u_xlat2.x * 0.159155071;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD0.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _WorldSpaceCameraPos    c10      1
					//   unity_DynamicLightmapST c11      1
					//   _PlaneCenterLocal       c12      1
					//   _PlaneNormalLocal       c13      1
					//   _PlaneForwardLocal      c14      1
					//
					
					    vs_3_0
					    def c15, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c16, 1.57072878, -2, 3.14159274, 0
					    def c17, 6.28318024, 0.159155071, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.x
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    add r0.xyz, -c12.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c13
					    mad r0.xyz, c13.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c14.zxyw
					    mad r1.xyz, c14.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c14.yzxw, r0
					    dp3 r0.y, r1, c13
					    slt r0.y, r0.y, c16.w
					    mad r0.z, r0_abs.x, c15.y, c15.z
					    mad r0.z, r0.z, r0_abs.x, c15.w
					    mad r0.z, r0.z, r0_abs.x, c16.x
					    add r0.w, -r0_abs.x, c15.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c16.y, c16.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c17.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o3.x, r1.x, c17.y
					    mad r0, v0.xyzx, c17.zzzw, c17.wwwz
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, -r0, c10
					    mov o2.xyz, r0
					    mad o5.zw, v2.xyxy, c11.xyxy, c11
					    mov o5.xy, c16.w
					
					// approximately 42 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.159155071;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD2;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					float u_xlat4;
					float u_xlat7;
					float u_xlat9;
					int u_xlati9;
					bool u_xlatb9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat1.zxy, _PlaneNormalLocal.xyz);
					    u_xlat1.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _PlaneForwardLocal.zxy;
					    u_xlat2.xyz = _PlaneForwardLocal.yzx * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = dot(_PlaneForwardLocal.yzx, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb1 = u_xlat1.x<0.0;
					    u_xlat4 = abs(u_xlat9) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat9) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat9) + 1.57072878;
					    u_xlat7 = -abs(u_xlat9) + 1.0;
					    u_xlatb9 = u_xlat9<(-u_xlat9);
					    u_xlat7 = sqrt(u_xlat7);
					    u_xlat10 = u_xlat7 * u_xlat4;
					    u_xlat10 = u_xlat10 * -2.0 + 3.14159274;
					    u_xlat9 = u_xlatb9 ? u_xlat10 : float(0.0);
					    u_xlat9 = u_xlat4 * u_xlat7 + u_xlat9;
					    u_xlat4 = (-u_xlat9) + 6.28318024;
					    u_xlat9 = (u_xlatb1) ? u_xlat4 : u_xlat9;
					    vs_TEXCOORD2 = u_xlat9 * 0.159155071;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _Progress                      c1       1
					//   _Color                         c2       1
					//   _BackgroundColor               c3       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord5_pp v2.xyz
					    add r0.x, c1.x, -v1.x
					    mov r1.xyz, c2
					    cmp_pp r0.xyz, r0.x, r1, c3
					    mul_pp r0.xyz, r0, c0.w
					    mul_pp r1.xyz, r0, v2
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c4.x
					    mov r0.xy, c4
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c4.zzzy, c4.zzzx
					    mov_pp oC3.w, c4.x
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[5];
						float _Progress;
						vec4 unused_0_4[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_7;
					};
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD5.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[5];
						float _Progress;
						vec4 unused_0_4[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_7;
					};
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD5.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[5];
						float _Progress;
						vec4 unused_0_4[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_7;
					};
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD5.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Progress                      c2       1
					//   _Color                         c3       1
					//   _BackgroundColor               c4       1
					//   unity_DynamicLightmap          s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    texld_pp r0, v2.zwzw, s0
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c1.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    add r0.x, c2.x, -v1.x
					    mov r2.xyz, c3
					    cmp_pp r0.xyz, r0.x, r2, c4
					    mul_pp r0.xyz, r0, c0.w
					    mul_pp r1.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c5.x
					    mov r0.xy, c5
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c5.zzzy, c5.zzzx
					    mov_pp oC3.w, c5.x
					
					// approximately 24 instruction slots used (1 texture, 23 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   _Progress                      c2       1
					//   _Color                         c3       1
					//   _BackgroundColor               c4       1
					//   unity_Lightmap                 s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2.xy
					    dcl_2d s0
					    texld_pp r0, v2, s0
					    pow_pp r1.x, r0.w, c1.y
					    mul_pp r0.w, r1.x, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    add r0.w, c2.x, -v1.x
					    mov r1.xyz, c3
					    cmp_pp r1.xyz, r0.w, r1, c4
					    mul_pp r1.xyz, r1, c0.w
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.xyz, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC0.w, c5.x
					    mov r0.xy, c5
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c5.zzzy, c5.zzzx
					    mov_pp oC3.w, c5.x
					
					// approximately 20 instruction slots used (1 texture, 19 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D unity_Lightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D unity_Lightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D unity_Lightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   unity_DynamicLightmap_HDR      c2       1
					//   _Progress                      c3       1
					//   _Color                         c4       1
					//   _BackgroundColor               c5       1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v2.zwzw, s1
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c2.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld_pp r0, v2, s0
					    pow_pp r1.w, r0.w, c1.y
					    mul_pp r0.w, r1.w, c1.x
					    mad_pp r0.xyz, r0.w, r0, r1
					    add r0.w, c3.x, -v1.x
					    mov r1.xyz, c4
					    cmp_pp r1.xyz, r0.w, r1, c5
					    mul_pp r1.xyz, r1, c0.w
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.xyz, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC0.w, c6.x
					    mov r0.xy, c6
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c6.zzzy, c6.zzzx
					    mov_pp oC3.w, c6.x
					
					// approximately 30 instruction slots used (2 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Progress                      c2       1
					//   _Color                         c3       1
					//   _BackgroundColor               c4       1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 9.99999975e-005, 10000
					    def c6, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v2.zwzw, s0
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c1.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld_pp r0, v2.zwzw, s1
					    add_pp r0.xyz, r0, c5.x
					    dp3_pp r0.x, v0, r0
					    add_pp r0.x, r0.x, c5.y
					    mul_pp r0.xyz, r0.x, r1
					    add r1.x, -r0.w, c5.z
					    rcp r0.w, r0.w
					    cmp r0.w, r1.x, c5.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    add r0.w, c2.x, -v1.x
					    mov r1.xyz, c3
					    cmp_pp r1.xyz, r0.w, r1, c4
					    mul_pp r1.xyz, r1, c0.w
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.xyz, r1
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC0.w, c6.x
					    mov r0.xy, c6
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c6.zzzy, c6.zzzx
					    mov_pp oC3.w, c6.x
					
					// approximately 33 instruction slots used (2 texture, 31 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   _Progress                      c1       1
					//   _Color                         c2       1
					//   _BackgroundColor               c3       1
					//
					
					    ps_3_0
					    def c4, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord5_pp v2.xyz
					    add r0.x, c1.x, -v1.x
					    mov r1.xyz, c2
					    cmp_pp r0.xyz, r0.x, r1, c3
					    mul_pp r0.xyz, r0, c0.w
					    mul_pp oC3.xyz, r0, v2
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c4.x
					    mov r0.xy, c4
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c4.zzzy, c4.zzzx
					    mov_pp oC3.w, c4.x
					
					// approximately 11 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[5];
						float _Progress;
						vec4 unused_0_4[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_7;
					};
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD5.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[5];
						float _Progress;
						vec4 unused_0_4[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_7;
					};
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD5.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[5];
						float _Progress;
						vec4 unused_0_4[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_7;
					};
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD5.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Progress                      c2       1
					//   _Color                         c3       1
					//   _BackgroundColor               c4       1
					//   unity_DynamicLightmap          s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    texld_pp r0, v2.zwzw, s0
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c1.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    add r0.x, c2.x, -v1.x
					    mov r2.xyz, c3
					    cmp_pp r0.xyz, r0.x, r2, c4
					    mul_pp r0.xyz, r0, c0.w
					    mul_pp oC3.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c5.x
					    mov r0.xy, c5
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c5.zzzy, c5.zzzx
					    mov_pp oC3.w, c5.x
					
					// approximately 21 instruction slots used (1 texture, 20 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   _Progress                      c2       1
					//   _Color                         c3       1
					//   _BackgroundColor               c4       1
					//   unity_Lightmap                 s0       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2.xy
					    dcl_2d s0
					    texld_pp r0, v2, s0
					    pow_pp r1.x, r0.w, c1.y
					    mul_pp r0.w, r1.x, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    add r0.w, c2.x, -v1.x
					    mov r1.xyz, c3
					    cmp_pp r1.xyz, r0.w, r1, c4
					    mul_pp r1.xyz, r1, c0.w
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC0.xyz, r1
					    mov_pp oC0.w, c5.x
					    mov r0.xy, c5
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c5.zzzy, c5.zzzx
					    mov_pp oC3.w, c5.x
					
					// approximately 17 instruction slots used (1 texture, 16 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D unity_Lightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D unity_Lightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9[2];
					};
					uniform  sampler2D unity_Lightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = u_xlat1.w * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   unity_DynamicLightmap_HDR      c2       1
					//   _Progress                      c3       1
					//   _Color                         c4       1
					//   _BackgroundColor               c5       1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//
					
					    ps_3_0
					    def c6, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v2.zwzw, s1
					    mul_pp r0.w, r0.w, c2.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c2.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld_pp r0, v2, s0
					    pow_pp r1.w, r0.w, c1.y
					    mul_pp r0.w, r1.w, c1.x
					    mad_pp r0.xyz, r0.w, r0, r1
					    add r0.w, c3.x, -v1.x
					    mov r1.xyz, c4
					    cmp_pp r1.xyz, r0.w, r1, c5
					    mul_pp r1.xyz, r1, c0.w
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC0.xyz, r1
					    mov_pp oC0.w, c6.x
					    mov r0.xy, c6
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c6.zzzy, c6.zzzx
					    mov_pp oC3.w, c6.x
					
					// approximately 27 instruction slots used (2 texture, 25 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Progress;
						vec4 unused_0_7[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_10[2];
					};
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Progress                      c2       1
					//   _Color                         c3       1
					//   _BackgroundColor               c4       1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 9.99999975e-005, 10000
					    def c6, 1, 0, 0.5, 0
					    dcl_texcoord_pp v0.xyz
					    dcl_texcoord2 v1.x
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v2.zwzw, s0
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r0.xyz, r0, r0.w
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r0.xyz, r1, c1.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    texld_pp r0, v2.zwzw, s1
					    add_pp r0.xyz, r0, c5.x
					    dp3_pp r0.x, v0, r0
					    add_pp r0.x, r0.x, c5.y
					    mul_pp r0.xyz, r0.x, r1
					    add r1.x, -r0.w, c5.z
					    rcp r0.w, r0.w
					    cmp r0.w, r1.x, c5.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    add r0.w, c2.x, -v1.x
					    mov r1.xyz, c3
					    cmp_pp r1.xyz, r0.w, r1, c4
					    mul_pp r1.xyz, r1, c0.w
					    mul_pp oC3.xyz, r0, r1
					    mov_pp oC0.xyz, r1
					    mov_pp oC0.w, c6.x
					    mov r0.xy, c6
					    mul_pp oC1, r0.xxxy, c0.xyzx
					    mad_pp oC2, v0.xyzx, c6.zzzy, c6.zzzx
					    mov_pp oC3.w, c6.x
					
					// approximately 30 instruction slots used (2 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Progress;
						vec4 unused_0_6[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						vec4 unused_0_9;
					};
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec3 vs_TEXCOORD0;
					in  float vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD2;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat3.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + _Color.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * unity_ColorSpaceDielectricSpec.www;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.xyz = unity_ColorSpaceDielectricSpec.xyz;
					    SV_Target1.w = 0.0;
					    SV_Target2.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD0.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 248911
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _PlaneCenterLocal;
					//   float4 _PlaneForwardLocal;
					//   float4 _PlaneNormalLocal;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_LightmapST        c7       1
					//   unity_DynamicLightmapST c8       1
					//   _PlaneCenterLocal       c9       1
					//   _PlaneNormalLocal       c10      1
					//   _PlaneForwardLocal      c11      1
					//   unity_MetaVertexControl c12      1
					//
					
					    vs_3_0
					    def c13, 1, -0.0187292993, 0.0742610022, -0.212114394
					    def c14, 1.57072878, -2, 3.14159274, 0
					    def c15, 6.28318024, 0.159155071, 9.99999975e-005, 0
					    dcl_position v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_position o0
					    dcl_texcoord o1.xyz
					    dcl_texcoord1 o2.x
					    add r0.xyz, -c9.yzxw, v0.yzxw
					    dp3 r0.w, r0.zxyw, c10
					    mad r0.xyz, c10.yzxw, -r0.w, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mul r1.xyz, r0, c11.zxyw
					    mad r1.xyz, c11.yzxw, r0.yzxw, -r1
					    dp3 r0.x, c11.yzxw, r0
					    dp3 r0.y, r1, c10
					    slt r0.y, r0.y, c14.w
					    mad r0.z, r0_abs.x, c13.y, c13.z
					    mad r0.z, r0.z, r0_abs.x, c13.w
					    mad r0.z, r0.z, r0_abs.x, c14.x
					    add r0.w, -r0_abs.x, c13.x
					    slt r0.x, r0.x, -r0.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c14.y, c14.z
					    mad r0.x, r0.w, r0.x, r0.z
					    add r0.z, -r0.x, c15.x
					    lrp r1.x, r0.y, r0.z, r0.x
					    mul o2.x, r1.x, c15.y
					    slt r0.x, c14.w, v0.z
					    mul r0.z, r0.x, c15.z
					    mad r0.xy, v1, c7, c7.zwzw
					    lrp r1.xyz, c12.x, r0, v0
					    slt r0.x, c14.w, r1.z
					    mul r0.z, r0.x, c15.z
					    mad r0.xy, v2, c8, c8.zwzw
					    lrp r2.xyz, c12.y, r0, r1
					    mov r2.w, c13.x
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    dp4 o1.x, c4, v0
					    dp4 o1.y, c5, v0
					    dp4 o1.z, c6, v0
					
					// approximately 40 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_3[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD1 = u_xlat0.x * 0.159155071;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat9 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat9) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat3 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb3 = u_xlat3<0.0;
					    u_xlat6 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat6 = u_xlat6 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat9 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat1.x = u_xlat9 * u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat6 * u_xlat9 + u_xlat0.x;
					    u_xlat6 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb3) ? u_xlat6 : u_xlat0.x;
					    vs_TEXCOORD1 = u_xlat0.x * 0.159155071;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[9];
						vec4 _PlaneCenterLocal;
						vec4 _PlaneNormalLocal;
						vec4 _PlaneForwardLocal;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_3[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec3 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_POSITION0.yzx + (-_PlaneCenterLocal.yzx);
					    u_xlat6 = dot(u_xlat0.zxy, _PlaneNormalLocal.xyz);
					    u_xlat0.xyz = (-_PlaneNormalLocal.yzx) * vec3(u_xlat6) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _PlaneForwardLocal.zxy;
					    u_xlat1.xyz = _PlaneForwardLocal.yzx * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat0.x = dot(_PlaneForwardLocal.yzx, u_xlat0.xyz);
					    u_xlat2 = dot(u_xlat1.xyz, _PlaneNormalLocal.xyz);
					    u_xlatb2 = u_xlat2<0.0;
					    u_xlat4 = abs(u_xlat0.x) * -0.0187292993 + 0.0742610022;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + -0.212114394;
					    u_xlat4 = u_xlat4 * abs(u_xlat0.x) + 1.57072878;
					    u_xlat6 = -abs(u_xlat0.x) + 1.0;
					    u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 3.14159274;
					    u_xlat0.x = u_xlatb0 ? u_xlat1.x : float(0.0);
					    u_xlat0.x = u_xlat4 * u_xlat6 + u_xlat0.x;
					    u_xlat4 = (-u_xlat0.x) + 6.28318024;
					    u_xlat0.x = (u_xlatb2) ? u_xlat4 : u_xlat0.x;
					    vs_TEXCOORD1 = u_xlat0.x * 0.159155071;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BackgroundColor;
					//   float4 _Color;
					//   float _Progress;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Progress                 c0       1
					//   _Color                    c1       1
					//   _BackgroundColor          c2       1
					//   unity_MetaFragmentControl c3       1
					//   unity_OneOverOutputBoost  c4       1
					//   unity_MaxOutputValue      c5       1
					//
					
					    ps_3_0
					    def c6, 0, 0.0235294141, 0, 0
					    dcl_texcoord1 v0.x
					    mov_sat r0.x, c4.x
					    add r0.y, c0.x, -v0.x
					    mov r1.xyz, c1
					    cmp_pp r0.yzw, r0.y, r1.xxyz, c2.xxyz
					    log r1.x, r0.y
					    log r1.y, r0.z
					    log r1.z, r0.w
					    mul r0.xyz, r0.x, r1
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    min_pp r0.xyz, c5.x, r1
					    mov r1.xy, c3
					    cmp_pp r0.xyz, -r1.x, c6.x, r0
					    mov r0.w, c3.x
					    cmp_pp oC0, -r1.y, r0, c6.xxxy
					
					// approximately 16 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Progress;
						vec4 unused_0_2[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD1;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat3 = unity_OneOverOutputBoost;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Progress;
						vec4 unused_0_2[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD1;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat3 = unity_OneOverOutputBoost;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						float _Progress;
						vec4 unused_0_2[3];
						vec4 _Color;
						vec4 _BackgroundColor;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlatb0 = _Progress<vs_TEXCOORD1;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1.xyz = (-_Color.xyz) + _BackgroundColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + _Color.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat3 = unity_OneOverOutputBoost;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
}
 }
}
Fallback "Diffuse"
}