Shader "Standard (No Culling)" {
Properties {
 _Color ("Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _MainTex ("Albedo (RGB)", 2D) = "white" { }
 _Glossiness ("Smoothness", Range(0.000000,1.000000)) = 0.500000
 _Metallic ("Metallic", Range(0.000000,1.000000)) = 0.000000
}
SubShader { 
 LOD 200
 Tags { "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 64220
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_SHBr          c10      1
					//   unity_SHBg          c11      1
					//   unity_SHBb          c12      1
					//   unity_SHC           c13      1
					//   _MainTex_ST         c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c10, r2
					    dp4 r1.y, c11, r2
					    dp4 r1.z, c12, r2
					    mad o4.xyz, c13, r0.x, r1
					    mov o5, c15.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_LightmapST    c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.xy, v3, c10, c10.zwzw
					    mov o4.zw, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_LightmapST        c10      1
					//   unity_DynamicLightmapST c11      1
					//   _MainTex_ST             c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v4.xyxy, c11.xyxy, c11
					    mad o4.xy, v3, c10, c10.zwzw
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_SHBr          c12      1
					//   unity_SHBg          c13      1
					//   unity_SHBb          c14      1
					//   unity_SHC           c15      1
					//   _MainTex_ST         c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c16, c16.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c12, r2
					    dp4 r1.y, c13, r2
					    dp4 r1.z, c14, r2
					    mad o4.xyz, c15, r0.x, r1
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c17.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c17.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6, c17.y
					
					// approximately 30 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat10 = u_xlat1.y * u_xlat1.y;
					    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
					    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat2);
					    u_xlat1.y = dot(unity_SHBg, u_xlat2);
					    u_xlat1.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_LightmapST    c12      1
					//   _MainTex_ST         c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o4.zw, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_LightmapST        c12      1
					//   unity_DynamicLightmapST c13      1
					//   _MainTex_ST             c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v4.xyxy, c13.xyxy, c13
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c15.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c15.z
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   unity_4LightPosX0         c14      1
					//   unity_4LightPosY0         c15      1
					//   unity_4LightPosZ0         c16      1
					//   unity_4LightAtten0        c17      1
					//   unity_SHBr                c18      1
					//   unity_SHBg                c19      1
					//   unity_SHBb                c20      1
					//   unity_SHC                 c21      1
					//   unity_ColorSpaceLuminance c22      1
					//   _MainTex_ST               c23      1
					//
					
					    vs_3_0
					    def c24, 1, 0, 0.305306017, 0.682171106
					    def c25, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c24.xxxy, c24.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.z, c6, r0
					    dp4 o0.w, c7, r0
					    mad o1.xy, v2, c23, c23.zwzw
					    dp4 r0.x, c8, v0
					    add r1, -r0.x, c14
					    dp4 r0.y, c9, v0
					    add r2, -r0.y, c15
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r2, r4.y
					    mul r2, r2, r2
					    mad r2, r1, r1, r2
					    mad r1, r1, r4.x, r3
					    dp4 r0.z, c10, v0
					    add r3, -r0.z, c16
					    mov o3.xyz, r0
					    mad r0, r3, r4.z, r1
					    mad r1, r3, r3, r2
					    rsq r2.x, r1.x
					    rsq r2.y, r1.y
					    rsq r2.z, r1.z
					    rsq r2.w, r1.w
					    mov r3.x, c24.x
					    mad r1, r1, c17, r3.x
					    mul r0, r0, r2
					    max r0, r0, c24.y
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c24.z, c24.w
					    mad r1.xyz, r0, r1, c25.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c22.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r2.x, c18, r1
					    dp4 r2.y, c19, r1
					    dp4 r2.z, c20, r1
					    mad r1.xyz, c21, r0.w, r2
					    add o4.xyz, r0, r1
					    mov o5, c24.y
					
					// approximately 58 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat0.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat15 = u_xlat0.y * u_xlat0.y;
					    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					int u_xlati15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord6 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _ProjectionParams         c14      1
					//   _ScreenParams             c15      1
					//   unity_4LightPosX0         c16      1
					//   unity_4LightPosY0         c17      1
					//   unity_4LightPosZ0         c18      1
					//   unity_4LightAtten0        c19      1
					//   unity_SHBr                c20      1
					//   unity_SHBg                c21      1
					//   unity_SHBb                c22      1
					//   unity_SHC                 c23      1
					//   unity_ColorSpaceLuminance c24      1
					//   _MainTex_ST               c25      1
					//
					
					    vs_3_0
					    def c26, 1, 0, 0.305306017, 0.682171106
					    def c27, 0.0125228781, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c25, c25.zwzw
					    dp4 r0.x, c8, v0
					    add r1, -r0.x, c16
					    dp4 r0.y, c9, v0
					    add r2, -r0.y, c17
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r2, r4.y
					    mul r2, r2, r2
					    mad r2, r1, r1, r2
					    mad r1, r1, r4.x, r3
					    dp4 r0.z, c10, v0
					    add r3, -r0.z, c18
					    mov o3.xyz, r0
					    mad r0, r3, r4.z, r1
					    mad r1, r3, r3, r2
					    rsq r2.x, r1.x
					    rsq r2.y, r1.y
					    rsq r2.z, r1.z
					    rsq r2.w, r1.w
					    mov r3.x, c26.x
					    mad r1, r1, c19, r3.x
					    mul r0, r0, r2
					    max r0, r0, c26.y
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c26.z, c26.w
					    mad r1.xyz, r0, r1, c27.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c24.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o4.xyz, r0, r1
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c27.y
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c27.y
					    mov o0, r1
					    mov o5.zw, r1
					    mad o5.xy, r2.z, c15.zwzw, r2.xwzw
					    mov o6, c26.y
					
					// approximately 64 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat3 * u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[1].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[2].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat19 = u_xlat1.y * u_xlat1.y;
					    u_xlat19 = u_xlat1.x * u_xlat1.x + (-u_xlat19);
					    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat1.x = dot(unity_SHBr, u_xlat3);
					    u_xlat1.y = dot(unity_SHBg, u_xlat3);
					    u_xlat1.z = dot(unity_SHBb, u_xlat3);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					int u_xlati12;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat3 * u_xlat0;
					    u_xlat3.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD4.zw = u_xlat1.zw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord6 o5
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o5.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o5.xy, c14.y
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_SHBr          c10      1
					//   unity_SHBg          c11      1
					//   unity_SHBb          c12      1
					//   unity_SHC           c13      1
					//   _MainTex_ST         c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    nrm r1.xyz, r0.yzww
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c10, r2
					    dp4 r1.y, c11, r2
					    dp4 r1.z, c12, r2
					    mad o4.xyz, c13, r0.y, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o6, c15.y
					
					// approximately 26 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_LightmapST    c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.xy, v3, c10, c10.zwzw
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o4.zw, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_4_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_LightmapST        c10      1
					//   unity_DynamicLightmapST c11      1
					//   _MainTex_ST             c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord5 o5.x
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.zw, v4.xyxy, c11.xyxy, c11
					    mad o4.xy, v3, c10, c10.zwzw
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_SHBr          c12      1
					//   unity_SHBg          c13      1
					//   unity_SHBb          c14      1
					//   unity_SHC           c15      1
					//   _MainTex_ST         c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    dcl_texcoord6 o7
					    mad o1.xy, v2, c16, c16.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c12, r2
					    dp4 r1.y, c13, r2
					    dp4 r1.z, c14, r2
					    mad o4.xyz, c15, r0.x, r1
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c17.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c17.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o7, c17.y
					
					// approximately 31 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat6 = u_xlat1.y * u_xlat1.y;
					    u_xlat6 = u_xlat1.x * u_xlat1.x + (-u_xlat6);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat6 = u_xlat1.y * u_xlat1.y;
					    u_xlat6 = u_xlat1.x * u_xlat1.x + (-u_xlat6);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   unity_LightmapST    c12      1
					//   _MainTex_ST         c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o4.zw, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_LightmapST        c12      1
					//   unity_DynamicLightmapST c13      1
					//   _MainTex_ST             c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v4.xyxy, c13.xyxy, c13
					    mad o4.xy, v3, c12, c12.zwzw
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c15.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c15.z
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    vs_TEXCOORD3.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   unity_4LightPosX0         c14      1
					//   unity_4LightPosY0         c15      1
					//   unity_4LightPosZ0         c16      1
					//   unity_4LightAtten0        c17      1
					//   unity_SHBr                c18      1
					//   unity_SHBg                c19      1
					//   unity_SHBb                c20      1
					//   unity_SHC                 c21      1
					//   unity_ColorSpaceLuminance c22      1
					//   _MainTex_ST               c23      1
					//
					
					    vs_3_0
					    def c24, 1, 0, 0.305306017, 0.682171106
					    def c25, 0.0125228781, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad r0, v0.xyzx, c24.xxxy, c24.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.w, c7, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c23, c23.zwzw
					    dp4 r1.x, c8, v0
					    add r2, -r1.x, c14
					    dp4 r1.y, c9, v0
					    add r3, -r1.y, c15
					    mul r0.yzw, c12.xxyz, v1.y
					    mad r0.yzw, c11.xxyz, v1.x, r0
					    mad r0.yzw, c13.xxyz, v1.z, r0
					    nrm r4.xyz, r0.yzww
					    mul r5, r3, r4.y
					    mul r3, r3, r3
					    mad r3, r2, r2, r3
					    mad r2, r2, r4.x, r5
					    dp4 r1.z, c10, v0
					    add r5, -r1.z, c16
					    mov o3.xyz, r1
					    mad r1, r5, r4.z, r2
					    mad r2, r5, r5, r3
					    rsq r3.x, r2.x
					    rsq r3.y, r2.y
					    rsq r3.z, r2.z
					    rsq r3.w, r2.w
					    mov r5.x, c24.x
					    mad r2, r2, c17, r5.x
					    mul r1, r1, r3
					    max r1, r1, c24.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    rcp r3.w, r2.w
					    mul r1, r1, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c24.z, c24.w
					    mad r1.xyz, r0.yzww, r1, c25.x
					    mad r1.xyz, r0.yzww, r1, -r0.yzww
					    abs r1.w, c22.w
					    sge r1.w, -r1.w, r1.w
					    mad r0.yzw, r1.w, r1.xxyz, r0
					    mul r1.x, r4.y, r4.y
					    mad r1.x, r4.x, r4.x, -r1.x
					    mul r2, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r3.x, c18, r2
					    dp4 r3.y, c19, r2
					    dp4 r3.z, c20, r2
					    mad r1.xyz, c21, r1.x, r3
					    add o4.xyz, r0.yzww, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					    mov o6, c24.y
					
					// approximately 60 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat0.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat2 * u_xlat1;
					    u_xlat2.xyz = u_xlat1.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[1].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unused_1_6[2].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat15 = u_xlat0.y * u_xlat0.y;
					    u_xlat15 = u_xlat0.x * u_xlat0.x + (-u_xlat15);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat2);
					    u_xlat0.y = dot(unity_SHBg, u_xlat2);
					    u_xlat0.z = dot(unity_SHBb, u_xlat2);
					    u_xlat0.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					int u_xlati15;
					bool u_xlatb15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati15 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati15 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati15] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati15 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati15 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;
					    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat1.zzzz + u_xlat3;
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unused_1_6[0].xyz;
					    u_xlat2.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[1].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unused_1_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord5 o4.x
					    dcl_texcoord6 o5
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o5.zw, v3.xyxy, c10.xyxy, c10
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					    mov o5.xy, c12.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_LightColor          c0       4
					//   glstate_matrix_mvp        c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _ProjectionParams         c14      1
					//   _ScreenParams             c15      1
					//   unity_4LightPosX0         c16      1
					//   unity_4LightPosY0         c17      1
					//   unity_4LightPosZ0         c18      1
					//   unity_4LightAtten0        c19      1
					//   unity_SHBr                c20      1
					//   unity_SHBg                c21      1
					//   unity_SHBb                c22      1
					//   unity_SHC                 c23      1
					//   unity_ColorSpaceLuminance c24      1
					//   _MainTex_ST               c25      1
					//
					
					    vs_3_0
					    def c26, 1, 0, 0.305306017, 0.682171106
					    def c27, 0.0125228781, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.x
					    dcl_texcoord6 o7
					    mad o1.xy, v2, c25, c25.zwzw
					    dp4 r0.x, c8, v0
					    add r1, -r0.x, c16
					    dp4 r0.y, c9, v0
					    add r2, -r0.y, c17
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, c11, v1.x, r3
					    mad r3.xyz, c13, v1.z, r3
					    nrm r4.xyz, r3
					    mul r3, r2, r4.y
					    mul r2, r2, r2
					    mad r2, r1, r1, r2
					    mad r1, r1, r4.x, r3
					    dp4 r0.z, c10, v0
					    add r3, -r0.z, c18
					    mov o3.xyz, r0
					    mad r0, r3, r4.z, r1
					    mad r1, r3, r3, r2
					    rsq r2.x, r1.x
					    rsq r2.y, r1.y
					    rsq r2.z, r1.z
					    rsq r2.w, r1.w
					    mov r3.x, c26.x
					    mad r1, r1, c19, r3.x
					    mul r0, r0, r2
					    max r0, r0, c26.y
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    rcp r2.w, r1.w
					    mul r0, r0, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c26.z, c26.w
					    mad r1.xyz, r0, r1, c27.x
					    mad r1.xyz, r0, r1, -r0
					    abs r0.w, c24.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.xyz, r0.w, r1, r0
					    mul r0.w, r4.y, r4.y
					    mad r0.w, r4.x, r4.x, -r0.w
					    mul r1, r4.yzzx, r4.xyzz
					    mov o2.xyz, r4
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o4.xyz, r0, r1
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c27.y
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c27.y
					    mov o0, r1
					    mov o5.zw, r1
					    mov o6.x, r1.z
					    mad o5.xy, r2.z, c15.zwzw, r2.xwzw
					    mov o7, c26.y
					
					// approximately 65 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    u_xlat3 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat3 * u_xlat2;
					    u_xlat3.xyz = u_xlat2.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[1].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unused_2_6[2].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlatb12 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat2.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat12 = u_xlat1.y * u_xlat1.y;
					    u_xlat12 = u_xlat1.x * u_xlat1.x + (-u_xlat12);
					    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_2[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor;
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_4_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_4_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_4_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					int u_xlati12;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati18 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati18 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati18] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati18 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati18 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z;
					    vs_TEXCOORD4.zw = u_xlat1.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;
					    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
					    u_xlat3 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat2.zzzz + u_xlat4;
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat0 = u_xlat0 * u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat3 * u_xlat0;
					    u_xlat3.xyz = u_xlat0.yyy * unused_2_6[0].xyz;
					    u_xlat3.xyz = unity_LightColor.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[1].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat0.xyz = unused_2_6[2].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat0.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat0.xyz;
					    u_xlat18 = u_xlat2.y * u_xlat2.y;
					    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
					    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.zz + u_xlat0.xw;
					    u_xlati12 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat1.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _ProjectionParams       c10      1
					//   _ScreenParams           c11      1
					//   unity_DynamicLightmapST c12      1
					//   _MainTex_ST             c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.x
					    dcl_texcoord6 o6
					    mad o1.xy, v2, c13, c13.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o6.zw, v3.xyxy, c12.xyxy, c12
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c14.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c14.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					    mov o6.xy, c14.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "VERTEXLIGHT_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_5_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD5;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z;
					    vs_TEXCOORD4.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD4.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    vs_TEXCOORD6.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD6.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SHAr                     c2       1
					//   unity_SHAg                     c3       1
					//   unity_SHAb                     c4       1
					//   unity_SpecCube0_BoxMax         c5       1
					//   unity_SpecCube0_BoxMin         c6       1
					//   unity_SpecCube0_ProbePosition  c7       1
					//   unity_SpecCube0_HDR            c8       1
					//   unity_SpecCube1_BoxMax         c9       1
					//   unity_SpecCube1_BoxMin         c10      1
					//   unity_SpecCube1_ProbePosition  c11      1
					//   unity_SpecCube1_HDR            c12      1
					//   unity_ColorSpaceDielectricSpec c13      1
					//   unity_ColorSpaceLuminance      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c19, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c20, 0, 1, 0.416666657, 6
					    def c21, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c22, -1, 1, 3.14159274, 1.00000001e-007
					    def c23, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c24, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s2
					    mul_pp r3.xyz, r2, c18
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c20.x
					    mov r4.xy, c20
					    add_pp r1.w, r4.y, -c16.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mad_pp r5, v1.xyzx, c20.yyyx, c20.xxxy
					    dp4_pp r6.x, c2, r5
					    dp4_pp r6.y, c3, r5
					    dp4_pp r6.z, c4, r5
					    add_pp r5.xyz, r6, v3
					    max_pp r6.xyz, r5, c20.x
					    abs r3.w, c14.w
					    log_pp r5.x, r6.x
					    log_pp r5.y, r6.y
					    log_pp r5.z, r6.z
					    mul_pp r5.xyz, r5, c20.z
					    exp_pp r7.x, r5.x
					    exp_pp r7.y, r5.y
					    exp_pp r7.z, r5.z
					    mad_pp r5.xyz, r7, c19.x, c19.y
					    max_pp r7.xyz, r5, c20.x
					    cmp_pp r5.xyz, -r3.w, r7, r6
					    if_lt -c7.w, r4.x
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c5, -v2
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c6, -v2
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r5.w, r7.y, r7.x
					      min_pp r6.w, r7.z, r5.w
					      add r7.xyz, -c7, v2
					      mad_pp r6.xyz, r6, r6.w, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r5.w, r1.w, -c19.z, c19.w
					    mul_pp r5.w, r1.w, r5.w
					    mul_pp r6.w, r5.w, c20.w
					    texldl_pp r7, r6, s0
					    pow_pp r5.w, r7.w, c8.y
					    mul_pp r5.w, r5.w, c8.x
					    mul_pp r8.xyz, r7, r5.w
					    mov r7.w, c6.w
					    if_lt r7.w, c21.x
					      if_lt -c11.w, r4.x
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c9, -v2
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c10, -v2
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r4.x, r10.y, r10.x
					        min_pp r7.w, r10.z, r4.x
					        add r10.xyz, -c11, v2
					        mad_pp r6.xyz, r9, r7.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r4, r6, s1
					      pow_pp r6.x, r4.w, c12.y
					      mul_pp r4.w, r6.x, c12.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r6.xyz, r5.w, r7, -r4
					      mad_pp r8.xyz, c6.w, r6, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r6, c13
					    mad_pp r2.xyz, r2, c18, -r6
					    mad_pp r2.xyz, c17.x, r2, r6
					    mad_pp r4.w, c17.x, -r6.w, r6.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.w, -r0.w, c21.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.w, c21.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.w, r0.w, c20.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c20.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c20.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c20.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c21.w
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.w, r5.w
					    mad r4.xy, r0.x, r0.x, c22
					    mad_pp r0.w, r0.w, r4.x, c20.y
					    mul r1.z, r0.w, c22.z
					    mad r0.w, r1.z, r0.w, c22.w
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c20.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c20.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    mul_pp r1.z, r1.y, r1.y
					    dp2add_pp r1.z, r1.z, r1.w, c23.x
					    mad_pp r0.w, r1.z, r0.w, c20.y
					    mad_pp r1.z, r1.z, r1.x, c20.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c23.y
					    mad r0.y, r0.y, -c23.y, c23.z
					    rsq r1.z, r0.z
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.y, r0.y, c23.w, r1.z
					    cmp_pp r0.y, -r3.w, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c24.x, c24.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r3.w, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c20.x, c20.y
					    mul r0.w, r0.w, r0.y
					    add_pp r1.z, -r4.w, c20.y
					    add_sat_pp r1.z, r1.z, c16.x
					    mad_pp r4.xyz, c15, r0.z, r5
					    mul_pp r5.xyz, r0.w, c15
					    cmp_pp r0.yzw, r0.y, r5.xxyz, c20.x
					    add_pp r1.y, -r1.y, c20.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    lrp_pp r5.xyz, r1.y, c20.y, r2
					    mul_pp r0.yzw, r0, r5.xxyz
					    mad_pp r0.yzw, r3.xxyz, r4.xxyz, r0
					    mul_pp r3.xyz, r8, r0.x
					    lrp_pp r4.xyz, r1.x, r1.z, r2
					    mad_pp oC0.xyz, r3, r4, r0.yzww
					    mov_pp oC0.w, c20.y
					
					// approximately 177 instruction slots used (5 texture, 172 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
					        u_xlat40 = log2(u_xlat4.w);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
					        u_xlat40 = exp2(u_xlat40);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat40 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat40);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb39) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb39) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-u_xlat40) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat4.xyz = _LightColor0.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
					        u_xlat40 = log2(u_xlat4.w);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
					        u_xlat40 = exp2(u_xlat40);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat40 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat40);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb39) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb39) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-u_xlat40) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat4.xyz = _LightColor0.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Glossiness                    c14      1
					//   _Metallic                      c15      1
					//   _Color                         c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c17, 0, 1, 0.699999988, 1.70000005
					    def c18, 6, 0.999989986, 0.00100000005, 31.622776
					    def c19, 9.99999975e-006, -1, 1, 3.14159274
					    def c20, 1.00000001e-007, -0.5, 0.785398185, 9.99999975e-005
					    def c21, 0.00999999978, 0.280000001, 1, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord6 v3.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s3
					    mul_pp r3.xyz, r2, c16
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c17.x
					    mov r4.xy, c17
					    add_pp r1.w, r4.y, -c14.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    texld_pp r5, v3.zwzw, s0
					    mul_pp r3.w, r5.w, c12.x
					    mul_pp r5.xyz, r5, r3.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c12.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    if_lt -c4.w, r4.x
					      nrm_pp r5.xyz, r4.yzww
					      add r7.xyz, c2, -v2
					      rcp r8.x, r5.x
					      rcp r8.y, r5.y
					      rcp r8.z, r5.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c3, -v2
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r5, r8, r7
					      min_pp r3.w, r7.y, r7.x
					      min_pp r5.w, r7.z, r3.w
					      add r7.xyz, -c4, v2
					      mad_pp r5.xyz, r5, r5.w, r7
					    else
					      mov_pp r5.xyz, r4.yzww
					    endif
					    mad_pp r3.w, r1.w, -c17.z, c17.w
					    mul_pp r3.w, r1.w, r3.w
					    mul_pp r5.w, r3.w, c18.x
					    texldl_pp r7, r5, s1
					    pow_pp r3.w, r7.w, c5.y
					    mul_pp r3.w, r3.w, c5.x
					    mul_pp r8.xyz, r7, r3.w
					    mov r6.w, c3.w
					    if_lt r6.w, c18.y
					      if_lt -c8.w, r4.x
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c6, -v2
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c7, -v2
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r4.x, r10.y, r10.x
					        min_pp r6.w, r10.z, r4.x
					        add r10.xyz, -c8, v2
					        mad_pp r5.xyz, r9, r6.w, r10
					      else
					        mov_pp r5.xyz, r4.yzww
					      endif
					      texldl_pp r4, r5, s2
					      pow_pp r5.x, r4.w, c9.y
					      mul_pp r4.w, r5.x, c9.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r5.xyz, r3.w, r7, -r4
					      mad_pp r8.xyz, c3.w, r5, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r5, c10
					    mad_pp r2.xyz, r2, c16, -r5
					    mad_pp r2.xyz, c15.x, r2, r5
					    mad_pp r3.w, c15.x, -r5.w, r5.w
					    mul_pp r3.xyz, r3.w, r3
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r4.w, -r0.w, c18.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r4.w, c18.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r4.w, r0.w, c17.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c17.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c19.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r4.w, r4.w
					    mad r4.xy, r0.x, r0.x, c19.yzzw
					    mad_pp r0.w, r0.w, r4.x, c17.y
					    mul r1.z, r0.w, c19.w
					    mad r0.w, r1.z, r0.w, c20.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c17.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c17.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c20.y
					    mad_pp r0.w, r1.z, r0.w, c17.y
					    mad_pp r1.z, r1.z, r1.x, c17.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c20.z
					    abs r1.z, c11.w
					    mad r0.y, r0.y, -c20.z, c20.w
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c21.x, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c21.y, c21.z
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c17.x, c17.y
					    mul r0.w, r0.w, r0.y
					    add_pp r1.z, -r3.w, c14.x
					    add_sat_pp r1.z, r1.z, c17.y
					    mad_pp r4.xyz, c13, r0.z, r6
					    mul_pp r5.xyz, r0.w, c13
					    cmp_pp r0.yzw, r0.y, r5.xxyz, c17.x
					    add_pp r1.y, -r1.y, c17.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    lrp_pp r5.xyz, r1.y, c17.y, r2
					    mul_pp r0.yzw, r0, r5.xxyz
					    mad_pp r0.yzw, r3.xxyz, r4.xxyz, r0
					    mul_pp r3.xyz, r8, r0.x
					    lrp_pp r4.xyz, r1.x, r1.z, r2
					    mad_pp oC0.xyz, r3, r4, r0.yzww
					    mov_pp oC0.w, c17.y
					
					// approximately 171 instruction slots used (6 texture, 165 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_SpecCube0_BoxMax         c1       1
					//   unity_SpecCube0_BoxMin         c2       1
					//   unity_SpecCube0_ProbePosition  c3       1
					//   unity_SpecCube0_HDR            c4       1
					//   unity_SpecCube1_BoxMax         c5       1
					//   unity_SpecCube1_BoxMin         c6       1
					//   unity_SpecCube1_ProbePosition  c7       1
					//   unity_SpecCube1_HDR            c8       1
					//   unity_ColorSpaceDielectricSpec c9       1
					//   unity_ColorSpaceLuminance      c10      1
					//   unity_Lightmap_HDR             c11      1
					//   _Glossiness                    c12      1
					//   _Metallic                      c13      1
					//   _Color                         c14      1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c15, 1, 0, 0.699999988, 1.70000005
					    def c16, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s3
					    mul_pp r2.xyz, r0, c14
					    mov r3.xy, c15
					    add_pp r0.w, r3.x, -c12.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xzw, v1.xyyz, -r1.w, -r1.xyyz
					    texld_pp r4, v3, s0
					    pow_pp r1.w, r4.w, c11.y
					    mul_pp r1.w, r1.w, c11.x
					    mul_pp r4.xyz, r4, r1.w
					    if_lt -c3.w, r3.y
					      nrm_pp r5.xyz, r3.xzww
					      add r6.xyz, c1, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c2, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c3, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.xzww
					    endif
					    mad_pp r1.w, r0.w, -c15.z, c15.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c16.x
					    texldl_pp r6, r5, s1
					    pow_pp r1.w, r6.w, c4.y
					    mul_pp r1.w, r1.w, c4.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c2.w
					    if_lt r2.w, c16.y
					      if_lt -c7.w, r3.y
					        nrm_pp r8.xyz, r3.xzww
					        add r9.xyz, c5, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c6, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.y, r9.z, r2.w
					        add r9.xyz, -c7, v2
					        mad_pp r5.xyz, r8, r3.y, r9
					      else
					        mov_pp r5.xyz, r3.xzww
					      endif
					      texldl_pp r3, r5, s2
					      pow_pp r2.w, r3.w, c8.y
					      mul_pp r2.w, r2.w, c8.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c2.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c9
					    mad_pp r0.xyz, r0, c14, -r5
					    mad_pp r0.xyz, c13.x, r0, r5
					    mad_pp r1.w, c13.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c10.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c16.z, c16.w
					    mad_pp r1.y, r1.y, r1.y, c15.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c12.x
					    add_sat_pp r1.y, r1.y, c15.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c15.x
					    cmp_pp r0.w, r1.x, r0.w, c15.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp oC0.xyz, r2, r4, r0
					    mov_pp oC0.w, c15.x
					
					// approximately 111 instruction slots used (6 texture, 105 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_SpecCube0_BoxMax         c1       1
					//   unity_SpecCube0_BoxMin         c2       1
					//   unity_SpecCube0_ProbePosition  c3       1
					//   unity_SpecCube0_HDR            c4       1
					//   unity_SpecCube1_BoxMax         c5       1
					//   unity_SpecCube1_BoxMin         c6       1
					//   unity_SpecCube1_ProbePosition  c7       1
					//   unity_SpecCube1_HDR            c8       1
					//   unity_ColorSpaceDielectricSpec c9       1
					//   unity_ColorSpaceLuminance      c10      1
					//   unity_Lightmap_HDR             c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _Glossiness                    c13      1
					//   _Metallic                      c14      1
					//   _Color                         c15      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c16, 1, 0, 0.699999988, 1.70000005
					    def c17, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s4
					    mul_pp r2.xyz, r0, c15
					    mov r3.xy, c16
					    add_pp r0.w, r3.x, -c13.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xzw, v1.xyyz, -r1.w, -r1.xyyz
					    texld_pp r4, v3, s0
					    pow_pp r1.w, r4.w, c11.y
					    mul_pp r1.w, r1.w, c11.x
					    texld_pp r5, v3.zwzw, s1
					    mul_pp r2.w, r5.w, c12.x
					    mul_pp r5.xyz, r5, r2.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c12.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    mad_pp r4.xyz, r1.w, r4, r6
					    if_lt -c3.w, r3.y
					      nrm_pp r5.xyz, r3.xzww
					      add r6.xyz, c1, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c2, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c3, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.xzww
					    endif
					    mad_pp r1.w, r0.w, -c16.z, c16.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c17.x
					    texldl_pp r6, r5, s2
					    pow_pp r1.w, r6.w, c4.y
					    mul_pp r1.w, r1.w, c4.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c2.w
					    if_lt r2.w, c17.y
					      if_lt -c7.w, r3.y
					        nrm_pp r8.xyz, r3.xzww
					        add r9.xyz, c5, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c6, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.y, r9.z, r2.w
					        add r9.xyz, -c7, v2
					        mad_pp r5.xyz, r8, r3.y, r9
					      else
					        mov_pp r5.xyz, r3.xzww
					      endif
					      texldl_pp r3, r5, s3
					      pow_pp r2.w, r3.w, c8.y
					      mul_pp r2.w, r2.w, c8.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c2.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c9
					    mad_pp r0.xyz, r0, c15, -r5
					    mad_pp r0.xyz, c14.x, r0, r5
					    mad_pp r1.w, c14.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c10.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c17.z, c17.w
					    mad_pp r1.y, r1.y, r1.y, c16.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c13.x
					    add_sat_pp r1.y, r1.y, c16.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c16.x
					    cmp_pp r0.w, r1.x, r0.w, c16.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp oC0.xyz, r2, r4, r0
					    mov_pp oC0.w, c16.x
					
					// approximately 121 instruction slots used (7 texture, 114 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat35 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat35 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Glossiness                    c14      1
					//   _Metallic                      c15      1
					//   _Color                         c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c17, 0, 1, -0.5, 0.5
					    def c18, 9.99999975e-005, 10000, 0.699999988, 1.70000005
					    def c19, 6, 0.999989986, 0.00100000005, 31.622776
					    def c20, 9.99999975e-006, -1, 1, 3.14159274
					    def c21, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c22, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord6 v3.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s4
					    mul_pp r3.xyz, r2, c16
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c17.x
					    mov r4.xy, c17
					    add_pp r1.w, r4.y, -c14.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    texld_pp r5, v3.zwzw, s0
					    mul_pp r3.w, r5.w, c12.x
					    mul_pp r5.xyz, r5, r3.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c12.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    texld_pp r5, v3.zwzw, s1
					    add_pp r5.xyz, r5, c17.z
					    dp3_pp r3.w, v1, r5
					    add_pp r3.w, r3.w, c17.w
					    mul_pp r5.xyz, r3.w, r6
					    add r3.w, -r5.w, c18.x
					    rcp r5.w, r5.w
					    cmp r3.w, r3.w, c18.y, r5.w
					    if_lt -c4.w, r4.x
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c2, -v2
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c3, -v2
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r5.w, r7.y, r7.x
					      min_pp r6.w, r7.z, r5.w
					      add r7.xyz, -c4, v2
					      mad_pp r6.xyz, r6, r6.w, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r5.w, r1.w, -c18.z, c18.w
					    mul_pp r5.w, r1.w, r5.w
					    mul_pp r6.w, r5.w, c19.x
					    texldl_pp r7, r6, s2
					    pow_pp r5.w, r7.w, c5.y
					    mul_pp r5.w, r5.w, c5.x
					    mul_pp r8.xyz, r7, r5.w
					    mov r7.w, c3.w
					    if_lt r7.w, c19.y
					      if_lt -c8.w, r4.x
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c6, -v2
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c7, -v2
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r4.x, r10.y, r10.x
					        min_pp r7.w, r10.z, r4.x
					        add r10.xyz, -c8, v2
					        mad_pp r6.xyz, r9, r7.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r4, r6, s3
					      pow_pp r6.x, r4.w, c9.y
					      mul_pp r4.w, r6.x, c9.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r6.xyz, r5.w, r7, -r4
					      mad_pp r8.xyz, c3.w, r6, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r6, c10
					    mad_pp r2.xyz, r2, c16, -r6
					    mad_pp r2.xyz, c15.x, r2, r6
					    mad_pp r4.w, c15.x, -r6.w, r6.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.w, -r0.w, c19.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.w, c19.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.w, r0.w, c17.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c17.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c20.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.w, r5.w
					    mad r4.xy, r0.x, r0.x, c20.yzzw
					    mad_pp r0.w, r0.w, r4.x, c17.y
					    mul r1.z, r0.w, c20.w
					    mad r0.w, r1.z, r0.w, c21.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c17.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c17.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c17.z
					    mad_pp r0.w, r1.z, r0.w, c17.y
					    mad_pp r1.z, r1.z, r1.x, c17.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c21.y
					    abs r1.z, c11.w
					    mad r0.y, r0.y, -c21.y, c21.z
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c21.w, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c22.x, c22.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c17.x, c17.y
					    mul r0.w, r0.w, r0.y
					    add_pp r1.z, -r4.w, c17.y
					    add_sat_pp r1.z, r1.z, c14.x
					    mul_pp r4.xyz, r0.z, c13
					    mad_pp r4.xyz, r5, r3.w, r4
					    mul_pp r5.xyz, r0.w, c13
					    cmp_pp r0.yzw, r0.y, r5.xxyz, c17.x
					    add_pp r1.y, -r1.y, c17.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    lrp_pp r5.xyz, r1.y, c17.y, r2
					    mul_pp r0.yzw, r0, r5.xxyz
					    mad_pp r0.yzw, r3.xxyz, r4.xxyz, r0
					    mul_pp r3.xyz, r8, r0.x
					    lrp_pp r4.xyz, r1.x, r1.z, r2
					    mad_pp oC0.xyz, r3, r4, r0.yzww
					    mov_pp oC0.w, c17.y
					
					// approximately 180 instruction slots used (7 texture, 173 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat39 = u_xlat39 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
					    u_xlat39 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat39);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat39 = u_xlat39 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
					    u_xlat39 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat39);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SHAr                     c2       1
					//   unity_SHAg                     c3       1
					//   unity_SHAb                     c4       1
					//   unity_SpecCube0_BoxMax         c5       1
					//   unity_SpecCube0_BoxMin         c6       1
					//   unity_SpecCube0_ProbePosition  c7       1
					//   unity_SpecCube0_HDR            c8       1
					//   unity_SpecCube1_BoxMax         c9       1
					//   unity_SpecCube1_BoxMin         c10      1
					//   unity_SpecCube1_ProbePosition  c11      1
					//   unity_SpecCube1_HDR            c12      1
					//   unity_ColorSpaceDielectricSpec c13      1
					//   unity_ColorSpaceLuminance      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _ShadowMapTexture              s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c19, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c20, 0, 1, 0.416666657, 6
					    def c21, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c22, -1, 1, 3.14159274, 1.00000001e-007
					    def c23, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c24, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s3
					    mul_pp r3.xyz, r2, c18
					    texldp_pp r4, v4, s2
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c20.x
					    mov r5.xy, c20
					    add_pp r1.w, r5.y, -c16.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mul_pp r5.yzw, r4.x, c15.xxyz
					    mad_pp r6, v1.xyzx, c20.yyyx, c20.xxxy
					    dp4_pp r7.x, c2, r6
					    dp4_pp r7.y, c3, r6
					    dp4_pp r7.z, c4, r6
					    add_pp r6.xyz, r7, v3
					    max_pp r7.xyz, r6, c20.x
					    abs r3.w, c14.w
					    log_pp r6.x, r7.x
					    log_pp r6.y, r7.y
					    log_pp r6.z, r7.z
					    mul_pp r6.xyz, r6, c20.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.y
					    exp_pp r8.z, r6.z
					    mad_pp r6.xyz, r8, c19.x, c19.y
					    max_pp r8.xyz, r6, c20.x
					    cmp_pp r6.xyz, -r3.w, r8, r7
					    if_lt -c7.w, r5.x
					      nrm_pp r7.xyz, r4.yzww
					      add r8.xyz, c5, -v2
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c6, -v2
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r4.x, r8.y, r8.x
					      min_pp r6.w, r8.z, r4.x
					      add r8.xyz, -c7, v2
					      mad_pp r7.xyz, r7, r6.w, r8
					    else
					      mov_pp r7.xyz, r4.yzww
					    endif
					    mad_pp r4.x, r1.w, -c19.z, c19.w
					    mul_pp r4.x, r1.w, r4.x
					    mul_pp r7.w, r4.x, c20.w
					    texldl_pp r8, r7, s0
					    pow_pp r4.x, r8.w, c8.y
					    mul_pp r4.x, r4.x, c8.x
					    mul_pp r9.xyz, r8, r4.x
					    mov r6.w, c6.w
					    if_lt r6.w, c21.x
					      if_lt -c11.w, r5.x
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c9, -v2
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c10, -v2
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r5.x, r11.y, r11.x
					        min_pp r6.w, r11.z, r5.x
					        add r11.xyz, -c11, v2
					        mad_pp r7.xyz, r10, r6.w, r11
					      else
					        mov_pp r7.xyz, r4.yzww
					      endif
					      texldl_pp r7, r7, s1
					      pow_pp r4.y, r7.w, c12.y
					      mul_pp r4.y, r4.y, c12.x
					      mul_pp r4.yzw, r7.xxyz, r4.y
					      mad r7.xyz, r4.x, r8, -r4.yzww
					      mad_pp r9.xyz, c6.w, r7, r4.yzww
					    endif
					    nrm_pp r4.xyz, v1
					    mov r7, c13
					    mad_pp r2.xyz, r2, c18, -r7
					    mad_pp r2.xyz, c17.x, r2, r7
					    mad_pp r4.w, c17.x, -r7.w, r7.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.x, -r0.w, c21.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.x, c21.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.x, r0.w, c20.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c20.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c20.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c20.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c21.w
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.x, r5.x
					    mad r4.xy, r0.x, r0.x, c22
					    mad_pp r0.w, r0.w, r4.x, c20.y
					    mul r1.z, r0.w, c22.z
					    mad r0.w, r1.z, r0.w, c22.w
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c20.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c20.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    mul_pp r1.z, r1.y, r1.y
					    dp2add_pp r1.z, r1.z, r1.w, c23.x
					    mad_pp r0.w, r1.z, r0.w, c20.y
					    mad_pp r1.z, r1.z, r1.x, c20.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c23.y
					    mad r0.y, r0.y, -c23.y, c23.z
					    rsq r1.z, r0.z
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.y, r0.y, c23.w, r1.z
					    cmp_pp r0.y, -r3.w, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c24.x, c24.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r3.w, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c20.x, c20.y
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c20.x
					    add_pp r0.w, -r4.w, c20.y
					    add_sat_pp r0.w, r0.w, c16.x
					    mad_pp r4.xyz, r5.yzww, r0.z, r6
					    mul_pp r5.xyz, r5.yzww, r0.y
					    add_pp r0.y, -r1.y, c20.y
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.yzw, r0.y, c20.y, r2.xxyz
					    mul_pp r1.yzw, r1, r5.xxyz
					    mad_pp r1.yzw, r3.xxyz, r4.xxyz, r1
					    mul_pp r0.xyz, r9, r0.x
					    lrp_pp r3.xyz, r1.x, r0.w, r2
					    mad_pp oC0.xyz, r0, r3, r1.yzww
					    mov_pp oC0.w, c20.y
					
					// approximately 179 instruction slots used (6 texture, 173 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					float u_xlat45;
					bool u_xlatb45;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat4.x);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz;
					        u_xlat9.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat9);
					        u_xlat7.y = dot(u_xlat8, u_xlat9);
					        u_xlat7.z = dot(u_xlat6, u_xlat9);
					    } else {
					        u_xlat6.xyz = vs_TEXCOORD1.xyz;
					        u_xlat6.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat6);
					        u_xlat7.y = dot(unity_SHAg, u_xlat6);
					        u_xlat7.z = dot(unity_SHAb, u_xlat6);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb4){
					        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat4.x = inversesqrt(u_xlat4.x);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat4.x = min(u_xlat8.y, u_xlat8.x);
					        u_xlat4.x = min(u_xlat8.z, u_xlat4.x);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat4.xxx + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat4.x = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat4.x = u_xlat41 * u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat4.x);
					    u_xlat44 = log2(u_xlat7.w);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat44);
					    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb45){
					        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb45){
					            u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat45 = inversesqrt(u_xlat45);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat45);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat45 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat45 = min(u_xlat10.z, u_xlat45);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat45) + u_xlat10.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat4.x);
					        u_xlat43 = log2(u_xlat4.w);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.y;
					        u_xlat43 = exp2(u_xlat43);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat43);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz + (-u_xlat4.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat43 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlat39 = max(u_xlat26, 9.99999975e-05);
					    u_xlat39 = sqrt(u_xlat39);
					    u_xlat26 = (u_xlatb42) ? u_xlat39 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat39 = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat14.x = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb42) ? u_xlat13 : u_xlat14.x;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.x = (-u_xlat43) + _Glossiness;
					    u_xlat14.x = u_xlat14.x + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat14.xyz = (-u_xlat2.xyz) + u_xlat14.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					float u_xlat45;
					bool u_xlatb45;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat4.x);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz;
					        u_xlat9.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat9);
					        u_xlat7.y = dot(u_xlat8, u_xlat9);
					        u_xlat7.z = dot(u_xlat6, u_xlat9);
					    } else {
					        u_xlat6.xyz = vs_TEXCOORD1.xyz;
					        u_xlat6.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat6);
					        u_xlat7.y = dot(unity_SHAg, u_xlat6);
					        u_xlat7.z = dot(unity_SHAb, u_xlat6);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb4){
					        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat4.x = inversesqrt(u_xlat4.x);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat4.x = min(u_xlat8.y, u_xlat8.x);
					        u_xlat4.x = min(u_xlat8.z, u_xlat4.x);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat4.xxx + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat4.x = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat4.x = u_xlat41 * u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat4.x);
					    u_xlat44 = log2(u_xlat7.w);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat44);
					    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb45){
					        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb45){
					            u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat45 = inversesqrt(u_xlat45);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat45);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat45 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat45 = min(u_xlat10.z, u_xlat45);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat45) + u_xlat10.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat4.x);
					        u_xlat43 = log2(u_xlat4.w);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.y;
					        u_xlat43 = exp2(u_xlat43);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat43);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz + (-u_xlat4.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat43 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlat39 = max(u_xlat26, 9.99999975e-05);
					    u_xlat39 = sqrt(u_xlat39);
					    u_xlat26 = (u_xlatb42) ? u_xlat39 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat39 = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat14.x = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb42) ? u_xlat13 : u_xlat14.x;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.x = (-u_xlat43) + _Glossiness;
					    u_xlat14.x = u_xlat14.x + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat14.xyz = (-u_xlat2.xyz) + u_xlat14.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Glossiness                    c14      1
					//   _Metallic                      c15      1
					//   _Color                         c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _ShadowMapTexture              s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c17, 0, 1, 0.699999988, 1.70000005
					    def c18, 6, 0.999989986, 0.00100000005, 31.622776
					    def c19, 9.99999975e-006, -1, 1, 3.14159274
					    def c20, 1.00000001e-007, -0.5, 0.785398185, 9.99999975e-005
					    def c21, 0.00999999978, 0.280000001, 1, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s4
					    mul_pp r3.xyz, r2, c16
					    texldp_pp r4, v3, s3
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c17.x
					    mov r5.xy, c17
					    add_pp r1.w, r5.y, -c14.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mul_pp r5.yzw, r4.x, c13.xxyz
					    texld_pp r6, v4.zwzw, s0
					    mul_pp r3.w, r6.w, c12.x
					    mul_pp r6.xyz, r6, r3.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r6.xyz, r7, c12.y
					    exp_pp r7.x, r6.x
					    exp_pp r7.y, r6.y
					    exp_pp r7.z, r6.z
					    if_lt -c4.w, r5.x
					      nrm_pp r6.xyz, r4.yzww
					      add r8.xyz, c2, -v2
					      rcp r9.x, r6.x
					      rcp r9.y, r6.y
					      rcp r9.z, r6.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c3, -v2
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r6, r9, r8
					      min_pp r3.w, r8.y, r8.x
					      min_pp r4.x, r8.z, r3.w
					      add r8.xyz, -c4, v2
					      mad_pp r6.xyz, r6, r4.x, r8
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r3.w, r1.w, -c17.z, c17.w
					    mul_pp r3.w, r1.w, r3.w
					    mul_pp r6.w, r3.w, c18.x
					    texldl_pp r8, r6, s1
					    pow_pp r3.w, r8.w, c5.y
					    mul_pp r3.w, r3.w, c5.x
					    mul_pp r9.xyz, r8, r3.w
					    mov r7.w, c3.w
					    if_lt r7.w, c18.y
					      if_lt -c8.w, r5.x
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c6, -v2
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c7, -v2
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r4.x, r11.y, r11.x
					        min_pp r5.x, r11.z, r4.x
					        add r11.xyz, -c8, v2
					        mad_pp r6.xyz, r10, r5.x, r11
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r4, r6, s2
					      pow_pp r5.x, r4.w, c9.y
					      mul_pp r4.w, r5.x, c9.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r6.xyz, r3.w, r8, -r4
					      mad_pp r9.xyz, c3.w, r6, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r6, c10
					    mad_pp r2.xyz, r2, c16, -r6
					    mad_pp r2.xyz, c15.x, r2, r6
					    mad_pp r3.w, c15.x, -r6.w, r6.w
					    mul_pp r3.xyz, r3.w, r3
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r4.w, -r0.w, c18.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r4.w, c18.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r4.w, r0.w, c17.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c17.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c19.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r4.w, r4.w
					    mad r4.xy, r0.x, r0.x, c19.yzzw
					    mad_pp r0.w, r0.w, r4.x, c17.y
					    mul r1.z, r0.w, c19.w
					    mad r0.w, r1.z, r0.w, c20.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c17.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c17.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    mul_pp r1.z, r1.y, r1.y
					    dp2add_pp r1.z, r1.z, r1.w, c20.y
					    mad_pp r0.w, r1.z, r0.w, c17.y
					    mad_pp r1.z, r1.z, r1.x, c17.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c20.z
					    abs r1.z, c11.w
					    mad r0.y, r0.y, -c20.z, c20.w
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c21.x, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c21.y, c21.z
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c17.x, c17.y
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c17.x
					    add_pp r0.w, -r3.w, c17.y
					    add_sat_pp r0.w, r0.w, c14.x
					    mad_pp r4.xyz, r5.yzww, r0.z, r7
					    mul_pp r5.xyz, r5.yzww, r0.y
					    add_pp r0.y, -r1.y, c17.y
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.yzw, r0.y, c17.y, r2.xxyz
					    mul_pp r1.yzw, r1, r5.xxyz
					    mad_pp r1.yzw, r3.xxyz, r4.xxyz, r1
					    mul_pp r0.xyz, r9, r0.x
					    lrp_pp r3.xyz, r1.x, r0.w, r2
					    mad_pp oC0.xyz, r0, r3, r1.yzww
					    mov_pp oC0.w, c17.y
					
					// approximately 173 instruction slots used (7 texture, 166 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_SpecCube0_BoxMax         c3       1
					//   unity_SpecCube0_BoxMin         c4       1
					//   unity_SpecCube0_ProbePosition  c5       1
					//   unity_SpecCube0_HDR            c6       1
					//   unity_SpecCube1_BoxMax         c7       1
					//   unity_SpecCube1_BoxMin         c8       1
					//   unity_SpecCube1_ProbePosition  c9       1
					//   unity_SpecCube1_HDR            c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   unity_Lightmap_HDR             c13      1
					//   _LightColor0                   c14      1
					//   _Glossiness                    c15      1
					//   _Metallic                      c16      1
					//   _Color                         c17      1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _ShadowMapTexture              s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c18, 1, 0, 0.699999988, 1.70000005
					    def c19, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s4
					    mul_pp r2.xyz, r0, c17
					    texldp_pp r3, v4, s3
					    mov r4.xy, c18
					    add_pp r0.w, r4.x, -c15.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.yzw, v1.xxyz, -r1.w, -r1.xxyz
					    texld_pp r5, v3, s0
					    pow_pp r1.w, r5.w, c13.y
					    mul_pp r1.w, r1.w, c13.x
					    mul_pp r4.xzw, r5.xyyz, r1.w
					    add_pp r1.w, r3.x, -c2.x
					    dp3_pp r2.w, v1, c1
					    max_pp r5.w, r2.w, c18.y
					    add_pp r2.w, -r1.w, c18.x
					    cmp_pp r1.w, r1.w, r2.w, c18.x
					    mul_pp r1.w, r1.w, r5.w
					    mad_pp r6.xyz, r1.w, -c14, r4.xzww
					    mul_pp r5.xyz, r3.x, r5
					    min_pp r7.xyz, r5, r4.xzww
					    max_pp r4.xzw, r7.xyyz, r6.xyyz
					    if_lt -c5.w, r4.y
					      nrm_pp r5.xyz, r3.yzww
					      add r6.xyz, c3, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c4, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c5, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.yzww
					    endif
					    mad_pp r1.w, r0.w, -c18.z, c18.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c19.x
					    texldl_pp r6, r5, s1
					    pow_pp r1.w, r6.w, c6.y
					    mul_pp r1.w, r1.w, c6.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c4.w
					    if_lt r2.w, c19.y
					      if_lt -c9.w, r4.y
					        nrm_pp r8.xyz, r3.yzww
					        add r9.xyz, c7, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c8, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.x, r9.z, r2.w
					        add r9.xyz, -c9, v2
					        mad_pp r5.xyz, r8, r3.x, r9
					      else
					        mov_pp r5.xyz, r3.yzww
					      endif
					      texldl_pp r3, r5, s2
					      pow_pp r2.w, r3.w, c10.y
					      mul_pp r2.w, r2.w, c10.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c4.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c11
					    mad_pp r0.xyz, r0, c17, -r5
					    mad_pp r0.xyz, c16.x, r0, r5
					    mad_pp r1.w, c16.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c12.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c19.z, c19.w
					    mad_pp r1.y, r1.y, r1.y, c18.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c15.x
					    add_sat_pp r1.y, r1.y, c18.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c18.x
					    cmp_pp r0.w, r1.x, r0.w, c18.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp oC0.xyz, r2, r4.xzww, r0
					    mov_pp oC0.w, c18.x
					
					// approximately 122 instruction slots used (7 texture, 115 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_SpecCube0_BoxMax         c3       1
					//   unity_SpecCube0_BoxMin         c4       1
					//   unity_SpecCube0_ProbePosition  c5       1
					//   unity_SpecCube0_HDR            c6       1
					//   unity_SpecCube1_BoxMax         c7       1
					//   unity_SpecCube1_BoxMin         c8       1
					//   unity_SpecCube1_ProbePosition  c9       1
					//   unity_SpecCube1_HDR            c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   unity_Lightmap_HDR             c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//   _MainTex                       s5       1
					//
					
					    ps_3_0
					    def c19, 1, 0, 0.699999988, 1.70000005
					    def c20, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s5
					    mul_pp r2.xyz, r0, c18
					    texldp_pp r3, v4, s4
					    mov r4.xy, c19
					    add_pp r0.w, r4.x, -c16.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.yzw, v1.xxyz, -r1.w, -r1.xxyz
					    texld_pp r5, v3, s0
					    pow_pp r1.w, r5.w, c13.y
					    mul_pp r1.w, r1.w, c13.x
					    mul_pp r4.xzw, r5.xyyz, r1.w
					    add_pp r1.w, r3.x, -c2.x
					    dp3_pp r2.w, v1, c1
					    max_pp r5.w, r2.w, c19.y
					    add_pp r2.w, -r1.w, c19.x
					    cmp_pp r1.w, r1.w, r2.w, c19.x
					    mul_pp r1.w, r1.w, r5.w
					    mad_pp r6.xyz, r1.w, -c15, r4.xzww
					    mul_pp r5.xyz, r3.x, r5
					    min_pp r7.xyz, r5, r4.xzww
					    max_pp r4.xzw, r7.xyyz, r6.xyyz
					    texld_pp r5, v3.zwzw, s1
					    mul_pp r1.w, r5.w, c14.x
					    mul_pp r5.xyz, r5, r1.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c14.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    add_pp r4.xzw, r4, r6.xyyz
					    if_lt -c5.w, r4.y
					      nrm_pp r5.xyz, r3.yzww
					      add r6.xyz, c3, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c4, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c5, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.yzww
					    endif
					    mad_pp r1.w, r0.w, -c19.z, c19.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c20.x
					    texldl_pp r6, r5, s2
					    pow_pp r1.w, r6.w, c6.y
					    mul_pp r1.w, r1.w, c6.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c4.w
					    if_lt r2.w, c20.y
					      if_lt -c9.w, r4.y
					        nrm_pp r8.xyz, r3.yzww
					        add r9.xyz, c7, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c8, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.x, r9.z, r2.w
					        add r9.xyz, -c9, v2
					        mad_pp r5.xyz, r8, r3.x, r9
					      else
					        mov_pp r5.xyz, r3.yzww
					      endif
					      texldl_pp r3, r5, s3
					      pow_pp r2.w, r3.w, c10.y
					      mul_pp r2.w, r2.w, c10.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c4.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c11
					    mad_pp r0.xyz, r0, c18, -r5
					    mad_pp r0.xyz, c17.x, r0, r5
					    mad_pp r1.w, c17.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c12.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c20.z, c20.w
					    mad_pp r1.y, r1.y, r1.y, c19.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c16.x
					    add_sat_pp r1.y, r1.y, c19.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c19.x
					    cmp_pp r0.w, r1.x, r0.w, c19.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp oC0.xyz, r2, r4.xzww, r0
					    mov_pp oC0.w, c19.x
					
					// approximately 133 instruction slots used (8 texture, 125 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat34 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat34 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SpecCube0_BoxMax         c2       1
					//   unity_SpecCube0_BoxMin         c3       1
					//   unity_SpecCube0_ProbePosition  c4       1
					//   unity_SpecCube0_HDR            c5       1
					//   unity_SpecCube1_BoxMax         c6       1
					//   unity_SpecCube1_BoxMin         c7       1
					//   unity_SpecCube1_ProbePosition  c8       1
					//   unity_SpecCube1_HDR            c9       1
					//   unity_ColorSpaceDielectricSpec c10      1
					//   unity_ColorSpaceLuminance      c11      1
					//   unity_DynamicLightmap_HDR      c12      1
					//   _LightColor0                   c13      1
					//   _Glossiness                    c14      1
					//   _Metallic                      c15      1
					//   _Color                         c16      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//   _MainTex                       s5       1
					//
					
					    ps_3_0
					    def c17, 0, 1, -0.5, 0.5
					    def c18, 9.99999975e-005, 10000, 0.699999988, 1.70000005
					    def c19, 6, 0.999989986, 0.00100000005, 31.622776
					    def c20, 9.99999975e-006, -1, 1, 3.14159274
					    def c21, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c22, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s5
					    mul_pp r3.xyz, r2, c16
					    texldp_pp r4, v3, s4
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c17.x
					    mov r5.xy, c17
					    add_pp r1.w, r5.y, -c14.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mul_pp r5.yzw, r4.x, c13.xxyz
					    texld_pp r6, v4.zwzw, s0
					    mul_pp r3.w, r6.w, c12.x
					    mul_pp r6.xyz, r6, r3.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r6.xyz, r7, c12.y
					    exp_pp r7.x, r6.x
					    exp_pp r7.y, r6.y
					    exp_pp r7.z, r6.z
					    texld_pp r6, v4.zwzw, s1
					    add_pp r6.xyz, r6, c17.z
					    dp3_pp r3.w, v1, r6
					    add_pp r3.w, r3.w, c17.w
					    mul_pp r6.xyz, r3.w, r7
					    add r3.w, -r6.w, c18.x
					    rcp r4.x, r6.w
					    cmp r3.w, r3.w, c18.y, r4.x
					    if_lt -c4.w, r5.x
					      nrm_pp r7.xyz, r4.yzww
					      add r8.xyz, c2, -v2
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c3, -v2
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r4.x, r8.y, r8.x
					      min_pp r6.w, r8.z, r4.x
					      add r8.xyz, -c4, v2
					      mad_pp r7.xyz, r7, r6.w, r8
					    else
					      mov_pp r7.xyz, r4.yzww
					    endif
					    mad_pp r4.x, r1.w, -c18.z, c18.w
					    mul_pp r4.x, r1.w, r4.x
					    mul_pp r7.w, r4.x, c19.x
					    texldl_pp r8, r7, s2
					    pow_pp r4.x, r8.w, c5.y
					    mul_pp r4.x, r4.x, c5.x
					    mul_pp r9.xyz, r8, r4.x
					    mov r6.w, c3.w
					    if_lt r6.w, c19.y
					      if_lt -c8.w, r5.x
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c6, -v2
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c7, -v2
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r5.x, r11.y, r11.x
					        min_pp r6.w, r11.z, r5.x
					        add r11.xyz, -c8, v2
					        mad_pp r7.xyz, r10, r6.w, r11
					      else
					        mov_pp r7.xyz, r4.yzww
					      endif
					      texldl_pp r7, r7, s3
					      pow_pp r4.y, r7.w, c9.y
					      mul_pp r4.y, r4.y, c9.x
					      mul_pp r4.yzw, r7.xxyz, r4.y
					      mad r7.xyz, r4.x, r8, -r4.yzww
					      mad_pp r9.xyz, c3.w, r7, r4.yzww
					    endif
					    nrm_pp r4.xyz, v1
					    mov r7, c10
					    mad_pp r2.xyz, r2, c16, -r7
					    mad_pp r2.xyz, c15.x, r2, r7
					    mad_pp r4.w, c15.x, -r7.w, r7.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.x, -r0.w, c19.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.x, c19.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.x, r0.w, c17.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c17.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c17.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c17.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c20.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.x, r5.x
					    mad r4.xy, r0.x, r0.x, c20.yzzw
					    mad_pp r0.w, r0.w, r4.x, c17.y
					    mul r1.z, r0.w, c20.w
					    mad r0.w, r1.z, r0.w, c21.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c17.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c17.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c17.z
					    mad_pp r0.w, r1.z, r0.w, c17.y
					    mad_pp r1.z, r1.z, r1.x, c17.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c21.y
					    abs r1.z, c11.w
					    mad r0.y, r0.y, -c21.y, c21.z
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c21.w, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c22.x, c22.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c17.x, c17.y
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c17.x
					    add_pp r0.w, -r4.w, c17.y
					    add_sat_pp r0.w, r0.w, c14.x
					    mul_pp r4.xyz, r0.z, r5.yzww
					    mad_pp r4.xyz, r6, r3.w, r4
					    mul_pp r5.xyz, r5.yzww, r0.y
					    add_pp r0.y, -r1.y, c17.y
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.yzw, r0.y, c17.y, r2.xxyz
					    mul_pp r1.yzw, r1, r5.xxyz
					    mad_pp r1.yzw, r3.xxyz, r4.xxyz, r1
					    mul_pp r0.xyz, r9, r0.x
					    lrp_pp r3.xyz, r1.x, r0.w, r2
					    mad_pp oC0.xyz, r0, r3, r1.yzww
					    mov_pp oC0.w, c17.y
					
					// approximately 182 instruction slots used (8 texture, 174 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat7 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, u_xlat7.xyz);
					    u_xlat42 = u_xlat42 + 0.5;
					    u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz;
					    u_xlat42 = max(u_xlat7.w, 9.99999975e-05);
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat42);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat7 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, u_xlat7.xyz);
					    u_xlat42 = u_xlat42 + 0.5;
					    u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz;
					    u_xlat42 = max(u_xlat7.w, 9.99999975e-05);
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat42);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SHAr                     c2       1
					//   unity_SHAg                     c3       1
					//   unity_SHAb                     c4       1
					//   unity_FogColor                 c5       1
					//   unity_FogParams                c6       1
					//   unity_SpecCube0_BoxMax         c7       1
					//   unity_SpecCube0_BoxMin         c8       1
					//   unity_SpecCube0_ProbePosition  c9       1
					//   unity_SpecCube0_HDR            c10      1
					//   unity_SpecCube1_BoxMax         c11      1
					//   unity_SpecCube1_BoxMin         c12      1
					//   unity_SpecCube1_ProbePosition  c13      1
					//   unity_SpecCube1_HDR            c14      1
					//   unity_ColorSpaceDielectricSpec c15      1
					//   unity_ColorSpaceLuminance      c16      1
					//   _LightColor0                   c17      1
					//   _Glossiness                    c18      1
					//   _Metallic                      c19      1
					//   _Color                         c20      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c21, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c22, 0, 1, 0.416666657, 6
					    def c23, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c24, -1, 1, 3.14159274, 1.00000001e-007
					    def c25, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c26, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord5 v4.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s2
					    mul_pp r3.xyz, r2, c20
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c22.x
					    mov r4.xy, c22
					    add_pp r1.w, r4.y, -c18.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mad_pp r5, v1.xyzx, c22.yyyx, c22.xxxy
					    dp4_pp r6.x, c2, r5
					    dp4_pp r6.y, c3, r5
					    dp4_pp r6.z, c4, r5
					    add_pp r5.xyz, r6, v3
					    max_pp r6.xyz, r5, c22.x
					    abs r3.w, c16.w
					    log_pp r5.x, r6.x
					    log_pp r5.y, r6.y
					    log_pp r5.z, r6.z
					    mul_pp r5.xyz, r5, c22.z
					    exp_pp r7.x, r5.x
					    exp_pp r7.y, r5.y
					    exp_pp r7.z, r5.z
					    mad_pp r5.xyz, r7, c21.x, c21.y
					    max_pp r7.xyz, r5, c22.x
					    cmp_pp r5.xyz, -r3.w, r7, r6
					    if_lt -c9.w, r4.x
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c7, -v2
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c8, -v2
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r5.w, r7.y, r7.x
					      min_pp r6.w, r7.z, r5.w
					      add r7.xyz, -c9, v2
					      mad_pp r6.xyz, r6, r6.w, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r5.w, r1.w, -c21.z, c21.w
					    mul_pp r5.w, r1.w, r5.w
					    mul_pp r6.w, r5.w, c22.w
					    texldl_pp r7, r6, s0
					    pow_pp r5.w, r7.w, c10.y
					    mul_pp r5.w, r5.w, c10.x
					    mul_pp r8.xyz, r7, r5.w
					    mov r7.w, c8.w
					    if_lt r7.w, c23.x
					      if_lt -c13.w, r4.x
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c11, -v2
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c12, -v2
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r4.x, r10.y, r10.x
					        min_pp r7.w, r10.z, r4.x
					        add r10.xyz, -c13, v2
					        mad_pp r6.xyz, r9, r7.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r4, r6, s1
					      pow_pp r6.x, r4.w, c14.y
					      mul_pp r4.w, r6.x, c14.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r6.xyz, r5.w, r7, -r4
					      mad_pp r8.xyz, c8.w, r6, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r6, c15
					    mad_pp r2.xyz, r2, c20, -r6
					    mad_pp r2.xyz, c19.x, r2, r6
					    mad_pp r4.w, c19.x, -r6.w, r6.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.w, -r0.w, c23.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.w, c23.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.w, r0.w, c22.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c22.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c22.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c22.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c23.w
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.w, r5.w
					    mad r4.xy, r0.x, r0.x, c24
					    mad_pp r0.w, r0.w, r4.x, c22.y
					    mul r1.z, r0.w, c24.z
					    mad r0.w, r1.z, r0.w, c24.w
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c22.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c22.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    mul_pp r1.z, r1.y, r1.y
					    dp2add_pp r1.z, r1.z, r1.w, c25.x
					    mad_pp r0.w, r1.z, r0.w, c22.y
					    mad_pp r1.z, r1.z, r1.x, c22.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c25.y
					    mad r0.y, r0.y, -c25.y, c25.z
					    rsq r1.z, r0.z
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.y, r0.y, c25.w, r1.z
					    cmp_pp r0.y, -r3.w, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c26.x, c26.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r3.w, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c22.x, c22.y
					    mul r0.w, r0.w, r0.y
					    add_pp r1.z, -r4.w, c22.y
					    add_sat_pp r1.z, r1.z, c18.x
					    mad_pp r4.xyz, c17, r0.z, r5
					    mul_pp r5.xyz, r0.w, c17
					    cmp_pp r0.yzw, r0.y, r5.xxyz, c22.x
					    add_pp r1.y, -r1.y, c22.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    lrp_pp r5.xyz, r1.y, c22.y, r2
					    mul_pp r0.yzw, r0, r5.xxyz
					    mad_pp r0.yzw, r3.xxyz, r4.xxyz, r0
					    mul_pp r3.xyz, r8, r0.x
					    lrp_pp r4.xyz, r1.x, r1.z, r2
					    mad_pp r0.xyz, r3, r4, r0.yzww
					    mul r0.w, c6.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c5
					    mad_pp oC0.xyz, r0.w, r0, c5
					    mov_pp oC0.w, c22.y
					
					// approximately 182 instruction slots used (5 texture, 177 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
					        u_xlat40 = log2(u_xlat4.w);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
					        u_xlat40 = exp2(u_xlat40);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat40 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat40);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb39) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb39) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-u_xlat40) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat4.xyz = _LightColor0.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					bool u_xlatb13;
					float u_xlat17;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlatb39 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb39){
					        u_xlatb39 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat5.xyz : vs_TEXCOORD2.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat5.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat39 = u_xlat5.y * 0.25;
					        u_xlat40 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat17 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat39 = max(u_xlat39, u_xlat40);
					        u_xlat5.x = min(u_xlat17, u_xlat39);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					        u_xlat7.xyz = u_xlat5.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
					        u_xlat5.xyz = u_xlat5.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat8.xyz = vs_TEXCOORD1.xyz;
					        u_xlat8.w = 1.0;
					        u_xlat6.x = dot(u_xlat6, u_xlat8);
					        u_xlat6.y = dot(u_xlat7, u_xlat8);
					        u_xlat6.z = dot(u_xlat5, u_xlat8);
					    } else {
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat5.xyz = u_xlat6.xyz + vs_TEXCOORD3.xyz;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.xyz = log2(u_xlat5.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat5.xyz = (bool(u_xlatb39)) ? u_xlat6.xyz : u_xlat5.xyz;
					    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb40){
					        u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat40 = inversesqrt(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat40 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat40 = min(u_xlat7.z, u_xlat40);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat40) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat40 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat40 = u_xlat38 * u_xlat40;
					    u_xlat40 = u_xlat40 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat40);
					    u_xlat41 = log2(u_xlat6.w);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.y;
					    u_xlat41 = exp2(u_xlat41);
					    u_xlat41 = u_xlat41 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat41);
					    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb42){
					        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb42){
					            u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat42 = inversesqrt(u_xlat42);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat42);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat42 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat42 = min(u_xlat9.z, u_xlat42);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat40);
					        u_xlat40 = log2(u_xlat4.w);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.y;
					        u_xlat40 = exp2(u_xlat40);
					        u_xlat40 = u_xlat40 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40);
					        u_xlat6.xyz = vec3(u_xlat41) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat40 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat40);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlat36 = max(u_xlat24, 9.99999975e-05);
					    u_xlat36 = sqrt(u_xlat36);
					    u_xlat24 = (u_xlatb39) ? u_xlat36 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat36 = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat13.x = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb39) ? u_xlat12 : u_xlat13.x;
					    u_xlat13.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb13 = u_xlat13.x!=0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat24 * u_xlat13.x;
					    u_xlat13.x = (-u_xlat40) + _Glossiness;
					    u_xlat13.x = u_xlat13.x + 1.0;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat4.xyz = _LightColor0.xyz * vec3(u_xlat36) + u_xlat5.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c19, 0, 1, 0.699999988, 1.70000005
					    def c20, 6, 0.999989986, 0.00100000005, 31.622776
					    def c21, 9.99999975e-006, -1, 1, 3.14159274
					    def c22, 1.00000001e-007, -0.5, 0.785398185, 9.99999975e-005
					    def c23, 0.00999999978, 0.280000001, 1, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord5 v3.x
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s3
					    mul_pp r3.xyz, r2, c18
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c19.x
					    mov r4.xy, c19
					    add_pp r1.w, r4.y, -c16.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    texld_pp r5, v4.zwzw, s0
					    mul_pp r3.w, r5.w, c14.x
					    mul_pp r5.xyz, r5, r3.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c14.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    if_lt -c6.w, r4.x
					      nrm_pp r5.xyz, r4.yzww
					      add r7.xyz, c4, -v2
					      rcp r8.x, r5.x
					      rcp r8.y, r5.y
					      rcp r8.z, r5.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c5, -v2
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r5, r8, r7
					      min_pp r3.w, r7.y, r7.x
					      min_pp r5.w, r7.z, r3.w
					      add r7.xyz, -c6, v2
					      mad_pp r5.xyz, r5, r5.w, r7
					    else
					      mov_pp r5.xyz, r4.yzww
					    endif
					    mad_pp r3.w, r1.w, -c19.z, c19.w
					    mul_pp r3.w, r1.w, r3.w
					    mul_pp r5.w, r3.w, c20.x
					    texldl_pp r7, r5, s1
					    pow_pp r3.w, r7.w, c7.y
					    mul_pp r3.w, r3.w, c7.x
					    mul_pp r8.xyz, r7, r3.w
					    mov r6.w, c5.w
					    if_lt r6.w, c20.y
					      if_lt -c10.w, r4.x
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c8, -v2
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c9, -v2
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r4.x, r10.y, r10.x
					        min_pp r6.w, r10.z, r4.x
					        add r10.xyz, -c10, v2
					        mad_pp r5.xyz, r9, r6.w, r10
					      else
					        mov_pp r5.xyz, r4.yzww
					      endif
					      texldl_pp r4, r5, s2
					      pow_pp r5.x, r4.w, c11.y
					      mul_pp r4.w, r5.x, c11.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r5.xyz, r3.w, r7, -r4
					      mad_pp r8.xyz, c5.w, r5, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r5, c12
					    mad_pp r2.xyz, r2, c18, -r5
					    mad_pp r2.xyz, c17.x, r2, r5
					    mad_pp r3.w, c17.x, -r5.w, r5.w
					    mul_pp r3.xyz, r3.w, r3
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r4.w, -r0.w, c20.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r4.w, c20.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r4.w, r0.w, c19.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c19.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c21.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r4.w, r4.w
					    mad r4.xy, r0.x, r0.x, c21.yzzw
					    mad_pp r0.w, r0.w, r4.x, c19.y
					    mul r1.z, r0.w, c21.w
					    mad r0.w, r1.z, r0.w, c22.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c19.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c19.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c22.y
					    mad_pp r0.w, r1.z, r0.w, c19.y
					    mad_pp r1.z, r1.z, r1.x, c19.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c22.z
					    abs r1.z, c13.w
					    mad r0.y, r0.y, -c22.z, c22.w
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c23.x, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c23.y, c23.z
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c19.x, c19.y
					    mul r0.w, r0.w, r0.y
					    add_pp r1.z, -r3.w, c16.x
					    add_sat_pp r1.z, r1.z, c19.y
					    mad_pp r4.xyz, c15, r0.z, r6
					    mul_pp r5.xyz, r0.w, c15
					    cmp_pp r0.yzw, r0.y, r5.xxyz, c19.x
					    add_pp r1.y, -r1.y, c19.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    lrp_pp r5.xyz, r1.y, c19.y, r2
					    mul_pp r0.yzw, r0, r5.xxyz
					    mad_pp r0.yzw, r3.xxyz, r4.xxyz, r0
					    mul_pp r3.xyz, r8, r0.x
					    lrp_pp r4.xyz, r1.x, r1.z, r2
					    mad_pp r0.xyz, r3, r4, r0.yzww
					    mul r0.w, c3.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c19.y
					
					// approximately 176 instruction slots used (6 texture, 170 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_FogColor                 c1       1
					//   unity_FogParams                c2       1
					//   unity_SpecCube0_BoxMax         c3       1
					//   unity_SpecCube0_BoxMin         c4       1
					//   unity_SpecCube0_ProbePosition  c5       1
					//   unity_SpecCube0_HDR            c6       1
					//   unity_SpecCube1_BoxMax         c7       1
					//   unity_SpecCube1_BoxMin         c8       1
					//   unity_SpecCube1_ProbePosition  c9       1
					//   unity_SpecCube1_HDR            c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   unity_Lightmap_HDR             c13      1
					//   _Glossiness                    c14      1
					//   _Metallic                      c15      1
					//   _Color                         c16      1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c17, 1, 0, 0.699999988, 1.70000005
					    def c18, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord5 v4.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s3
					    mul_pp r2.xyz, r0, c16
					    mov r3.xy, c17
					    add_pp r0.w, r3.x, -c14.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xzw, v1.xyyz, -r1.w, -r1.xyyz
					    texld_pp r4, v3, s0
					    pow_pp r1.w, r4.w, c13.y
					    mul_pp r1.w, r1.w, c13.x
					    mul_pp r4.xyz, r4, r1.w
					    if_lt -c5.w, r3.y
					      nrm_pp r5.xyz, r3.xzww
					      add r6.xyz, c3, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c4, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c5, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.xzww
					    endif
					    mad_pp r1.w, r0.w, -c17.z, c17.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c18.x
					    texldl_pp r6, r5, s1
					    pow_pp r1.w, r6.w, c6.y
					    mul_pp r1.w, r1.w, c6.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c4.w
					    if_lt r2.w, c18.y
					      if_lt -c9.w, r3.y
					        nrm_pp r8.xyz, r3.xzww
					        add r9.xyz, c7, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c8, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.y, r9.z, r2.w
					        add r9.xyz, -c9, v2
					        mad_pp r5.xyz, r8, r3.y, r9
					      else
					        mov_pp r5.xyz, r3.xzww
					      endif
					      texldl_pp r3, r5, s2
					      pow_pp r2.w, r3.w, c10.y
					      mul_pp r2.w, r2.w, c10.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c4.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c11
					    mad_pp r0.xyz, r0, c16, -r5
					    mad_pp r0.xyz, c15.x, r0, r5
					    mad_pp r1.w, c15.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c12.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c18.z, c18.w
					    mad_pp r1.y, r1.y, r1.y, c17.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c17.x
					    add_sat_pp r1.y, r1.y, c14.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c17.x
					    cmp_pp r0.w, r1.x, r0.w, c17.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp r0.xyz, r2, r4, r0
					    mul r0.w, c2.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c1
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c17.x
					
					// approximately 116 instruction slots used (6 texture, 110 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   unity_FogColor                 c1       1
					//   unity_FogParams                c2       1
					//   unity_SpecCube0_BoxMax         c3       1
					//   unity_SpecCube0_BoxMin         c4       1
					//   unity_SpecCube0_ProbePosition  c5       1
					//   unity_SpecCube0_HDR            c6       1
					//   unity_SpecCube1_BoxMax         c7       1
					//   unity_SpecCube1_BoxMin         c8       1
					//   unity_SpecCube1_ProbePosition  c9       1
					//   unity_SpecCube1_HDR            c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   unity_Lightmap_HDR             c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _Glossiness                    c15      1
					//   _Metallic                      c16      1
					//   _Color                         c17      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c18, 1, 0, 0.699999988, 1.70000005
					    def c19, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord5 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s4
					    mul_pp r2.xyz, r0, c17
					    mov r3.xy, c18
					    add_pp r0.w, r3.x, -c15.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.xzw, v1.xyyz, -r1.w, -r1.xyyz
					    texld_pp r4, v3, s0
					    pow_pp r1.w, r4.w, c13.y
					    mul_pp r1.w, r1.w, c13.x
					    texld_pp r5, v3.zwzw, s1
					    mul_pp r2.w, r5.w, c14.x
					    mul_pp r5.xyz, r5, r2.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c14.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    mad_pp r4.xyz, r1.w, r4, r6
					    if_lt -c5.w, r3.y
					      nrm_pp r5.xyz, r3.xzww
					      add r6.xyz, c3, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c4, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c5, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.xzww
					    endif
					    mad_pp r1.w, r0.w, -c18.z, c18.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c19.x
					    texldl_pp r6, r5, s2
					    pow_pp r1.w, r6.w, c6.y
					    mul_pp r1.w, r1.w, c6.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c4.w
					    if_lt r2.w, c19.y
					      if_lt -c9.w, r3.y
					        nrm_pp r8.xyz, r3.xzww
					        add r9.xyz, c7, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c8, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.y, r9.z, r2.w
					        add r9.xyz, -c9, v2
					        mad_pp r5.xyz, r8, r3.y, r9
					      else
					        mov_pp r5.xyz, r3.xzww
					      endif
					      texldl_pp r3, r5, s3
					      pow_pp r2.w, r3.w, c10.y
					      mul_pp r2.w, r2.w, c10.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c4.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c11
					    mad_pp r0.xyz, r0, c17, -r5
					    mad_pp r0.xyz, c16.x, r0, r5
					    mad_pp r1.w, c16.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c12.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c19.z, c19.w
					    mad_pp r1.y, r1.y, r1.y, c18.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c18.x
					    add_sat_pp r1.y, r1.y, c15.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c18.x
					    cmp_pp r0.w, r1.x, r0.w, c18.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp r0.xyz, r2, r4, r0
					    mul r0.w, c2.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c1
					    mad_pp oC0.xyz, r0.w, r0, c1
					    mov_pp oC0.w, c18.x
					
					// approximately 126 instruction slots used (7 texture, 119 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat35 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					float u_xlat36;
					bool u_xlatb36;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat3.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat35 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat3.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb36 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb36){
					        u_xlatb36 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb36){
					            u_xlat36 = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat36 = inversesqrt(u_xlat36);
					            u_xlat7.xyz = vec3(u_xlat36) * u_xlat3.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat36 = min(u_xlat8.y, u_xlat8.x);
					            u_xlat36 = min(u_xlat8.z, u_xlat36);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat36) + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat3.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c19, 0, 1, -0.5, 0.5
					    def c20, 9.99999975e-005, 10000, 0.699999988, 1.70000005
					    def c21, 6, 0.999989986, 0.00100000005, 31.622776
					    def c22, 9.99999975e-006, -1, 1, 3.14159274
					    def c23, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c24, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord5 v3.x
					    dcl_texcoord6 v4.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s4
					    mul_pp r3.xyz, r2, c18
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c19.x
					    mov r4.xy, c19
					    add_pp r1.w, r4.y, -c16.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    texld_pp r5, v4.zwzw, s0
					    mul_pp r3.w, r5.w, c14.x
					    mul_pp r5.xyz, r5, r3.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c14.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    texld_pp r5, v4.zwzw, s1
					    add_pp r5.xyz, r5, c19.z
					    dp3_pp r3.w, v1, r5
					    add_pp r3.w, r3.w, c19.w
					    mul_pp r5.xyz, r3.w, r6
					    add r3.w, -r5.w, c20.x
					    rcp r5.w, r5.w
					    cmp r3.w, r3.w, c20.y, r5.w
					    if_lt -c6.w, r4.x
					      nrm_pp r6.xyz, r4.yzww
					      add r7.xyz, c4, -v2
					      rcp r8.x, r6.x
					      rcp r8.y, r6.y
					      rcp r8.z, r6.z
					      mul_pp r7.xyz, r7, r8
					      add r9.xyz, c5, -v2
					      mul_pp r8.xyz, r8, r9
					      cmp_pp r7.xyz, -r6, r8, r7
					      min_pp r5.w, r7.y, r7.x
					      min_pp r6.w, r7.z, r5.w
					      add r7.xyz, -c6, v2
					      mad_pp r6.xyz, r6, r6.w, r7
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r5.w, r1.w, -c20.z, c20.w
					    mul_pp r5.w, r1.w, r5.w
					    mul_pp r6.w, r5.w, c21.x
					    texldl_pp r7, r6, s2
					    pow_pp r5.w, r7.w, c7.y
					    mul_pp r5.w, r5.w, c7.x
					    mul_pp r8.xyz, r7, r5.w
					    mov r7.w, c5.w
					    if_lt r7.w, c21.y
					      if_lt -c10.w, r4.x
					        nrm_pp r9.xyz, r4.yzww
					        add r10.xyz, c8, -v2
					        rcp r11.x, r9.x
					        rcp r11.y, r9.y
					        rcp r11.z, r9.z
					        mul_pp r10.xyz, r10, r11
					        add r12.xyz, c9, -v2
					        mul_pp r11.xyz, r11, r12
					        cmp_pp r10.xyz, -r9, r11, r10
					        min_pp r4.x, r10.y, r10.x
					        min_pp r7.w, r10.z, r4.x
					        add r10.xyz, -c10, v2
					        mad_pp r6.xyz, r9, r7.w, r10
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r4, r6, s3
					      pow_pp r6.x, r4.w, c11.y
					      mul_pp r4.w, r6.x, c11.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r6.xyz, r5.w, r7, -r4
					      mad_pp r8.xyz, c5.w, r6, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r6, c12
					    mad_pp r2.xyz, r2, c18, -r6
					    mad_pp r2.xyz, c17.x, r2, r6
					    mad_pp r4.w, c17.x, -r6.w, r6.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.w, -r0.w, c21.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.w, c21.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.w, r0.w, c19.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c19.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c22.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.w, r5.w
					    mad r4.xy, r0.x, r0.x, c22.yzzw
					    mad_pp r0.w, r0.w, r4.x, c19.y
					    mul r1.z, r0.w, c22.w
					    mad r0.w, r1.z, r0.w, c23.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c19.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c19.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c19.z
					    mad_pp r0.w, r1.z, r0.w, c19.y
					    mad_pp r1.z, r1.z, r1.x, c19.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c23.y
					    abs r1.z, c13.w
					    mad r0.y, r0.y, -c23.y, c23.z
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c23.w, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c24.x, c24.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c19.x, c19.y
					    mul r0.w, r0.w, r0.y
					    add_pp r1.z, -r4.w, c16.x
					    add_sat_pp r1.z, r1.z, c19.y
					    mul_pp r4.xyz, r0.z, c15
					    mad_pp r4.xyz, r5, r3.w, r4
					    mul_pp r5.xyz, r0.w, c15
					    cmp_pp r0.yzw, r0.y, r5.xxyz, c19.x
					    add_pp r1.y, -r1.y, c19.y
					    mul_pp r1.w, r1.y, r1.y
					    mul_pp r1.w, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.w
					    lrp_pp r5.xyz, r1.y, c19.y, r2
					    mul_pp r0.yzw, r0, r5.xxyz
					    mad_pp r0.yzw, r3.xxyz, r4.xxyz, r0
					    mul_pp r3.xyz, r8, r0.x
					    lrp_pp r4.xyz, r1.x, r1.z, r2
					    mad_pp r0.xyz, r3, r4, r0.yzww
					    mul r0.w, c3.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c19.y
					
					// approximately 185 instruction slots used (7 texture, 178 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat39 = u_xlat39 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
					    u_xlat39 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat39);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bvec3 u_xlatb9;
					vec3 u_xlat10;
					bvec3 u_xlatb11;
					float u_xlat12;
					vec3 u_xlat13;
					float u_xlat24;
					float u_xlat25;
					float u_xlat36;
					bool u_xlatb36;
					float u_xlat38;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat40;
					float u_xlat41;
					bool u_xlatb41;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat38 = (-_Glossiness) + 1.0;
					    u_xlat39 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat4.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat39)) + (-u_xlat1.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat39 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat6 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat6.xyz = u_xlat6.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, u_xlat6.xyz);
					    u_xlat39 = u_xlat39 + 0.5;
					    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;
					    u_xlat39 = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat5.xyz = u_xlat5.xyz / vec3(u_xlat39);
					    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb39){
					        u_xlat39 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat39 = inversesqrt(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat39) * u_xlat4.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
					        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat7;
					            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
					            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
					            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
					            u_xlat7 = hlslcc_movcTemp;
					        }
					        u_xlat39 = min(u_xlat7.y, u_xlat7.x);
					        u_xlat39 = min(u_xlat7.z, u_xlat39);
					        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat39) + u_xlat7.xyz;
					    } else {
					        u_xlat6.xyz = u_xlat4.xyz;
					    }
					    u_xlat39 = (-u_xlat38) * 0.699999988 + 1.70000005;
					    u_xlat39 = u_xlat38 * u_xlat39;
					    u_xlat39 = u_xlat39 * 6.0;
					    u_xlat6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat39);
					    u_xlat40 = log2(u_xlat6.w);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.y;
					    u_xlat40 = exp2(u_xlat40);
					    u_xlat40 = u_xlat40 * unity_SpecCube0_HDR.x;
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat40);
					    u_xlatb41 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb41){
					        u_xlatb41 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb41){
					            u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat41 = inversesqrt(u_xlat41);
					            u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat41);
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
					            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat9;
					                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
					                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
					                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
					                u_xlat9 = hlslcc_movcTemp;
					            }
					            u_xlat41 = min(u_xlat9.y, u_xlat9.x);
					            u_xlat41 = min(u_xlat9.z, u_xlat41);
					            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat41) + u_xlat9.xyz;
					        }
					        u_xlat8 = textureLod(unity_SpecCube1, u_xlat4.xyz, u_xlat39);
					        u_xlat39 = log2(u_xlat8.w);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.y;
					        u_xlat39 = exp2(u_xlat39);
					        u_xlat39 = u_xlat39 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat8.xyz * vec3(u_xlat39);
					        u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz + (-u_xlat4.xyz);
					        u_xlat7.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat4.xyz;
					    }
					    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat4.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat39 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat39) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = max(u_xlat36, 0.00100000005);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat12 = u_xlat38 * u_xlat38;
					    u_xlat24 = (-u_xlat38) * u_xlat38 + 1.0;
					    u_xlat13.x = u_xlat1.x * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat1.w * u_xlat24 + u_xlat12;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat1.w * u_xlat13.x + u_xlat24;
					    u_xlat24 = u_xlat24 + 9.99999975e-06;
					    u_xlat24 = 2.0 / u_xlat24;
					    u_xlat13.x = u_xlat12 * u_xlat12;
					    u_xlat36 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat12) * vec2(u_xlat12) + vec2(-1.0, 1.0);
					    u_xlat36 = u_xlat36 * u_xlat4.x + 1.0;
					    u_xlat25 = u_xlat36 * 3.14159274;
					    u_xlat36 = u_xlat25 * u_xlat36 + 1.00000001e-07;
					    u_xlat36 = u_xlat13.x / u_xlat36;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat13.x = u_xlat1.y * u_xlat25;
					    u_xlat25 = u_xlat1.x * u_xlat1.x;
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat25 = u_xlat0.x * u_xlat0.x;
					    u_xlat25 = dot(vec2(u_xlat25), vec2(u_xlat38));
					    u_xlat25 = u_xlat25 + -0.5;
					    u_xlat13.x = u_xlat25 * u_xlat13.x + 1.0;
					    u_xlat25 = u_xlat25 * u_xlat1.x + 1.0;
					    u_xlat13.x = u_xlat25 * u_xlat13.x;
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat24 = u_xlat24 * 0.785398185;
					    u_xlatb36 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat25 = max(u_xlat24, 9.99999975e-05);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat24 = (u_xlatb36) ? u_xlat25 : u_xlat24;
					    u_xlat24 = u_xlat1.w * u_xlat24;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat13.x = u_xlat1.w * u_xlat13.x;
					    u_xlat12 = u_xlat12 * u_xlat38;
					    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat4.y;
					    u_xlat12 = (u_xlatb36) ? u_xlat12 : u_xlat25;
					    u_xlat36 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb36 = u_xlat36!=0.0;
					    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
					    u_xlat24 = u_xlat36 * u_xlat24;
					    u_xlat36 = (-u_xlat39) + _Glossiness;
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat13.xyz = _LightColor0.xyz * u_xlat13.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat24 = u_xlat0.x * u_xlat0.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat0.x = u_xlat0.x * u_xlat24;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat3.xyz * u_xlat13.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat12);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat36);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat13.xyz;
					    u_xlat36 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat36 = u_xlat36 * (-u_xlat36);
					    u_xlat36 = exp2(u_xlat36);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_SHAr                     c2       1
					//   unity_SHAg                     c3       1
					//   unity_SHAb                     c4       1
					//   unity_FogColor                 c5       1
					//   unity_FogParams                c6       1
					//   unity_SpecCube0_BoxMax         c7       1
					//   unity_SpecCube0_BoxMin         c8       1
					//   unity_SpecCube0_ProbePosition  c9       1
					//   unity_SpecCube0_HDR            c10      1
					//   unity_SpecCube1_BoxMax         c11      1
					//   unity_SpecCube1_BoxMin         c12      1
					//   unity_SpecCube1_ProbePosition  c13      1
					//   unity_SpecCube1_HDR            c14      1
					//   unity_ColorSpaceDielectricSpec c15      1
					//   unity_ColorSpaceLuminance      c16      1
					//   _LightColor0                   c17      1
					//   _Glossiness                    c18      1
					//   _Metallic                      c19      1
					//   _Color                         c20      1
					//   unity_SpecCube0                s0       1
					//   unity_SpecCube1                s1       1
					//   _ShadowMapTexture              s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c21, 1.05499995, -0.0549999997, 0.699999988, 1.70000005
					    def c22, 0, 1, 0.416666657, 6
					    def c23, 0.999989986, 0.00100000005, 31.622776, 9.99999975e-006
					    def c24, -1, 1, 3.14159274, 1.00000001e-007
					    def c25, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c26, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s3
					    mul_pp r3.xyz, r2, c20
					    texldp_pp r4, v4, s2
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c22.x
					    mov r5.xy, c22
					    add_pp r1.w, r5.y, -c18.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mul_pp r5.yzw, r4.x, c17.xxyz
					    mad_pp r6, v1.xyzx, c22.yyyx, c22.xxxy
					    dp4_pp r7.x, c2, r6
					    dp4_pp r7.y, c3, r6
					    dp4_pp r7.z, c4, r6
					    add_pp r6.xyz, r7, v3
					    max_pp r7.xyz, r6, c22.x
					    abs r3.w, c16.w
					    log_pp r6.x, r7.x
					    log_pp r6.y, r7.y
					    log_pp r6.z, r7.z
					    mul_pp r6.xyz, r6, c22.z
					    exp_pp r8.x, r6.x
					    exp_pp r8.y, r6.y
					    exp_pp r8.z, r6.z
					    mad_pp r6.xyz, r8, c21.x, c21.y
					    max_pp r8.xyz, r6, c22.x
					    cmp_pp r6.xyz, -r3.w, r8, r7
					    if_lt -c9.w, r5.x
					      nrm_pp r7.xyz, r4.yzww
					      add r8.xyz, c7, -v2
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c8, -v2
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r4.x, r8.y, r8.x
					      min_pp r6.w, r8.z, r4.x
					      add r8.xyz, -c9, v2
					      mad_pp r7.xyz, r7, r6.w, r8
					    else
					      mov_pp r7.xyz, r4.yzww
					    endif
					    mad_pp r4.x, r1.w, -c21.z, c21.w
					    mul_pp r4.x, r1.w, r4.x
					    mul_pp r7.w, r4.x, c22.w
					    texldl_pp r8, r7, s0
					    pow_pp r4.x, r8.w, c10.y
					    mul_pp r4.x, r4.x, c10.x
					    mul_pp r9.xyz, r8, r4.x
					    mov r6.w, c8.w
					    if_lt r6.w, c23.x
					      if_lt -c13.w, r5.x
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c11, -v2
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c12, -v2
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r5.x, r11.y, r11.x
					        min_pp r6.w, r11.z, r5.x
					        add r11.xyz, -c13, v2
					        mad_pp r7.xyz, r10, r6.w, r11
					      else
					        mov_pp r7.xyz, r4.yzww
					      endif
					      texldl_pp r7, r7, s1
					      pow_pp r4.y, r7.w, c14.y
					      mul_pp r4.y, r4.y, c14.x
					      mul_pp r4.yzw, r7.xxyz, r4.y
					      mad r7.xyz, r4.x, r8, -r4.yzww
					      mad_pp r9.xyz, c8.w, r7, r4.yzww
					    endif
					    nrm_pp r4.xyz, v1
					    mov r7, c15
					    mad_pp r2.xyz, r2, c20, -r7
					    mad_pp r2.xyz, c19.x, r2, r7
					    mad_pp r4.w, c19.x, -r7.w, r7.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.x, -r0.w, c23.y
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.x, c23.z, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.x, r0.w, c22.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c22.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c22.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c22.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c23.w
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.x, r5.x
					    mad r4.xy, r0.x, r0.x, c24
					    mad_pp r0.w, r0.w, r4.x, c22.y
					    mul r1.z, r0.w, c24.z
					    mad r0.w, r1.z, r0.w, c24.w
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c22.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c22.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    mul_pp r1.z, r1.y, r1.y
					    dp2add_pp r1.z, r1.z, r1.w, c25.x
					    mad_pp r0.w, r1.z, r0.w, c22.y
					    mad_pp r1.z, r1.z, r1.x, c22.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c25.y
					    mad r0.y, r0.y, -c25.y, c25.z
					    rsq r1.z, r0.z
					    rcp_pp r1.z, r1.z
					    cmp_pp r0.y, r0.y, c25.w, r1.z
					    cmp_pp r0.y, -r3.w, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c26.x, c26.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r3.w, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c22.x, c22.y
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c22.x
					    add_pp r0.w, -r4.w, c22.y
					    add_sat_pp r0.w, r0.w, c18.x
					    mad_pp r4.xyz, r5.yzww, r0.z, r6
					    mul_pp r5.xyz, r5.yzww, r0.y
					    add_pp r0.y, -r1.y, c22.y
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.yzw, r0.y, c22.y, r2.xxyz
					    mul_pp r1.yzw, r1, r5.xxyz
					    mad_pp r1.yzw, r3.xxyz, r4.xxyz, r1
					    mul_pp r0.xyz, r9, r0.x
					    lrp_pp r3.xyz, r1.x, r0.w, r2
					    mad_pp r0.xyz, r0, r3, r1.yzww
					    mul r0.w, c6.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c5
					    mad_pp oC0.xyz, r0.w, r0, c5
					    mov_pp oC0.w, c22.y
					
					// approximately 184 instruction slots used (6 texture, 178 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					float u_xlat45;
					bool u_xlatb45;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat4.x);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz;
					        u_xlat9.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat9);
					        u_xlat7.y = dot(u_xlat8, u_xlat9);
					        u_xlat7.z = dot(u_xlat6, u_xlat9);
					    } else {
					        u_xlat6.xyz = vs_TEXCOORD1.xyz;
					        u_xlat6.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat6);
					        u_xlat7.y = dot(unity_SHAg, u_xlat6);
					        u_xlat7.z = dot(unity_SHAb, u_xlat6);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb4){
					        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat4.x = inversesqrt(u_xlat4.x);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat4.x = min(u_xlat8.y, u_xlat8.x);
					        u_xlat4.x = min(u_xlat8.z, u_xlat4.x);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat4.xxx + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat4.x = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat4.x = u_xlat41 * u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat4.x);
					    u_xlat44 = log2(u_xlat7.w);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat44);
					    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb45){
					        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb45){
					            u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat45 = inversesqrt(u_xlat45);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat45);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat45 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat45 = min(u_xlat10.z, u_xlat45);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat45) + u_xlat10.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat4.x);
					        u_xlat43 = log2(u_xlat4.w);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.y;
					        u_xlat43 = exp2(u_xlat43);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat43);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz + (-u_xlat4.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat43 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlat39 = max(u_xlat26, 9.99999975e-05);
					    u_xlat39 = sqrt(u_xlat39);
					    u_xlat26 = (u_xlatb42) ? u_xlat39 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat39 = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat14.x = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb42) ? u_xlat13 : u_xlat14.x;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.x = (-u_xlat43) + _Glossiness;
					    u_xlat14.x = u_xlat14.x + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat14.xyz = (-u_xlat2.xyz) + u_xlat14.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					bool u_xlatb14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat43;
					float u_xlat44;
					float u_xlat45;
					bool u_xlatb45;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlatb42 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb42){
					        u_xlatb42 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat6.xyz : vs_TEXCOORD2.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat42 = u_xlat6.y * 0.25;
					        u_xlat4.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat44 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat42 = max(u_xlat42, u_xlat4.x);
					        u_xlat6.x = min(u_xlat44, u_xlat42);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat8.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat8.xyz);
					        u_xlat6.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat6.xyz);
					        u_xlat9.xyz = vs_TEXCOORD1.xyz;
					        u_xlat9.w = 1.0;
					        u_xlat7.x = dot(u_xlat7, u_xlat9);
					        u_xlat7.y = dot(u_xlat8, u_xlat9);
					        u_xlat7.z = dot(u_xlat6, u_xlat9);
					    } else {
					        u_xlat6.xyz = vs_TEXCOORD1.xyz;
					        u_xlat6.w = 1.0;
					        u_xlat7.x = dot(unity_SHAr, u_xlat6);
					        u_xlat7.y = dot(unity_SHAg, u_xlat6);
					        u_xlat7.z = dot(unity_SHAb, u_xlat6);
					    }
					    u_xlat6.xyz = u_xlat7.xyz + vs_TEXCOORD3.xyz;
					    u_xlat6.xyz = max(u_xlat6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb42 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.xyz = log2(u_xlat6.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat7.xyz = exp2(u_xlat7.xyz);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat6.xyz = (bool(u_xlatb42)) ? u_xlat7.xyz : u_xlat6.xyz;
					    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb4){
					        u_xlat4.x = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat4.x = inversesqrt(u_xlat4.x);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec4 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat4.x = min(u_xlat8.y, u_xlat8.x);
					        u_xlat4.x = min(u_xlat8.z, u_xlat4.x);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * u_xlat4.xxx + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat4.x = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat4.x = u_xlat41 * u_xlat4.x;
					    u_xlat4.x = u_xlat4.x * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat4.x);
					    u_xlat44 = log2(u_xlat7.w);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.y;
					    u_xlat44 = exp2(u_xlat44);
					    u_xlat44 = u_xlat44 * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat44);
					    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb45){
					        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb45){
					            u_xlat45 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat45 = inversesqrt(u_xlat45);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat45);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat45 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat45 = min(u_xlat10.z, u_xlat45);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat45) + u_xlat10.xyz;
					        }
					        u_xlat4 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat4.x);
					        u_xlat43 = log2(u_xlat4.w);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.y;
					        u_xlat43 = exp2(u_xlat43);
					        u_xlat43 = u_xlat43 * unity_SpecCube1_HDR.x;
					        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat43);
					        u_xlat7.xyz = vec3(u_xlat44) * u_xlat7.xyz + (-u_xlat4.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat4.xyz;
					    }
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat43 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat43);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlat39 = max(u_xlat26, 9.99999975e-05);
					    u_xlat39 = sqrt(u_xlat39);
					    u_xlat26 = (u_xlatb42) ? u_xlat39 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat39 = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat14.x = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb42) ? u_xlat13 : u_xlat14.x;
					    u_xlat14.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb14 = u_xlat14.x!=0.0;
					    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat26 * u_xlat14.x;
					    u_xlat14.x = (-u_xlat43) + _Glossiness;
					    u_xlat14.x = u_xlat14.x + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat6.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat6.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat6.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat5.xyz;
					    u_xlat0.xzw = u_xlat3.xyz * u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat3.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat14.xyz = (-u_xlat2.xyz) + u_xlat14.xxx;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat14.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _ShadowMapTexture              s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c19, 0, 1, 0.699999988, 1.70000005
					    def c20, 6, 0.999989986, 0.00100000005, 31.622776
					    def c21, 9.99999975e-006, -1, 1, 3.14159274
					    def c22, 1.00000001e-007, -0.5, 0.785398185, 9.99999975e-005
					    def c23, 0.00999999978, 0.280000001, 1, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.x
					    dcl_texcoord6 v5.zw
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s4
					    mul_pp r3.xyz, r2, c18
					    texldp_pp r4, v3, s3
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c19.x
					    mov r5.xy, c19
					    add_pp r1.w, r5.y, -c16.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mul_pp r5.yzw, r4.x, c15.xxyz
					    texld_pp r6, v5.zwzw, s0
					    mul_pp r3.w, r6.w, c14.x
					    mul_pp r6.xyz, r6, r3.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r6.xyz, r7, c14.y
					    exp_pp r7.x, r6.x
					    exp_pp r7.y, r6.y
					    exp_pp r7.z, r6.z
					    if_lt -c6.w, r5.x
					      nrm_pp r6.xyz, r4.yzww
					      add r8.xyz, c4, -v2
					      rcp r9.x, r6.x
					      rcp r9.y, r6.y
					      rcp r9.z, r6.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c5, -v2
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r6, r9, r8
					      min_pp r3.w, r8.y, r8.x
					      min_pp r4.x, r8.z, r3.w
					      add r8.xyz, -c6, v2
					      mad_pp r6.xyz, r6, r4.x, r8
					    else
					      mov_pp r6.xyz, r4.yzww
					    endif
					    mad_pp r3.w, r1.w, -c19.z, c19.w
					    mul_pp r3.w, r1.w, r3.w
					    mul_pp r6.w, r3.w, c20.x
					    texldl_pp r8, r6, s1
					    pow_pp r3.w, r8.w, c7.y
					    mul_pp r3.w, r3.w, c7.x
					    mul_pp r9.xyz, r8, r3.w
					    mov r7.w, c5.w
					    if_lt r7.w, c20.y
					      if_lt -c10.w, r5.x
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c8, -v2
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c9, -v2
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r4.x, r11.y, r11.x
					        min_pp r5.x, r11.z, r4.x
					        add r11.xyz, -c10, v2
					        mad_pp r6.xyz, r10, r5.x, r11
					      else
					        mov_pp r6.xyz, r4.yzww
					      endif
					      texldl_pp r4, r6, s2
					      pow_pp r5.x, r4.w, c11.y
					      mul_pp r4.w, r5.x, c11.x
					      mul_pp r4.xyz, r4, r4.w
					      mad r6.xyz, r3.w, r8, -r4
					      mad_pp r9.xyz, c5.w, r6, r4
					    endif
					    nrm_pp r4.xyz, v1
					    mov r6, c12
					    mad_pp r2.xyz, r2, c18, -r6
					    mad_pp r2.xyz, c17.x, r2, r6
					    mad_pp r3.w, c17.x, -r6.w, r6.w
					    mul_pp r3.xyz, r3.w, r3
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r4.w, -r0.w, c20.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r4.w, c20.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r4.w, r0.w, c19.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c19.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c21.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r4.w, r4.w
					    mad r4.xy, r0.x, r0.x, c21.yzzw
					    mad_pp r0.w, r0.w, r4.x, c19.y
					    mul r1.z, r0.w, c21.w
					    mad r0.w, r1.z, r0.w, c22.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c19.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c19.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c22.y
					    mad_pp r0.w, r1.z, r0.w, c19.y
					    mad_pp r1.z, r1.z, r1.x, c19.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c22.z
					    abs r1.z, c13.w
					    mad r0.y, r0.y, -c22.z, c22.w
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c23.x, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c23.y, c23.z
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c19.x, c19.y
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c19.x
					    add_pp r0.w, -r3.w, c16.x
					    add_sat_pp r0.w, r0.w, c19.y
					    mad_pp r4.xyz, r5.yzww, r0.z, r7
					    mul_pp r5.xyz, r5.yzww, r0.y
					    add_pp r0.y, -r1.y, c19.y
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.yzw, r0.y, c19.y, r2.xxyz
					    mul_pp r1.yzw, r1, r5.xxyz
					    mad_pp r1.yzw, r3.xxyz, r4.xxyz, r1
					    mul_pp r0.xyz, r9, r0.x
					    lrp_pp r3.xyz, r1.x, r0.w, r2
					    mad_pp r0.xyz, r0, r3, r1.yzww
					    mul r0.w, c3.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c19.y
					
					// approximately 178 instruction slots used (7 texture, 171 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_FogColor                 c3       1
					//   unity_FogParams                c4       1
					//   unity_SpecCube0_BoxMax         c5       1
					//   unity_SpecCube0_BoxMin         c6       1
					//   unity_SpecCube0_ProbePosition  c7       1
					//   unity_SpecCube0_HDR            c8       1
					//   unity_SpecCube1_BoxMax         c9       1
					//   unity_SpecCube1_BoxMin         c10      1
					//   unity_SpecCube1_ProbePosition  c11      1
					//   unity_SpecCube1_HDR            c12      1
					//   unity_ColorSpaceDielectricSpec c13      1
					//   unity_ColorSpaceLuminance      c14      1
					//   unity_Lightmap_HDR             c15      1
					//   _LightColor0                   c16      1
					//   _Glossiness                    c17      1
					//   _Metallic                      c18      1
					//   _Color                         c19      1
					//   unity_Lightmap                 s0       1
					//   unity_SpecCube0                s1       1
					//   unity_SpecCube1                s2       1
					//   _ShadowMapTexture              s3       1
					//   _MainTex                       s4       1
					//
					
					    ps_3_0
					    def c20, 1, 0, 0.699999988, 1.70000005
					    def c21, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5.x
					    dcl_2d s0
					    dcl_cube s1
					    dcl_cube s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s4
					    mul_pp r2.xyz, r0, c19
					    texldp_pp r3, v4, s3
					    mov r4.xy, c20
					    add_pp r0.w, r4.x, -c17.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.yzw, v1.xxyz, -r1.w, -r1.xxyz
					    texld_pp r5, v3, s0
					    pow_pp r1.w, r5.w, c15.y
					    mul_pp r1.w, r1.w, c15.x
					    mul_pp r4.xzw, r5.xyyz, r1.w
					    add_pp r1.w, r3.x, -c2.x
					    dp3_pp r2.w, v1, c1
					    max_pp r5.w, r2.w, c20.y
					    add_pp r2.w, -r1.w, c20.x
					    cmp_pp r1.w, r1.w, r2.w, c20.x
					    mul_pp r1.w, r1.w, r5.w
					    mad_pp r6.xyz, r1.w, -c16, r4.xzww
					    mul_pp r5.xyz, r3.x, r5
					    min_pp r7.xyz, r5, r4.xzww
					    max_pp r4.xzw, r7.xyyz, r6.xyyz
					    if_lt -c7.w, r4.y
					      nrm_pp r5.xyz, r3.yzww
					      add r6.xyz, c5, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c6, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c7, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.yzww
					    endif
					    mad_pp r1.w, r0.w, -c20.z, c20.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c21.x
					    texldl_pp r6, r5, s1
					    pow_pp r1.w, r6.w, c8.y
					    mul_pp r1.w, r1.w, c8.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c6.w
					    if_lt r2.w, c21.y
					      if_lt -c11.w, r4.y
					        nrm_pp r8.xyz, r3.yzww
					        add r9.xyz, c9, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c10, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.x, r9.z, r2.w
					        add r9.xyz, -c11, v2
					        mad_pp r5.xyz, r8, r3.x, r9
					      else
					        mov_pp r5.xyz, r3.yzww
					      endif
					      texldl_pp r3, r5, s2
					      pow_pp r2.w, r3.w, c12.y
					      mul_pp r2.w, r2.w, c12.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c6.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c13
					    mad_pp r0.xyz, r0, c19, -r5
					    mad_pp r0.xyz, c18.x, r0, r5
					    mad_pp r1.w, c18.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c14.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c21.z, c21.w
					    mad_pp r1.y, r1.y, r1.y, c20.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c20.x
					    add_sat_pp r1.y, r1.y, c17.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c20.x
					    cmp_pp r0.w, r1.x, r0.w, c20.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp r0.xyz, r2, r4.xzww, r0
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c3
					    mad_pp oC0.xyz, r0.w, r0, c3
					    mov_pp oC0.w, c20.x
					
					// approximately 127 instruction slots used (7 texture, 120 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   _LightShadowData               c2       1
					//   unity_FogColor                 c3       1
					//   unity_FogParams                c4       1
					//   unity_SpecCube0_BoxMax         c5       1
					//   unity_SpecCube0_BoxMin         c6       1
					//   unity_SpecCube0_ProbePosition  c7       1
					//   unity_SpecCube0_HDR            c8       1
					//   unity_SpecCube1_BoxMax         c9       1
					//   unity_SpecCube1_BoxMin         c10      1
					//   unity_SpecCube1_ProbePosition  c11      1
					//   unity_SpecCube1_HDR            c12      1
					//   unity_ColorSpaceDielectricSpec c13      1
					//   unity_ColorSpaceLuminance      c14      1
					//   unity_Lightmap_HDR             c15      1
					//   unity_DynamicLightmap_HDR      c16      1
					//   _LightColor0                   c17      1
					//   _Glossiness                    c18      1
					//   _Metallic                      c19      1
					//   _Color                         c20      1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//   _MainTex                       s5       1
					//
					
					    ps_3_0
					    def c21, 1, 0, 0.699999988, 1.70000005
					    def c22, 6, 0.999989986, 0.280000001, 1
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.xyz, c0, -v2
					    nrm_pp r1.xyz, r0
					    texld r0, v0, s5
					    mul_pp r2.xyz, r0, c20
					    texldp_pp r3, v4, s4
					    mov r4.xy, c21
					    add_pp r0.w, r4.x, -c18.x
					    dp3_pp r1.w, -r1, v1
					    add_pp r1.w, r1.w, r1.w
					    mad_pp r3.yzw, v1.xxyz, -r1.w, -r1.xxyz
					    texld_pp r5, v3, s0
					    pow_pp r1.w, r5.w, c15.y
					    mul_pp r1.w, r1.w, c15.x
					    mul_pp r4.xzw, r5.xyyz, r1.w
					    add_pp r1.w, r3.x, -c2.x
					    dp3_pp r2.w, v1, c1
					    max_pp r5.w, r2.w, c21.y
					    add_pp r2.w, -r1.w, c21.x
					    cmp_pp r1.w, r1.w, r2.w, c21.x
					    mul_pp r1.w, r1.w, r5.w
					    mad_pp r6.xyz, r1.w, -c17, r4.xzww
					    mul_pp r5.xyz, r3.x, r5
					    min_pp r7.xyz, r5, r4.xzww
					    max_pp r4.xzw, r7.xyyz, r6.xyyz
					    texld_pp r5, v3.zwzw, s1
					    mul_pp r1.w, r5.w, c16.x
					    mul_pp r5.xyz, r5, r1.w
					    log_pp r6.x, r5.x
					    log_pp r6.y, r5.y
					    log_pp r6.z, r5.z
					    mul_pp r5.xyz, r6, c16.y
					    exp_pp r6.x, r5.x
					    exp_pp r6.y, r5.y
					    exp_pp r6.z, r5.z
					    add_pp r4.xzw, r4, r6.xyyz
					    if_lt -c7.w, r4.y
					      nrm_pp r5.xyz, r3.yzww
					      add r6.xyz, c5, -v2
					      rcp r7.x, r5.x
					      rcp r7.y, r5.y
					      rcp r7.z, r5.z
					      mul_pp r6.xyz, r6, r7
					      add r8.xyz, c6, -v2
					      mul_pp r7.xyz, r7, r8
					      cmp_pp r6.xyz, -r5, r7, r6
					      min_pp r1.w, r6.y, r6.x
					      min_pp r2.w, r6.z, r1.w
					      add r6.xyz, -c7, v2
					      mad_pp r5.xyz, r5, r2.w, r6
					    else
					      mov_pp r5.xyz, r3.yzww
					    endif
					    mad_pp r1.w, r0.w, -c21.z, c21.w
					    mul_pp r1.w, r0.w, r1.w
					    mul_pp r5.w, r1.w, c22.x
					    texldl_pp r6, r5, s2
					    pow_pp r1.w, r6.w, c8.y
					    mul_pp r1.w, r1.w, c8.x
					    mul_pp r7.xyz, r6, r1.w
					    mov r2.w, c6.w
					    if_lt r2.w, c22.y
					      if_lt -c11.w, r4.y
					        nrm_pp r8.xyz, r3.yzww
					        add r9.xyz, c9, -v2
					        rcp r10.x, r8.x
					        rcp r10.y, r8.y
					        rcp r10.z, r8.z
					        mul_pp r9.xyz, r9, r10
					        add r11.xyz, c10, -v2
					        mul_pp r10.xyz, r10, r11
					        cmp_pp r9.xyz, -r8, r10, r9
					        min_pp r2.w, r9.y, r9.x
					        min_pp r3.x, r9.z, r2.w
					        add r9.xyz, -c11, v2
					        mad_pp r5.xyz, r8, r3.x, r9
					      else
					        mov_pp r5.xyz, r3.yzww
					      endif
					      texldl_pp r3, r5, s3
					      pow_pp r2.w, r3.w, c12.y
					      mul_pp r2.w, r2.w, c12.x
					      mul_pp r3.xyz, r3, r2.w
					      mad r5.xyz, r1.w, r6, -r3
					      mad_pp r7.xyz, c6.w, r5, r3
					    endif
					    nrm_pp r3.xyz, v1
					    mov r5, c13
					    mad_pp r0.xyz, r0, c20, -r5
					    mad_pp r0.xyz, c19.x, r0, r5
					    mad_pp r1.w, c19.x, -r5.w, r5.w
					    mul_pp r2.xyz, r1.w, r2
					    dp3_pp r1.x, r3, r1
					    mul_pp r1.y, r0.w, r0.w
					    abs r1.z, c14.w
					    mul_pp r0.w, r0.w, r1.y
					    mad_pp r0.w, r0.w, -c22.z, c22.w
					    mad_pp r1.y, r1.y, r1.y, c21.x
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, -r1.z, r0.w, r1.y
					    add_pp r1.y, -r1.w, c21.x
					    add_sat_pp r1.y, r1.y, c18.x
					    mul_pp r3.xyz, r7, r0.w
					    add_pp r0.w, -r1.x, c21.x
					    cmp_pp r0.w, r1.x, r0.w, c21.x
					    mul_pp r1.x, r0.w, r0.w
					    mul_pp r1.x, r1.x, r1.x
					    mul_pp r0.w, r0.w, r1.x
					    lrp_pp r5.xyz, r0.w, r1.y, r0
					    mul_pp r0.xyz, r3, r5
					    mad_pp r0.xyz, r2, r4.xzww, r0
					    mul r0.w, c4.x, v5.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c3
					    mad_pp oC0.xyz, r0.w, r0, c3
					    mov_pp oC0.w, c21.x
					
					// approximately 138 instruction slots used (8 texture, 130 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat34 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					bvec3 u_xlatb8;
					vec3 u_xlat9;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					vec3 u_xlat14;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat33;
					float u_xlat34;
					bool u_xlatb34;
					float u_xlat35;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat33 = (-_Glossiness) + 1.0;
					    u_xlat34 = dot((-u_xlat0.xyz), vs_TEXCOORD1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat14.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat34)) + (-u_xlat0.xyz);
					    u_xlat4 = texture(unity_Lightmap, vs_TEXCOORD3.xy);
					    u_xlat34 = log2(u_xlat4.w);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.y;
					    u_xlat34 = exp2(u_xlat34);
					    u_xlat34 = u_xlat34 * unity_Lightmap_HDR.x;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat34);
					    u_xlat34 = u_xlat3.x + (-_LightShadowData.x);
					    u_xlat34 = max(u_xlat34, 0.0);
					    u_xlat35 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat35 = max(u_xlat35, 0.0);
					    u_xlat34 = (-u_xlat34) + 1.0;
					    u_xlat34 = u_xlat34 * u_xlat35;
					    u_xlat6.xyz = (-vec3(u_xlat34)) * _LightColor0.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = min(u_xlat4.xyz, u_xlat5.xyz);
					    u_xlat4.xyz = max(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat5 = texture(unity_DynamicLightmap, vs_TEXCOORD3.zw);
					    u_xlat34 = u_xlat5.w * unity_DynamicLightmap_HDR.x;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34);
					    u_xlat5.xyz = log2(u_xlat5.xyz);
					    u_xlat5.xyz = u_xlat5.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat5.xyz = exp2(u_xlat5.xyz);
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
					    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb34){
					        u_xlat34 = dot(u_xlat14.xyz, u_xlat14.xyz);
					        u_xlat34 = inversesqrt(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat34) * u_xlat14.xyz;
					        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
					        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
					        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat6;
					            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
					            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
					            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
					            u_xlat6 = hlslcc_movcTemp;
					        }
					        u_xlat34 = min(u_xlat6.y, u_xlat6.x);
					        u_xlat34 = min(u_xlat6.z, u_xlat34);
					        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;
					    } else {
					        u_xlat5.xyz = u_xlat14.xyz;
					    }
					    u_xlat34 = (-u_xlat33) * 0.699999988 + 1.70000005;
					    u_xlat34 = u_xlat33 * u_xlat34;
					    u_xlat34 = u_xlat34 * 6.0;
					    u_xlat5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat34);
					    u_xlat35 = log2(u_xlat5.w);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.y;
					    u_xlat35 = exp2(u_xlat35);
					    u_xlat35 = u_xlat35 * unity_SpecCube0_HDR.x;
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat35);
					    u_xlatb3 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb3){
					        u_xlatb3 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb3){
					            u_xlat3.x = dot(u_xlat14.xyz, u_xlat14.xyz);
					            u_xlat3.x = inversesqrt(u_xlat3.x);
					            u_xlat7.xyz = u_xlat3.xxx * u_xlat14.xyz;
					            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat8;
					                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					                u_xlat8 = hlslcc_movcTemp;
					            }
					            u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
					            u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
					            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat14.xyz = u_xlat7.xyz * u_xlat3.xxx + u_xlat8.xyz;
					        }
					        u_xlat3 = textureLod(unity_SpecCube1, u_xlat14.xyz, u_xlat34);
					        u_xlat34 = log2(u_xlat3.w);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.y;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat34 = u_xlat34 * unity_SpecCube1_HDR.x;
					        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat34);
					        u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz + (-u_xlat3.xyz);
					        u_xlat6.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat3.xyz;
					    }
					    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat34 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat11.x = u_xlat33 * u_xlat33;
					    u_xlatb22 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat33 = u_xlat11.x * u_xlat33;
					    u_xlat33 = (-u_xlat33) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.0;
					    u_xlat11.x = float(1.0) / u_xlat11.x;
					    u_xlat11.x = (u_xlatb22) ? u_xlat33 : u_xlat11.x;
					    u_xlat22 = (-u_xlat34) + _Glossiness;
					    u_xlat22 = u_xlat22 + 1.0;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat11.xxx;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat11.xyz = (-u_xlat1.xyz) + vec3(u_xlat22);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat33 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat33 = u_xlat33 * (-u_xlat33);
					    u_xlat33 = exp2(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   samplerCUBE unity_SpecCube0;
					//   float4 unity_SpecCube0_BoxMax;
					//   float4 unity_SpecCube0_BoxMin;
					//   float4 unity_SpecCube0_HDR;
					//   float4 unity_SpecCube0_ProbePosition;
					//   samplerCUBE unity_SpecCube1;
					//   float4 unity_SpecCube1_BoxMax;
					//   float4 unity_SpecCube1_BoxMin;
					//   float4 unity_SpecCube1_HDR;
					//   float4 unity_SpecCube1_ProbePosition;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogColor                 c2       1
					//   unity_FogParams                c3       1
					//   unity_SpecCube0_BoxMax         c4       1
					//   unity_SpecCube0_BoxMin         c5       1
					//   unity_SpecCube0_ProbePosition  c6       1
					//   unity_SpecCube0_HDR            c7       1
					//   unity_SpecCube1_BoxMax         c8       1
					//   unity_SpecCube1_BoxMin         c9       1
					//   unity_SpecCube1_ProbePosition  c10      1
					//   unity_SpecCube1_HDR            c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   unity_DynamicLightmap_HDR      c14      1
					//   _LightColor0                   c15      1
					//   _Glossiness                    c16      1
					//   _Metallic                      c17      1
					//   _Color                         c18      1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   unity_SpecCube0                s2       1
					//   unity_SpecCube1                s3       1
					//   _ShadowMapTexture              s4       1
					//   _MainTex                       s5       1
					//
					
					    ps_3_0
					    def c19, 0, 1, -0.5, 0.5
					    def c20, 9.99999975e-005, 10000, 0.699999988, 1.70000005
					    def c21, 6, 0.999989986, 0.00100000005, 31.622776
					    def c22, 9.99999975e-006, -1, 1, 3.14159274
					    def c23, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    def c24, 0.280000001, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3
					    dcl_texcoord5 v4.x
					    dcl_texcoord6 v5.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_cube s2
					    dcl_cube s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    texld r2, v0, s5
					    mul_pp r3.xyz, r2, c18
					    texldp_pp r4, v3, s4
					    dp3_pp r1.w, v1, c1
					    max_pp r2.w, r1.w, c19.x
					    mov r5.xy, c19
					    add_pp r1.w, r5.y, -c16.x
					    dp3_pp r3.w, -r1, v1
					    add_pp r3.w, r3.w, r3.w
					    mad_pp r4.yzw, v1.xxyz, -r3.w, -r1.xxyz
					    mul_pp r5.yzw, r4.x, c15.xxyz
					    texld_pp r6, v5.zwzw, s0
					    mul_pp r3.w, r6.w, c14.x
					    mul_pp r6.xyz, r6, r3.w
					    log_pp r7.x, r6.x
					    log_pp r7.y, r6.y
					    log_pp r7.z, r6.z
					    mul_pp r6.xyz, r7, c14.y
					    exp_pp r7.x, r6.x
					    exp_pp r7.y, r6.y
					    exp_pp r7.z, r6.z
					    texld_pp r6, v5.zwzw, s1
					    add_pp r6.xyz, r6, c19.z
					    dp3_pp r3.w, v1, r6
					    add_pp r3.w, r3.w, c19.w
					    mul_pp r6.xyz, r3.w, r7
					    add r3.w, -r6.w, c20.x
					    rcp r4.x, r6.w
					    cmp r3.w, r3.w, c20.y, r4.x
					    if_lt -c6.w, r5.x
					      nrm_pp r7.xyz, r4.yzww
					      add r8.xyz, c4, -v2
					      rcp r9.x, r7.x
					      rcp r9.y, r7.y
					      rcp r9.z, r7.z
					      mul_pp r8.xyz, r8, r9
					      add r10.xyz, c5, -v2
					      mul_pp r9.xyz, r9, r10
					      cmp_pp r8.xyz, -r7, r9, r8
					      min_pp r4.x, r8.y, r8.x
					      min_pp r6.w, r8.z, r4.x
					      add r8.xyz, -c6, v2
					      mad_pp r7.xyz, r7, r6.w, r8
					    else
					      mov_pp r7.xyz, r4.yzww
					    endif
					    mad_pp r4.x, r1.w, -c20.z, c20.w
					    mul_pp r4.x, r1.w, r4.x
					    mul_pp r7.w, r4.x, c21.x
					    texldl_pp r8, r7, s2
					    pow_pp r4.x, r8.w, c7.y
					    mul_pp r4.x, r4.x, c7.x
					    mul_pp r9.xyz, r8, r4.x
					    mov r6.w, c5.w
					    if_lt r6.w, c21.y
					      if_lt -c10.w, r5.x
					        nrm_pp r10.xyz, r4.yzww
					        add r11.xyz, c8, -v2
					        rcp r12.x, r10.x
					        rcp r12.y, r10.y
					        rcp r12.z, r10.z
					        mul_pp r11.xyz, r11, r12
					        add r13.xyz, c9, -v2
					        mul_pp r12.xyz, r12, r13
					        cmp_pp r11.xyz, -r10, r12, r11
					        min_pp r5.x, r11.y, r11.x
					        min_pp r6.w, r11.z, r5.x
					        add r11.xyz, -c10, v2
					        mad_pp r7.xyz, r10, r6.w, r11
					      else
					        mov_pp r7.xyz, r4.yzww
					      endif
					      texldl_pp r7, r7, s3
					      pow_pp r4.y, r7.w, c11.y
					      mul_pp r4.y, r4.y, c11.x
					      mul_pp r4.yzw, r7.xxyz, r4.y
					      mad r7.xyz, r4.x, r8, -r4.yzww
					      mad_pp r9.xyz, c5.w, r7, r4.yzww
					    endif
					    nrm_pp r4.xyz, v1
					    mov r7, c12
					    mad_pp r2.xyz, r2, c18, -r7
					    mad_pp r2.xyz, c17.x, r2, r7
					    mad_pp r4.w, c17.x, -r7.w, r7.w
					    mul_pp r3.xyz, r3, r4.w
					    mad_pp r0.xyz, r0, r0.w, c1
					    dp3_pp r0.w, r0, r0
					    add r5.x, -r0.w, c21.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r5.x, c21.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r4, r0
					    max_pp r5.x, r0.w, c19.x
					    dp3_pp r0.w, r4, r1
					    max_pp r1.x, r0.w, c19.x
					    dp3_pp r0.x, c1, r0
					    max_pp r1.y, r0.x, c19.x
					    mul_pp r0.x, r1.w, r1.w
					    mad_pp r0.y, r1.w, -r1.w, c19.y
					    mad_pp r0.z, r1.x, r0.y, r0.x
					    mad_pp r0.y, r2.w, r0.y, r0.x
					    mul_pp r0.y, r0.y, r1.x
					    mad r0.y, r2.w, r0.z, r0.y
					    add r0.y, r0.y, c22.x
					    rcp r0.y, r0.y
					    add_pp r0.y, r0.y, r0.y
					    mul_pp r0.z, r0.x, r0.x
					    mul r0.w, r5.x, r5.x
					    mad r4.xy, r0.x, r0.x, c22.yzzw
					    mad_pp r0.w, r0.w, r4.x, c19.y
					    mul r1.z, r0.w, c22.w
					    mad r0.w, r1.z, r0.w, c23.x
					    rcp r0.w, r0.w
					    mul_pp r0.z, r0.w, r0.z
					    add_pp r0.w, -r2.w, c19.y
					    mul_pp r1.z, r0.w, r0.w
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r0.xw, r0, r1.wyzz
					    add_pp r1.x, -r1.x, c19.y
					    mul_pp r1.z, r1.x, r1.x
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.x, r1.x, r1.z
					    add_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.y, r1.z
					    mad_pp r1.z, r1.z, r1.w, c19.z
					    mad_pp r0.w, r1.z, r0.w, c19.y
					    mad_pp r1.z, r1.z, r1.x, c19.y
					    mul_pp r0.w, r0.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mul_pp r0.z, r0.y, c23.y
					    abs r1.z, c13.w
					    mad r0.y, r0.y, -c23.y, c23.z
					    rsq r4.x, r0.z
					    rcp_pp r4.x, r4.x
					    cmp_pp r0.y, r0.y, c23.w, r4.x
					    cmp_pp r0.y, -r1.z, r0.y, r0.z
					    mul_pp r0.yz, r2.w, r0.xyww
					    mad_pp r0.x, r0.x, -c24.x, c24.y
					    rcp_pp r0.w, r4.y
					    cmp_pp r0.x, -r1.z, r0.x, r0.w
					    dp3_pp r0.w, r2, r2
					    cmp r0.w, -r0.w, c19.x, c19.y
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c19.x
					    add_pp r0.w, -r4.w, c19.y
					    add_sat_pp r0.w, r0.w, c16.x
					    mul_pp r4.xyz, r0.z, r5.yzww
					    mad_pp r4.xyz, r6, r3.w, r4
					    mul_pp r5.xyz, r5.yzww, r0.y
					    add_pp r0.y, -r1.y, c19.y
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r1.yzw, r0.y, c19.y, r2.xxyz
					    mul_pp r1.yzw, r1, r5.xxyz
					    mad_pp r1.yzw, r3.xxyz, r4.xxyz, r1
					    mul_pp r0.xyz, r9, r0.x
					    lrp_pp r3.xyz, r1.x, r0.w, r2
					    mad_pp r0.xyz, r0, r3, r1.yzww
					    mul r0.w, c3.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    add r0.xyz, r0, -c2
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c19.y
					
					// approximately 187 instruction slots used (8 texture, 179 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat7 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, u_xlat7.xyz);
					    u_xlat42 = u_xlat42 + 0.5;
					    u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz;
					    u_xlat42 = max(u_xlat7.w, 9.99999975e-05);
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat42);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3;
						vec4 unity_DynamicLightmap_HDR;
						vec4 _LightColor0;
						vec4 unused_0_6;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityReflectionProbes {
						vec4 unity_SpecCube0_BoxMax;
						vec4 unity_SpecCube0_BoxMin;
						vec4 unity_SpecCube0_ProbePosition;
						vec4 unity_SpecCube0_HDR;
						vec4 unity_SpecCube1_BoxMax;
						vec4 unity_SpecCube1_BoxMin;
						vec4 unity_SpecCube1_ProbePosition;
						vec4 unity_SpecCube1_HDR;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					uniform  samplerCube unity_SpecCube0;
					uniform  samplerCube unity_SpecCube1;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec3 u_xlatb10;
					vec3 u_xlat11;
					bvec3 u_xlatb12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat17;
					float u_xlat26;
					float u_xlat27;
					float u_xlat39;
					bool u_xlatb39;
					float u_xlat41;
					float u_xlat42;
					bool u_xlatb42;
					float u_xlat44;
					bool u_xlatb44;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat4.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xy);
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat41 = (-_Glossiness) + 1.0;
					    u_xlat42 = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat17.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat42)) + (-u_xlat1.xyz);
					    u_xlat5.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat6 = texture(unity_DynamicLightmap, vs_TEXCOORD6.zw);
					    u_xlat42 = u_xlat6.w * unity_DynamicLightmap_HDR.x;
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42);
					    u_xlat6.xyz = log2(u_xlat6.xyz);
					    u_xlat6.xyz = u_xlat6.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat6.xyz = exp2(u_xlat6.xyz);
					    u_xlat7 = texture(unity_DynamicDirectionality, vs_TEXCOORD6.zw);
					    u_xlat7.xyz = u_xlat7.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, u_xlat7.xyz);
					    u_xlat42 = u_xlat42 + 0.5;
					    u_xlat6.xyz = vec3(u_xlat42) * u_xlat6.xyz;
					    u_xlat42 = max(u_xlat7.w, 9.99999975e-05);
					    u_xlat6.xyz = u_xlat6.xyz / vec3(u_xlat42);
					    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
					    if(u_xlatb42){
					        u_xlat42 = dot(u_xlat17.xyz, u_xlat17.xyz);
					        u_xlat42 = inversesqrt(u_xlat42);
					        u_xlat7.xyz = vec3(u_xlat42) * u_xlat17.xyz;
					        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;
					        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
					        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;
					        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
					        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
					        {
					            vec3 hlslcc_movcTemp = u_xlat8;
					            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
					            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
					            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
					            u_xlat8 = hlslcc_movcTemp;
					        }
					        u_xlat42 = min(u_xlat8.y, u_xlat8.x);
					        u_xlat42 = min(u_xlat8.z, u_xlat42);
					        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);
					        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;
					    } else {
					        u_xlat7.xyz = u_xlat17.xyz;
					    }
					    u_xlat42 = (-u_xlat41) * 0.699999988 + 1.70000005;
					    u_xlat42 = u_xlat41 * u_xlat42;
					    u_xlat42 = u_xlat42 * 6.0;
					    u_xlat7 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat42);
					    u_xlat4.x = log2(u_xlat7.w);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.y;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * unity_SpecCube0_HDR.x;
					    u_xlat8.xyz = u_xlat7.xyz * u_xlat4.xxx;
					    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;
					    if(u_xlatb44){
					        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;
					        if(u_xlatb44){
					            u_xlat44 = dot(u_xlat17.xyz, u_xlat17.xyz);
					            u_xlat44 = inversesqrt(u_xlat44);
					            u_xlat9.xyz = u_xlat17.xyz * vec3(u_xlat44);
					            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;
					            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
					            u_xlat11.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;
					            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
					            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
					            {
					                vec3 hlslcc_movcTemp = u_xlat10;
					                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
					                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
					                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
					                u_xlat10 = hlslcc_movcTemp;
					            }
					            u_xlat44 = min(u_xlat10.y, u_xlat10.x);
					            u_xlat44 = min(u_xlat10.z, u_xlat44);
					            u_xlat10.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);
					            u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat44) + u_xlat10.xyz;
					        }
					        u_xlat9 = textureLod(unity_SpecCube1, u_xlat17.xyz, u_xlat42);
					        u_xlat42 = log2(u_xlat9.w);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.y;
					        u_xlat42 = exp2(u_xlat42);
					        u_xlat42 = u_xlat42 * unity_SpecCube1_HDR.x;
					        u_xlat17.xyz = u_xlat9.xyz * vec3(u_xlat42);
					        u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + (-u_xlat17.xyz);
					        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat17.xyz;
					    }
					    u_xlat42 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat4.xyz = vec3(u_xlat42) * vs_TEXCOORD1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat2.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat3.xyz = vec3(u_xlat42) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat39 = max(u_xlat39, 0.00100000005);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat41 * u_xlat41;
					    u_xlat26 = (-u_xlat41) * u_xlat41 + 1.0;
					    u_xlat14.x = u_xlat1.x * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat1.w * u_xlat26 + u_xlat13;
					    u_xlat26 = u_xlat26 * u_xlat1.x;
					    u_xlat26 = u_xlat1.w * u_xlat14.x + u_xlat26;
					    u_xlat26 = u_xlat26 + 9.99999975e-06;
					    u_xlat26 = 2.0 / u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13;
					    u_xlat39 = u_xlat0.w * u_xlat0.w;
					    u_xlat4.xy = vec2(u_xlat13) * vec2(u_xlat13) + vec2(-1.0, 1.0);
					    u_xlat39 = u_xlat39 * u_xlat4.x + 1.0;
					    u_xlat27 = u_xlat39 * 3.14159274;
					    u_xlat39 = u_xlat27 * u_xlat39 + 1.00000001e-07;
					    u_xlat39 = u_xlat14.x / u_xlat39;
					    u_xlat1.xy = (-u_xlat1.xw) + vec2(1.0, 1.0);
					    u_xlat27 = u_xlat1.y * u_xlat1.y;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat14.x = u_xlat1.y * u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat1.x = u_xlat1.x * u_xlat27;
					    u_xlat27 = u_xlat0.x * u_xlat0.x;
					    u_xlat27 = dot(vec2(u_xlat27), vec2(u_xlat41));
					    u_xlat27 = u_xlat27 + -0.5;
					    u_xlat14.x = u_xlat27 * u_xlat14.x + 1.0;
					    u_xlat27 = u_xlat27 * u_xlat1.x + 1.0;
					    u_xlat14.x = u_xlat27 * u_xlat14.x;
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat26 = u_xlat26 * 0.785398185;
					    u_xlatb39 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat27 = max(u_xlat26, 9.99999975e-05);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat26 = (u_xlatb39) ? u_xlat27 : u_xlat26;
					    u_xlat26 = u_xlat1.w * u_xlat26;
					    u_xlat26 = max(u_xlat26, 0.0);
					    u_xlat14.x = u_xlat1.w * u_xlat14.x;
					    u_xlat13 = u_xlat13 * u_xlat41;
					    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
					    u_xlat27 = float(1.0) / u_xlat4.y;
					    u_xlat13 = (u_xlatb39) ? u_xlat13 : u_xlat27;
					    u_xlat39 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb39 = u_xlat39!=0.0;
					    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
					    u_xlat26 = u_xlat39 * u_xlat26;
					    u_xlat39 = (-u_xlat42) + _Glossiness;
					    u_xlat39 = u_xlat39 + 1.0;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat14.xyz = u_xlat5.xyz * u_xlat14.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat26);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat26 = u_xlat0.x * u_xlat0.x;
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat0.x = u_xlat0.x * u_xlat26;
					    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat14.xyz = u_xlat3.xyz * u_xlat14.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat13);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(u_xlat39);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat14.xyz;
					    u_xlat39 = vs_TEXCOORD5 * unity_FogParams.x;
					    u_xlat39 = u_xlat39 * (-u_xlat39);
					    u_xlat39 = exp2(u_xlat39);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  ZWrite Off
  Cull Off
  Blend One One
  GpuProgramID 69355
Program "vp" {
SubProgram "d3d9 " {
Keywords { "POINT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_WorldToShadow c0       4
					//   glstate_matrix_mvp  c4       4
					//   unity_ObjectToWorld c8       4
					//   unity_WorldToObject c12      3
					//   _MainTex_ST         c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.z, c6, r0
					    dp4 o0.w, c7, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mul r0.xyz, c13, v1.y
					    mad r0.xyz, c12, v1.x, r0
					    mad r0.xyz, c14, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.w, c11, v0
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    dp4 o4.x, c0, r0
					    dp4 o4.y, c1, r0
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    mov o3.xyz, r0
					
					// approximately 21 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    gl_Position = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   _MainTex_ST         c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c13.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c13.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 21 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   _MainTex_ST         c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c13.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c13.z
					    mov o0, r1
					    mov o4.zw, r1
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 21 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati1 = unity_StereoEyeIndex;
					    u_xlat4.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat4.xy;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, r0, -c10
					    mov o3.xyz, r0
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, r0, -c10
					    mov o3.xyz, r0
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_WorldToShadow c0       4
					//   glstate_matrix_mvp  c4       4
					//   unity_ObjectToWorld c8       4
					//   unity_WorldToObject c12      3
					//   _MainTex_ST         c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.z, c6, r0
					    dp4 o0.w, c7, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mul r0.xyz, c13, v1.y
					    mad r0.xyz, c12, v1.x, r0
					    mad r0.xyz, c14, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.w, c11, v0
					    dp4 r0.x, c8, v0
					    dp4 r0.y, c9, v0
					    dp4 r0.z, c10, v0
					    dp4 o4.x, c0, r0
					    dp4 o4.y, c1, r0
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    mov o3.xyz, r0
					
					// approximately 21 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[18];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[18];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    gl_Position = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, r0, -c10
					    mov o3.xyz, r0
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, r0, -c10
					    mov o3.xyz, r0
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.x
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.x
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.x
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.x
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _MainTex_ST         c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.x
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c10, c10.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mov o0.z, r0.x
					    mov o4.x, r0.x
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_WorldToShadow c0       4
					//   glstate_matrix_mvp  c4       4
					//   unity_ObjectToWorld c8       4
					//   unity_WorldToObject c12      3
					//   _MainTex_ST         c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.x
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.w, c7, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mul r0.yzw, c13.xxyz, v1.y
					    mad r0.yzw, c12.xxyz, v1.x, r0
					    mad r0.yzw, c14.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    dp4 r1.w, c11, v0
					    dp4 r1.x, c8, v0
					    dp4 r1.y, c9, v0
					    dp4 r1.z, c10, v0
					    dp4 o4.x, c0, r1
					    dp4 o4.y, c1, r1
					    dp4 o4.z, c2, r1
					    dp4 o4.w, c3, r1
					    mov o3.xyz, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   _MainTex_ST         c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.x
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c13.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c13.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   _ScreenParams       c11      1
					//   _MainTex_ST         c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.x
					    mad o1.xy, v2, c12, c12.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c13.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c13.z
					    mov o0, r1
					    mov o4.zw, r1
					    mov o5.x, r1.z
					    mad o4.xy, r2.z, c11.zwzw, r2.xwzw
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat3 * 0.5;
					    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[38];
						vec4 unity_StereoScaleOffset;
						vec4 unused_3_4;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
					    u_xlati6 = unity_StereoEyeIndex;
					    u_xlat1.xy = u_xlat0.ww * unity_StereoScaleOffset.zw;
					    vs_TEXCOORD3.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    dp4 r1.x, c4, v0
					    dp4 r1.y, c5, v0
					    dp4 r1.z, c6, v0
					    add o4.xyz, r1, -c10
					    mov o3.xyz, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    dp4 r1.x, c4, v0
					    dp4 r1.y, c5, v0
					    dp4 r1.z, c6, v0
					    add o4.xyz, r1, -c10
					    mov o3.xyz, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_WorldToShadow c0       4
					//   glstate_matrix_mvp  c4       4
					//   unity_ObjectToWorld c8       4
					//   unity_WorldToObject c12      3
					//   _MainTex_ST         c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.x
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 o0.x, c4, r0
					    dp4 o0.y, c5, r0
					    dp4 o0.w, c7, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mul r0.yzw, c13.xxyz, v1.y
					    mad r0.yzw, c12.xxyz, v1.x, r0
					    mad r0.yzw, c14.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    dp4 r1.w, c11, v0
					    dp4 r1.x, c8, v0
					    dp4 r1.y, c9, v0
					    dp4 r1.z, c10, v0
					    dp4 o4.x, c0, r1
					    dp4 o4.y, c1, r1
					    dp4 o4.z, c2, r1
					    dp4 o4.w, c3, r1
					    mov o3.xyz, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[18];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[18];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					vec4 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati2 = unity_StereoEyeIndex << 2;
					    u_xlat3 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati2 + 1)];
					    u_xlat3 = unity_StereoMatrixVP[u_xlati2] * u_xlat1.xxxx + u_xlat3;
					    u_xlat3 = unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat1.zzzz + u_xlat3;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati2 + 3)] * u_xlat1.wwww + u_xlat3;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1];
					    u_xlat1 = unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    dp4 r1.x, c4, v0
					    dp4 r1.y, c5, v0
					    dp4 r1.z, c6, v0
					    add o4.xyz, r1, -c10
					    mov o3.xyz, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _LightPositionRange c10      1
					//   _MainTex_ST         c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.x
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    mul r0.yzw, c8.xxyz, v1.y
					    mad r0.yzw, c7.xxyz, v1.x, r0
					    mad r0.yzw, c9.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    dp4 r1.x, c4, v0
					    dp4 r1.y, c5, v0
					    dp4 r1.z, c6, v0
					    add o4.xyz, r1, -c10
					    mov o3.xyz, r1
					    mov o0.z, r0.x
					    mov o5.x, r0.x
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[14];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD4;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "POINT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_ColorSpaceLuminance      c6       1
					//   _LightColor0                   c7       1
					//   _Glossiness                    c8       1
					//   _Metallic                      c9       1
					//   _Color                         c10      1
					//   _LightTexture0                 s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0.00100000005, 31.622776
					    def c12, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c13, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c3, -v2
					    nrm_pp r1.xyz, r0
					    add r0.xyz, c4, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r2.xyz, r0, r0.w, r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c11.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c11.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v1
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.w, r0, r2
					    dp3_pp r0.x, v1, r0
					    max_pp r2.x, r0.x, c11.y
					    max_pp r0.x, r1.w, c11.y
					    dp3_pp r0.y, r3, r1
					    max_pp r1.x, r0.y, c11.y
					    max_pp r1.y, r0.w, c11.y
					    mul r0.y, r1.y, r1.y
					    mov r3.x, c11.x
					    add_pp r0.z, r3.x, -c8.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c11.x
					    mad_pp r0.y, r0.y, r1.y, c11.x
					    mul r1.y, r0.y, c12.y
					    mad r0.y, r1.y, r0.y, c12.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c11.x
					    mad_pp r1.z, r1.x, r1.y, r0.w
					    mad_pp r0.w, r2.x, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c11.x
					    mad r0.w, r2.x, r1.z, r0.w
					    add r0.w, r0.w, c12.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c13.x, c13.y
					    mul_pp r0.y, r0.y, c13.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c13.z, r1.y
					    abs r1.y, c6.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r2.x, r0.y
					    texld r3, v0, s1
					    mov r4, c5
					    mad_pp r1.yzw, r3.xxyz, c10.xxyz, -r4.xxyz
					    mul_pp r2.yzw, r3.xxyz, c10.xxyz
					    mad_pp r1.yzw, c9.x, r1, r4.xxyz
					    dp3_pp r0.w, r1.yzww, r1.yzww
					    cmp r0.w, -r0.w, c11.y, c11.x
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c11.y
					    mad r3, v2.xyzx, c11.xxxy, c11.yyyx
					    dp4 r4.x, c0, r3
					    dp4 r4.y, c1, r3
					    dp4 r4.z, c2, r3
					    dp3 r0.w, r4, r4
					    texld_pp r3, r0.w, s0
					    mul_pp r3.xyz, r3.x, c7
					    mul_pp r4.xyz, r0.y, r3
					    add_pp r0.y, -r0.x, c11.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c12.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r5.xyz, r0.y, c11.x, r1.yzww
					    mul_pp r0.yzw, r4.xxyz, r5.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c11.x
					    add_pp r1.y, -r2.x, c11.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.x, r0.x, r1.y, c11.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r1.xyz, r0.x, r3
					    mad_pp r0.x, c9.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.x, r2.yzww
					    mad_pp oC0.xyz, r2, r1, r0.yzww
					    mov_pp oC0.w, c11.x
					
					// approximately 96 instruction slots used (2 texture, 94 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat21));
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat21));
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Glossiness                    c5       1
					//   _Metallic                      c6       1
					//   _Color                         c7       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c8, 0, 1, 0.00100000005, 31.622776
					    def c9, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c10, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c8.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c1, r1
					    max_pp r2.w, r1.x, c8.x
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c8.x
					    max_pp r1.y, r0.w, c8.x
					    mul r0.x, r1.y, r1.y
					    mov r0.y, c8.y
					    add_pp r0.y, r0.y, -c5.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c8.y
					    mad_pp r0.x, r0.x, r0.w, c8.y
					    mul r0.w, r0.x, c9.y
					    mad r0.x, r0.w, r0.x, c9.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c8.y
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c1
					    max_pp r2.x, r1.z, c8.x
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c8.y
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c9.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c10.x, c10.y
					    mul_pp r0.x, r0.x, c10.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c10.z, r1.x
					    abs r1.x, c3.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s0
					    mov r3, c2
					    mad_pp r4.xyz, r1, c7, -r3
					    mul_pp r1.xyz, r1, c7
					    mad_pp r3.xyz, c6.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c8.x, c8.y
					    mul r0.z, r0.z, r0.x
					    mul_pp r4.xyz, r0.z, c4
					    cmp_pp r4.xyz, r0.x, r4, c8.x
					    add_pp r0.x, -r2.w, c8.y
					    mul_pp r0.z, r2.w, r2.w
					    dp2add_pp r0.y, r0.z, r0.y, c9.w
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r2.yzw, r0.x, c8.y, r3.xxyz
					    mul_pp r2.yzw, r2, r4.xxyz
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    mad_pp r0.x, r0.y, r0.x, c8.y
					    add_pp r0.z, -r2.x, c8.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c8.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, c4
					    mad_pp r0.w, c6.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp oC0.xyz, r1, r0, r2.yzww
					    mov_pp oC0.w, c8.y
					
					// approximately 85 instruction slots used (1 texture, 84 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7 = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7 * u_xlat6.x + 1.00000001e-07;
					    u_xlat7 = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7 / u_xlat6.x;
					    u_xlat7 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7 + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7 + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat4.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x + u_xlat1.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7 = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7 * u_xlat6.x + 1.00000001e-07;
					    u_xlat7 = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7 / u_xlat6.x;
					    u_xlat7 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7 + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7 + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat4.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x + u_xlat1.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       4
					//   _WorldSpaceCameraPos           c4       1
					//   _WorldSpaceLightPos0           c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   unity_ColorSpaceLuminance      c7       1
					//   _LightColor0                   c8       1
					//   _Glossiness                    c9       1
					//   _Metallic                      c10      1
					//   _Color                         c11      1
					//   _LightTexture0                 s0       1
					//   _LightTextureB0                s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c12, 1, 0, 0.5, 0.00100000005
					    def c13, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c14, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0, v2.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mad r0.xy, r2, r1.x, c12.z
					    dp3 r0.z, r2, r2
					    texld_pp r1, r0.z, s1
					    texld_pp r0, r0, s0
					    mul r0.x, r1.x, r0.w
					    mul_pp r0.xyz, r0.x, c8
					    cmp_pp r0.xyz, -r2.z, c12.y, r0
					    add r1.xyz, c4, -v2
					    nrm_pp r2.xyz, r1
					    add r1.xyz, c5, -v2
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1, r0.w, r2
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r1.w, -r0.w, c12.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c13.x, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r1.w, r1, r3
					    dp3_pp r1.x, v1, r1
					    max_pp r2.w, r1.x, c12.y
					    max_pp r3.x, r1.w, c12.y
					    dp3_pp r1.x, r4, r2
					    max_pp r2.x, r1.x, c12.y
					    max_pp r1.x, r0.w, c12.y
					    mul r0.w, r1.x, r1.x
					    mov r1.x, c12.x
					    add_pp r1.x, r1.x, -c9.x
					    mul_pp r1.y, r1.x, r1.x
					    mad r1.z, r1.y, r1.y, -c12.x
					    mad_pp r0.w, r0.w, r1.z, c12.x
					    mul r1.z, r0.w, c13.z
					    mad r0.w, r1.z, r0.w, c13.w
					    rcp r0.w, r0.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.z
					    mad_pp r1.z, r1.x, -r1.x, c12.x
					    mad_pp r1.w, r2.x, r1.z, r1.y
					    mad_pp r1.y, r2.w, r1.z, r1.y
					    mul_pp r1.y, r1.y, r2.x
					    add_pp r1.z, -r2.x, c12.x
					    mad r1.y, r2.w, r1.w, r1.y
					    add r1.y, r1.y, c13.y
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.w, r0.w, r1.y
					    mad r1.y, r0.w, -c14.x, c14.y
					    mul_pp r0.w, r0.w, c14.x
					    rsq r1.w, r0.w
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.y, r1.y, c14.z, r1.w
					    abs r1.w, c7.w
					    cmp_pp r0.w, -r1.w, r1.y, r0.w
					    mul_pp r0.w, r2.w, r0.w
					    texld r4, v0, s2
					    mov r5, c6
					    mad_pp r2.xyz, r4, c11, -r5
					    mul_pp r3.yzw, r4.xxyz, c11.xxyz
					    mad_pp r2.xyz, c10.x, r2, r5
					    dp3_pp r1.y, r2, r2
					    cmp r1.y, -r1.y, c12.y, c12.x
					    mul_pp r1.y, r0.w, r1.y
					    cmp_pp r0.w, r0.w, r1.y, c12.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r3.x, c12.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c12.x, r2
					    mul_pp r2.xyz, r4, r5
					    mul_pp r0.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.z, r0.w
					    add_pp r1.y, r3.x, r3.x
					    mul_pp r1.y, r3.x, r1.y
					    mad_pp r1.x, r1.y, r1.x, -c12.z
					    mad_pp r0.w, r1.x, r0.w, c12.x
					    add_pp r1.y, -r2.w, c12.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c12.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c10.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r3.yzww
					    mad_pp oC0.xyz, r1, r0, r2
					    mov_pp oC0.w, c12.x
					
					// approximately 102 instruction slots used (3 texture, 99 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_ColorSpaceLuminance      c6       1
					//   _LightColor0                   c7       1
					//   _Glossiness                    c8       1
					//   _Metallic                      c9       1
					//   _Color                         c10      1
					//   _LightTexture0                 s0       1
					//   _LightTextureB0                s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0.00100000005, 31.622776
					    def c12, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c13, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c3, -v2
					    nrm_pp r1.xyz, r0
					    add r0.xyz, c4, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r2.xyz, r0, r0.w, r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c11.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c11.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v1
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.w, r0, r2
					    dp3_pp r0.x, v1, r0
					    max_pp r2.x, r0.x, c11.y
					    max_pp r0.x, r1.w, c11.y
					    dp3_pp r0.y, r3, r1
					    max_pp r1.x, r0.y, c11.y
					    max_pp r1.y, r0.w, c11.y
					    mul r0.y, r1.y, r1.y
					    mov r3.x, c11.x
					    add_pp r0.z, r3.x, -c8.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c11.x
					    mad_pp r0.y, r0.y, r1.y, c11.x
					    mul r1.y, r0.y, c12.y
					    mad r0.y, r1.y, r0.y, c12.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c11.x
					    mad_pp r1.z, r1.x, r1.y, r0.w
					    mad_pp r0.w, r2.x, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c11.x
					    mad r0.w, r2.x, r1.z, r0.w
					    add r0.w, r0.w, c12.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c13.x, c13.y
					    mul_pp r0.y, r0.y, c13.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c13.z, r1.y
					    abs r1.y, c6.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r2.x, r0.y
					    texld r3, v0, s2
					    mov r4, c5
					    mad_pp r1.yzw, r3.xxyz, c10.xxyz, -r4.xxyz
					    mul_pp r2.yzw, r3.xxyz, c10.xxyz
					    mad_pp r1.yzw, c9.x, r1, r4.xxyz
					    dp3_pp r0.w, r1.yzww, r1.yzww
					    cmp r0.w, -r0.w, c11.y, c11.x
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c11.y
					    mad r3, v2.xyzx, c11.xxxy, c11.yyyx
					    dp4 r4.x, c0, r3
					    dp4 r4.y, c1, r3
					    dp4 r4.z, c2, r3
					    dp3 r0.w, r4, r4
					    texld r3, r4, s0
					    texld r5, r0.w, s1
					    mul_pp r0.w, r3.w, r5.x
					    mul_pp r3.xyz, r0.w, c7
					    mul_pp r4.xyz, r0.y, r3
					    add_pp r0.y, -r0.x, c11.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c12.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r5.xyz, r0.y, c11.x, r1.yzww
					    mul_pp r0.yzw, r4.xxyz, r5.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c11.x
					    add_pp r1.y, -r2.x, c11.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.x, r0.x, r1.y, c11.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r1.xyz, r0.x, r3
					    mad_pp r0.x, c9.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.x, r2.yzww
					    mad_pp oC0.xyz, r2, r1, r0.yzww
					    mov_pp oC0.w, c11.x
					
					// approximately 98 instruction slots used (3 texture, 95 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       2
					//   _WorldSpaceCameraPos           c2       1
					//   _WorldSpaceLightPos0           c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   unity_ColorSpaceLuminance      c5       1
					//   _LightColor0                   c6       1
					//   _Glossiness                    c7       1
					//   _Metallic                      c8       1
					//   _Color                         c9       1
					//   _LightTexture0                 s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 0.00100000005, 31.622776
					    def c11, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c12, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c2, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c3
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c10.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c10.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c3, r1
					    max_pp r2.w, r1.x, c10.y
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c10.y
					    max_pp r1.y, r0.w, c10.y
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c10.x
					    add_pp r0.y, r2.x, -c7.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c10.x
					    mad_pp r0.x, r0.x, r0.w, c10.x
					    mul r0.w, r0.x, c11.y
					    mad r0.x, r0.w, r0.x, c11.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c10.x
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c3
					    max_pp r2.x, r1.z, c10.y
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c10.x
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c11.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c12.x, c12.y
					    mul_pp r0.x, r0.x, c12.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c12.z, r1.x
					    abs r1.x, c5.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s1
					    mov r3, c4
					    mad_pp r4.xyz, r1, c9, -r3
					    mul_pp r1.xyz, r1, c9
					    mad_pp r3.xyz, c8.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c10.y, c10.x
					    mul_pp r0.z, r0.z, r0.x
					    cmp_pp r0.x, r0.x, r0.z, c10.y
					    mad r4, v2.xyzx, c10.xxxy, c10.yyyx
					    dp4 r5.x, c0, r4
					    dp4 r5.y, c1, r4
					    texld_pp r4, r5, s0
					    mul_pp r4.xyz, r4.w, c6
					    mul_pp r5.xyz, r0.x, r4
					    add_pp r0.x, -r2.w, c10.x
					    mul_pp r0.z, r2.w, r2.w
					    dp2add_pp r0.y, r0.z, r0.y, c11.w
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r2.yzw, r0.x, c10.x, r3.xxyz
					    mul_pp r2.yzw, r2, r5.xxyz
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    mad_pp r0.x, r0.y, r0.x, c10.x
					    add_pp r0.z, -r2.x, c10.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c10.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, r4
					    mad_pp r0.w, c8.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp oC0.xyz, r1, r0, r2.yzww
					    mov_pp oC0.w, c10.x
					
					// approximately 90 instruction slots used (2 texture, 88 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       4
					//   _WorldSpaceCameraPos           c4       1
					//   _WorldSpaceLightPos0           c5       1
					//   _LightShadowData               c6       1
					//   unity_ColorSpaceDielectricSpec c7       1
					//   unity_ColorSpaceLuminance      c8       1
					//   _LightColor0                   c9       1
					//   _Glossiness                    c10      1
					//   _Metallic                      c11      1
					//   _Color                         c12      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c13, 1, 0, 0.5, 0.00100000005
					    def c14, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c15, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0, v2.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mad r0.xy, r2, r1.x, c13.z
					    dp3 r0.z, r2, r2
					    texld_pp r1, r0.z, s2
					    texld_pp r0, r0, s1
					    mul r0.x, r1.x, r0.w
					    cmp r0.x, -r2.z, c13.y, r0.x
					    texldp_pp r1, v3, s0
					    mov r2.x, c13.x
					    lrp_pp r0.y, r1.x, r2.x, c6.x
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, c9
					    add r1.xyz, c4, -v2
					    nrm_pp r3.xyz, r1
					    add r1.xyz, c5, -v2
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mad_pp r2.yzw, r1.xxyz, r0.w, r3.xxyz
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r2.yzww, r2.yzww
					    add r1.w, -r0.w, c13.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c14.x, r0.w
					    mul_pp r2.yzw, r0.w, r2
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r2.yzww
					    dp3_pp r1.w, r1, r2.yzww
					    dp3_pp r1.x, v1, r1
					    max_pp r2.y, r1.x, c13.y
					    max_pp r2.z, r1.w, c13.y
					    dp3_pp r1.x, r4, r3
					    max_pp r2.w, r1.x, c13.y
					    max_pp r1.x, r0.w, c13.y
					    mul r0.w, r1.x, r1.x
					    add_pp r1.x, r2.x, -c10.x
					    mul_pp r1.y, r1.x, r1.x
					    mad r1.z, r1.y, r1.y, -c13.x
					    mad_pp r0.w, r0.w, r1.z, c13.x
					    mul r1.z, r0.w, c14.z
					    mad r0.w, r1.z, r0.w, c14.w
					    rcp r0.w, r0.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.z
					    mad_pp r1.z, r1.x, -r1.x, c13.x
					    mad_pp r1.w, r2.w, r1.z, r1.y
					    mad_pp r1.y, r2.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r2.w
					    add_pp r1.z, -r2.w, c13.x
					    mad r1.y, r2.y, r1.w, r1.y
					    add r1.y, r1.y, c14.y
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.w, r0.w, r1.y
					    mad r1.y, r0.w, -c15.x, c15.y
					    mul_pp r0.w, r0.w, c15.x
					    rsq r1.w, r0.w
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.y, r1.y, c15.z, r1.w
					    abs r1.w, c8.w
					    cmp_pp r0.w, -r1.w, r1.y, r0.w
					    mul_pp r0.w, r2.y, r0.w
					    texld r3, v0, s3
					    mov r4, c7
					    mad_pp r5.xyz, r3, c12, -r4
					    mul_pp r3.xyz, r3, c12
					    mad_pp r4.xyz, c11.x, r5, r4
					    dp3_pp r1.y, r4, r4
					    cmp r1.y, -r1.y, c13.y, c13.x
					    mul_pp r1.y, r0.w, r1.y
					    cmp_pp r0.w, r0.w, r1.y, c13.y
					    mul_pp r5.xyz, r0, r0.w
					    add_pp r0.w, -r2.z, c13.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r6.xyz, r0.w, c13.x, r4
					    mul_pp r4.xyz, r5, r6
					    mul_pp r0.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.z, r0.w
					    add_pp r1.y, r2.z, r2.z
					    mul_pp r1.y, r2.z, r1.y
					    mad_pp r1.x, r1.y, r1.x, -c13.z
					    mad_pp r0.w, r1.x, r0.w, c13.x
					    add_pp r1.y, -r2.y, c13.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c13.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.y, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c11.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp oC0.xyz, r1, r0, r4
					    mov_pp oC0.w, c13.x
					
					// approximately 105 instruction slots used (4 texture, 101 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_ColorSpaceDielectricSpec c2       1
					//   unity_ColorSpaceLuminance      c3       1
					//   _LightColor0                   c4       1
					//   _Glossiness                    c5       1
					//   _Metallic                      c6       1
					//   _Color                         c7       1
					//   _ShadowMapTexture              s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c8, 0, 1, 0.00100000005, 31.622776
					    def c9, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c10, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c8.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c8.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c1, r1
					    max_pp r2.w, r1.x, c8.x
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c8.x
					    max_pp r1.y, r0.w, c8.x
					    mul r0.x, r1.y, r1.y
					    mov r0.y, c8.y
					    add_pp r0.y, r0.y, -c5.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c8.y
					    mad_pp r0.x, r0.x, r0.w, c8.y
					    mul r0.w, r0.x, c9.y
					    mad r0.x, r0.w, r0.x, c9.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c8.y
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c1
					    max_pp r2.x, r1.z, c8.x
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c8.y
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c9.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c10.x, c10.y
					    mul_pp r0.x, r0.x, c10.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c10.z, r1.x
					    abs r1.x, c3.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s1
					    mov r3, c2
					    mad_pp r4.xyz, r1, c7, -r3
					    mul_pp r1.xyz, r1, c7
					    mad_pp r3.xyz, c6.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c8.x, c8.y
					    mul_pp r0.z, r0.z, r0.x
					    cmp_pp r0.x, r0.x, r0.z, c8.x
					    texldp_pp r4, v3, s0
					    mul_pp r4.xyz, r4.x, c4
					    mul_pp r5.xyz, r0.x, r4
					    add_pp r0.x, -r2.w, c8.y
					    mul_pp r0.z, r2.w, r2.w
					    dp2add_pp r0.y, r0.z, r0.y, c9.w
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r2.yzw, r0.x, c8.y, r3.xxyz
					    mul_pp r2.yzw, r2, r5.xxyz
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    mad_pp r0.x, r0.y, r0.x, c8.y
					    add_pp r0.z, -r2.x, c8.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c8.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, r4
					    mad_pp r0.w, c6.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp oC0.xyz, r1, r0, r2.yzww
					    mov_pp oC0.w, c8.y
					
					// approximately 87 instruction slots used (2 texture, 85 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7.x / u_xlat6.x;
					    u_xlat7.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7.x + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7.x + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat7.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xxx * u_xlat4.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = dot(vec2(u_xlat18), u_xlat0.zz);
					    u_xlat12 = u_xlat12 + -0.5;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
					    u_xlat6.x = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat12 * u_xlat6.x + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7.x / u_xlat6.x;
					    u_xlat7.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7.x + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7.x + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat7.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xxx * u_xlat4.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = dot(vec2(u_xlat18), u_xlat0.zz);
					    u_xlat12 = u_xlat12 + -0.5;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
					    u_xlat6.x = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat12 * u_xlat6.x + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       2
					//   _WorldSpaceCameraPos           c2       1
					//   _WorldSpaceLightPos0           c3       1
					//   unity_ColorSpaceDielectricSpec c4       1
					//   unity_ColorSpaceLuminance      c5       1
					//   _LightColor0                   c6       1
					//   _Glossiness                    c7       1
					//   _Metallic                      c8       1
					//   _Color                         c9       1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 0.00100000005, 31.622776
					    def c11, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c12, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c2, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c3
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c10.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c10.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c3, r1
					    max_pp r2.w, r1.x, c10.y
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c10.y
					    max_pp r1.y, r0.w, c10.y
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c10.x
					    add_pp r0.y, r2.x, -c7.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c10.x
					    mad_pp r0.x, r0.x, r0.w, c10.x
					    mul r0.w, r0.x, c11.y
					    mad r0.x, r0.w, r0.x, c11.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c10.x
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c3
					    max_pp r2.x, r1.z, c10.y
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c10.x
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c11.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c12.x, c12.y
					    mul_pp r0.x, r0.x, c12.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c12.z, r1.x
					    abs r1.x, c5.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s2
					    mov r3, c4
					    mad_pp r4.xyz, r1, c9, -r3
					    mul_pp r1.xyz, r1, c9
					    mad_pp r3.xyz, c8.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c10.y, c10.x
					    mul_pp r0.z, r0.z, r0.x
					    cmp_pp r0.x, r0.x, r0.z, c10.y
					    mad r4, v2.xyzx, c10.xxxy, c10.yyyx
					    dp4 r5.x, c0, r4
					    dp4 r5.y, c1, r4
					    texld r4, r5, s1
					    texldp_pp r5, v3, s0
					    mul_pp r0.z, r4.w, r5.x
					    mul_pp r4.xyz, r0.z, c6
					    mul_pp r5.xyz, r0.x, r4
					    add_pp r0.x, -r2.w, c10.x
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r6.xyz, r0.x, c10.x, r3
					    mul_pp r3.xyz, r5, r6
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    add_pp r0.z, r2.w, r2.w
					    mul_pp r0.z, r2.w, r0.z
					    mad_pp r0.y, r0.z, r0.y, c11.w
					    mad_pp r0.x, r0.y, r0.x, c10.x
					    add_pp r0.z, -r2.x, c10.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c10.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, r4
					    mad_pp r0.w, c8.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp oC0.xyz, r1, r0, r3
					    mov_pp oC0.w, c10.x
					
					// approximately 92 instruction slots used (3 texture, 89 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_ColorSpaceDielectricSpec c7       1
					//   unity_ColorSpaceLuminance      c8       1
					//   _LightColor0                   c9       1
					//   _Glossiness                    c10      1
					//   _Metallic                      c11      1
					//   _Color                         c12      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c13, 1, 0, 0.970000029, 0.00100000005
					    def c14, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c15, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dp3 r0.x, v3, v3
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c5.w
					    texld r1, v3, s0
					    mad r0.x, r0.x, -c13.z, r1.x
					    mov r1.x, c13.x
					    cmp_pp r0.x, r0.x, r1.x, c6.x
					    mad r2, v2.xyzx, c13.xxxy, c13.yyyx
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp3 r0.y, r3, r3
					    texld r2, r0.y, s1
					    mul_pp r0.x, r0.x, r2.x
					    mul_pp r0.xyz, r0.x, c9
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c13.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c14.x, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c13.y
					    max_pp r1.y, r2.w, c13.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c13.y
					    max_pp r1.z, r0.w, c13.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c10.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c13.x
					    mad_pp r0.w, r0.w, r1.w, c13.x
					    mul r1.w, r0.w, c14.z
					    mad r0.w, r1.w, r0.w, c14.w
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c13.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c13.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c14.y
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c15.y, c15.z
					    mul_pp r0.w, r0.w, c15.y
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c15.w, r2.x
					    abs r2.x, c8.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s2
					    mov r4, c7
					    mad_pp r3.yzw, r2.xxyz, c12.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c12
					    mad_pp r3.yzw, c11.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c13.y, c13.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c13.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c13.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c15.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c13.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c13.x
					    add_pp r1.y, -r3.x, c13.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c13.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c11.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r0, r3.yzww
					    mov_pp oC0.w, c13.x
					
					// approximately 104 instruction slots used (3 texture, 101 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb0 = u_xlat1.x<u_xlat0.x;
					    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb0 = u_xlat1.x<u_xlat0.x;
					    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_ColorSpaceDielectricSpec c7       1
					//   unity_ColorSpaceLuminance      c8       1
					//   _LightColor0                   c9       1
					//   _Glossiness                    c10      1
					//   _Metallic                      c11      1
					//   _Color                         c12      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c13, 1, 0, 0.970000029, 0.00100000005
					    def c14, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c15, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0, v2.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp3 r0.x, r1, r1
					    texld r1, r1, s1
					    texld r0, r0.x, s2
					    mul r0.x, r1.w, r0.x
					    dp3 r0.y, v3, v3
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.w
					    texld r1, v3, s0
					    mad r0.y, r0.y, -c13.z, r1.x
					    mov r1.x, c13.x
					    cmp_pp r0.y, r0.y, r1.x, c6.x
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, c9
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c13.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c14.x, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c13.y
					    max_pp r1.y, r2.w, c13.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c13.y
					    max_pp r1.z, r0.w, c13.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c10.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c13.x
					    mad_pp r0.w, r0.w, r1.w, c13.x
					    mul r1.w, r0.w, c14.z
					    mad r0.w, r1.w, r0.w, c14.w
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c13.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c13.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c14.y
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c15.y, c15.z
					    mul_pp r0.w, r0.w, c15.y
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c15.w, r2.x
					    abs r2.x, c8.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s3
					    mov r4, c7
					    mad_pp r3.yzw, r2.xxyz, c12.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c12
					    mad_pp r3.yzw, c11.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c13.y, c13.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c13.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c13.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c15.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c13.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c13.x
					    add_pp r1.y, -r3.x, c13.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c13.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c11.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r0, r3.yzww
					    mov_pp oC0.w, c13.x
					
					// approximately 106 instruction slots used (4 texture, 102 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat6 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = u_xlat6 * _LightPositionRange.w;
					    u_xlat6 = u_xlat6 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb6 = u_xlat1.x<u_xlat6;
					    u_xlat6 = (u_xlatb6) ? _LightShadowData.x : 1.0;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat6 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = u_xlat6 * _LightPositionRange.w;
					    u_xlat6 = u_xlat6 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb6 = u_xlat1.x<u_xlat6;
					    u_xlat6 = (u_xlatb6) ? _LightShadowData.x : 1.0;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _ShadowOffsets                 c0       4
					//   unity_WorldToLight             c4       4
					//   _WorldSpaceCameraPos           c8       1
					//   _WorldSpaceLightPos0           c9       1
					//   _LightShadowData               c10      1
					//   unity_ColorSpaceDielectricSpec c11      1
					//   unity_ColorSpaceLuminance      c12      1
					//   _LightColor0                   c13      1
					//   _Glossiness                    c14      1
					//   _Metallic                      c15      1
					//   _Color                         c16      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c17, 1, 0, 0.5, 0.25
					    def c18, 0.00100000005, 31.622776, 9.99999975e-006, 3.14159274
					    def c19, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.x, c17.x
					    rcp r0.y, v3.w
					    mad r1, v3, r0.y, c0
					    texldp_pp r1, r1, s0
					    mad r2, v3, r0.y, c1
					    texldp_pp r2, r2, s0
					    mov_pp r1.y, r2.x
					    mad r2, v3, r0.y, c2
					    mad r3, v3, r0.y, c3
					    texldp_pp r3, r3, s0
					    mov_pp r1.w, r3.x
					    texldp_pp r2, r2, s0
					    mov_pp r1.z, r2.x
					    lrp_pp r2, r1, r0.x, c10.x
					    dp4_pp r0.y, r2, c17.w
					    mad r1, v2.xyzx, c17.xxxy, c17.yyyx
					    dp4 r0.z, c7, r1
					    rcp r0.z, r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    mad r0.zw, r2.xyxy, r0.z, c17.z
					    dp3 r1.x, r2, r2
					    texld_pp r1, r1.x, s2
					    texld_pp r3, r0.zwzw, s1
					    mul r0.z, r1.x, r3.w
					    cmp r0.z, -r2.z, c17.y, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    mul_pp r0.yzw, r0.y, c13.xxyz
					    add r1.xyz, c8, -v2
					    nrm_pp r2.xyz, r1
					    add r1.xyz, c9, -v2
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mad_pp r3.xyz, r1, r1.w, r2
					    mul_pp r1.xyz, r1.w, r1
					    dp3_pp r1.w, r3, r3
					    add r2.w, -r1.w, c18.x
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r2.w, c18.y, r1.w
					    mul_pp r3.xyz, r1.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r1.w, r4, r3
					    dp3_pp r2.w, r1, r3
					    dp3_pp r1.x, v1, r1
					    max_pp r3.x, r1.x, c17.y
					    max_pp r1.x, r2.w, c17.y
					    dp3_pp r1.y, r4, r2
					    max_pp r2.x, r1.y, c17.y
					    max_pp r2.y, r1.w, c17.y
					    mul r1.y, r2.y, r2.y
					    add_pp r0.x, r0.x, -c14.x
					    mul_pp r1.z, r0.x, r0.x
					    mad r1.w, r1.z, r1.z, -c17.x
					    mad_pp r1.y, r1.y, r1.w, c17.x
					    mul r1.w, r1.y, c18.w
					    mad r1.y, r1.w, r1.y, c19.x
					    rcp r1.y, r1.y
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r1.w, r0.x, -r0.x, c17.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c17.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c18.z
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r1.y, r1.y, r1.z
					    mad r1.z, r1.y, -c19.y, c19.z
					    mul_pp r1.y, r1.y, c19.y
					    rsq r2.x, r1.y
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c19.w, r2.x
					    abs r2.x, c12.w
					    cmp_pp r1.y, -r2.x, r1.z, r1.y
					    mul_pp r1.y, r3.x, r1.y
					    texld r2, v0, s3
					    mov r4, c11
					    mad_pp r3.yzw, r2.xxyz, c16.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c16
					    mad_pp r3.yzw, c15.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c17.y, c17.x
					    mul_pp r1.z, r1.z, r1.y
					    cmp_pp r1.y, r1.y, r1.z, c17.y
					    mul_pp r4.xyz, r0.yzww, r1.y
					    add_pp r1.y, -r1.x, c17.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    lrp_pp r5.xyz, r1.y, c17.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r1.y, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.y
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.xy, r1.xwzw, r1.zyzw
					    mad_pp r0.x, r1.x, r0.x, -c17.z
					    mad_pp r1.x, r0.x, r1.y, c17.x
					    add_pp r1.y, -r3.x, c17.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.x, r0.x, r1.y, c17.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r3.x, r0.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mad_pp r0.w, c15.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r0, r3.yzww
					    mov_pp oC0.w, c17.x
					
					// approximately 116 instruction slots used (7 texture, 109 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_12;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat1.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[1].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * vec4(u_xlat6) + _LightShadowData.xxxx;
					    u_xlat6 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_12;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat1.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[1].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * vec4(u_xlat6) + _LightShadowData.xxxx;
					    u_xlat6 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_ColorSpaceDielectricSpec c7       1
					//   unity_ColorSpaceLuminance      c8       1
					//   _LightColor0                   c9       1
					//   _Glossiness                    c10      1
					//   _Metallic                      c11      1
					//   _Color                         c12      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c13, 0.970000029, 0.25, 0.00100000005, 31.622776
					    def c14, 1, 0, 0.0078125, -0.0078125
					    def c15, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c16, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dp3 r0.x, v3, v3
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c5.w
					    add r0.yzw, c14.z, v3.xxyz
					    texld r1, r0.yzww, s0
					    add r0.yzw, c14.xwwz, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.y, r2.x
					    add r0.yzw, c14.xwzw, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.z, r2.x
					    add r0.yzw, c14.xzww, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.w, r2.x
					    mad r0, r0.x, -c13.x, r1
					    mov r1.x, c14.x
					    cmp_pp r0, r0, r1.x, c6.x
					    dp4_pp r0.x, r0, c13.y
					    mad r2, v2.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp3 r0.y, r3, r3
					    texld r2, r0.y, s1
					    mul_pp r0.x, r0.x, r2.x
					    mul_pp r0.xyz, r0.x, c9
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c13.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c13.w, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c14.y
					    max_pp r1.y, r2.w, c14.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c14.y
					    max_pp r1.z, r0.w, c14.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c10.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c14.x
					    mad_pp r0.w, r0.w, r1.w, c14.x
					    mul r1.w, r0.w, c15.y
					    mad r0.w, r1.w, r0.w, c15.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c14.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c14.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c15.x
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c16.x, c16.y
					    mul_pp r0.w, r0.w, c16.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c16.z, r2.x
					    abs r2.x, c8.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s2
					    mov r4, c7
					    mad_pp r3.yzw, r2.xxyz, c12.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c12
					    mad_pp r3.yzw, c11.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c14.y, c14.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c14.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c14.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c15.w
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c14.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c14.x
					    add_pp r1.y, -r3.x, c14.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c14.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c11.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r0, r3.yzww
					    mov_pp oC0.w, c14.x
					
					// approximately 115 instruction slots used (6 texture, 109 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_ColorSpaceDielectricSpec c7       1
					//   unity_ColorSpaceLuminance      c8       1
					//   _LightColor0                   c9       1
					//   _Glossiness                    c10      1
					//   _Metallic                      c11      1
					//   _Color                         c12      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c13, 0.970000029, 0.25, 0.00100000005, 31.622776
					    def c14, 1, 0, 0.0078125, -0.0078125
					    def c15, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c16, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dp3 r0.x, v3, v3
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c5.w
					    add r0.yzw, c14.z, v3.xxyz
					    texld r1, r0.yzww, s0
					    add r0.yzw, c14.xwwz, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.y, r2.x
					    add r0.yzw, c14.xwzw, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.z, r2.x
					    add r0.yzw, c14.xzww, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.w, r2.x
					    mad r0, r0.x, -c13.x, r1
					    mov r1.x, c14.x
					    cmp_pp r0, r0, r1.x, c6.x
					    dp4_pp r0.x, r0, c13.y
					    mad r2, v2.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp3 r0.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r0.y, s2
					    mul r0.y, r2.w, r3.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.xyz, r0.x, c9
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c13.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c13.w, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c14.y
					    max_pp r1.y, r2.w, c14.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c14.y
					    max_pp r1.z, r0.w, c14.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c10.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c14.x
					    mad_pp r0.w, r0.w, r1.w, c14.x
					    mul r1.w, r0.w, c15.y
					    mad r0.w, r1.w, r0.w, c15.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c14.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c14.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c15.x
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c16.x, c16.y
					    mul_pp r0.w, r0.w, c16.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c16.z, r2.x
					    abs r2.x, c8.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s3
					    mov r4, c7
					    mad_pp r3.yzw, r2.xxyz, c12.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c12
					    mad_pp r3.yzw, c11.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c14.y, c14.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c14.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c14.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c15.w
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c14.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c14.x
					    add_pp r1.y, -r3.x, c14.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c14.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c11.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp oC0.xyz, r1, r0, r3.yzww
					    mov_pp oC0.w, c14.x
					
					// approximately 117 instruction slots used (7 texture, 110 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat2.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat2.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_FogParams                c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   unity_ColorSpaceLuminance      c7       1
					//   _LightColor0                   c8       1
					//   _Glossiness                    c9       1
					//   _Metallic                      c10      1
					//   _Color                         c11      1
					//   _LightTexture0                 s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c12, 1, 0, 0.00100000005, 31.622776
					    def c13, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c14, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c3, -v2
					    nrm_pp r1.xyz, r0
					    add r0.xyz, c4, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r2.xyz, r0, r0.w, r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c12.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c12.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v1
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.w, r0, r2
					    dp3_pp r0.x, v1, r0
					    max_pp r2.x, r0.x, c12.y
					    max_pp r0.x, r1.w, c12.y
					    dp3_pp r0.y, r3, r1
					    max_pp r1.x, r0.y, c12.y
					    max_pp r1.y, r0.w, c12.y
					    mul r0.y, r1.y, r1.y
					    mov r3.x, c12.x
					    add_pp r0.z, r3.x, -c9.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c12.x
					    mad_pp r0.y, r0.y, r1.y, c12.x
					    mul r1.y, r0.y, c13.y
					    mad r0.y, r1.y, r0.y, c13.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c12.x
					    mad_pp r1.z, r1.x, r1.y, r0.w
					    mad_pp r0.w, r2.x, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c12.x
					    mad r0.w, r2.x, r1.z, r0.w
					    add r0.w, r0.w, c13.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c14.x, c14.y
					    mul_pp r0.y, r0.y, c14.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c14.z, r1.y
					    abs r1.y, c7.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r2.x, r0.y
					    texld r3, v0, s1
					    mov r4, c6
					    mad_pp r1.yzw, r3.xxyz, c11.xxyz, -r4.xxyz
					    mul_pp r2.yzw, r3.xxyz, c11.xxyz
					    mad_pp r1.yzw, c10.x, r1, r4.xxyz
					    dp3_pp r0.w, r1.yzww, r1.yzww
					    cmp r0.w, -r0.w, c12.y, c12.x
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c12.y
					    mad r3, v2.xyzx, c12.xxxy, c12.yyyx
					    dp4 r4.x, c0, r3
					    dp4 r4.y, c1, r3
					    dp4 r4.z, c2, r3
					    dp3 r0.w, r4, r4
					    texld_pp r3, r0.w, s0
					    mul_pp r3.xyz, r3.x, c8
					    mul_pp r4.xyz, r0.y, r3
					    add_pp r0.y, -r0.x, c12.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c13.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r5.xyz, r0.y, c12.x, r1.yzww
					    mul_pp r0.yzw, r4.xxyz, r5.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c12.x
					    add_pp r1.y, -r2.x, c12.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.x, r0.x, r1.y, c12.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r1.xyz, r0.x, r3
					    mad_pp r0.x, c10.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.x, r2.yzww
					    mad_pp r0.xyz, r2, r1, r0.yzww
					    mul r0.w, c5.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c12.x
					
					// approximately 100 instruction slots used (2 texture, 98 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat21));
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat21));
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Glossiness                    c6       1
					//   _Metallic                      c7       1
					//   _Color                         c8       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c9, 0, 1, 0.00100000005, 31.622776
					    def c10, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c11, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c1, r1
					    max_pp r2.w, r1.x, c9.x
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c9.x
					    max_pp r1.y, r0.w, c9.x
					    mul r0.x, r1.y, r1.y
					    mov r0.y, c9.y
					    add_pp r0.y, r0.y, -c6.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c9.y
					    mad_pp r0.x, r0.x, r0.w, c9.y
					    mul r0.w, r0.x, c10.y
					    mad r0.x, r0.w, r0.x, c10.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c9.y
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c1
					    max_pp r2.x, r1.z, c9.x
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c9.y
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c10.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c11.x, c11.y
					    mul_pp r0.x, r0.x, c11.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c11.z, r1.x
					    abs r1.x, c4.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s0
					    mov r3, c3
					    mad_pp r4.xyz, r1, c8, -r3
					    mul_pp r1.xyz, r1, c8
					    mad_pp r3.xyz, c7.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c9.x, c9.y
					    mul r0.z, r0.z, r0.x
					    mul_pp r4.xyz, r0.z, c5
					    cmp_pp r4.xyz, r0.x, r4, c9.x
					    add_pp r0.x, -r2.w, c9.y
					    mul_pp r0.z, r2.w, r2.w
					    dp2add_pp r0.y, r0.z, r0.y, c10.w
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r2.yzw, r0.x, c9.y, r3.xxyz
					    mul_pp r2.yzw, r2, r4.xxyz
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    mad_pp r0.x, r0.y, r0.x, c9.y
					    add_pp r0.z, -r2.x, c9.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c9.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, c5
					    mad_pp r0.w, c7.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.xyz, r1, r0, r2.yzww
					    mul r0.w, c2.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.y
					
					// approximately 89 instruction slots used (1 texture, 88 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7 = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7 * u_xlat6.x + 1.00000001e-07;
					    u_xlat7 = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7 / u_xlat6.x;
					    u_xlat7 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7 + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7 + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat4.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x + u_xlat1.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7 = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7 * u_xlat6.x + 1.00000001e-07;
					    u_xlat7 = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7 / u_xlat6.x;
					    u_xlat7 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7 + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7 + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat4.xyz = u_xlat6.xxx * _LightColor0.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = u_xlat1.x + u_xlat1.x;
					    u_xlat6.x = u_xlat1.x * u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;
					    u_xlat12 = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat12 * u_xlat12;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat12 = u_xlat12 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       4
					//   _WorldSpaceCameraPos           c4       1
					//   _WorldSpaceLightPos0           c5       1
					//   unity_FogParams                c6       1
					//   unity_ColorSpaceDielectricSpec c7       1
					//   unity_ColorSpaceLuminance      c8       1
					//   _LightColor0                   c9       1
					//   _Glossiness                    c10      1
					//   _Metallic                      c11      1
					//   _Color                         c12      1
					//   _LightTexture0                 s0       1
					//   _LightTextureB0                s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c13, 1, 0, 0.5, 0.00100000005
					    def c14, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c15, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0, v2.xyzx, c13.xxxy, c13.yyyx
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mad r0.xy, r2, r1.x, c13.z
					    dp3 r0.z, r2, r2
					    texld_pp r1, r0.z, s1
					    texld_pp r0, r0, s0
					    mul r0.x, r1.x, r0.w
					    mul_pp r0.xyz, r0.x, c9
					    cmp_pp r0.xyz, -r2.z, c13.y, r0
					    add r1.xyz, c4, -v2
					    nrm_pp r2.xyz, r1
					    add r1.xyz, c5, -v2
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1, r0.w, r2
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r1.w, -r0.w, c13.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c14.x, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r1.w, r1, r3
					    dp3_pp r1.x, v1, r1
					    max_pp r2.w, r1.x, c13.y
					    max_pp r3.x, r1.w, c13.y
					    dp3_pp r1.x, r4, r2
					    max_pp r2.x, r1.x, c13.y
					    max_pp r1.x, r0.w, c13.y
					    mul r0.w, r1.x, r1.x
					    mov r1.x, c13.x
					    add_pp r1.x, r1.x, -c10.x
					    mul_pp r1.y, r1.x, r1.x
					    mad r1.z, r1.y, r1.y, -c13.x
					    mad_pp r0.w, r0.w, r1.z, c13.x
					    mul r1.z, r0.w, c14.z
					    mad r0.w, r1.z, r0.w, c14.w
					    rcp r0.w, r0.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.z
					    mad_pp r1.z, r1.x, -r1.x, c13.x
					    mad_pp r1.w, r2.x, r1.z, r1.y
					    mad_pp r1.y, r2.w, r1.z, r1.y
					    mul_pp r1.y, r1.y, r2.x
					    add_pp r1.z, -r2.x, c13.x
					    mad r1.y, r2.w, r1.w, r1.y
					    add r1.y, r1.y, c14.y
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.w, r0.w, r1.y
					    mad r1.y, r0.w, -c15.x, c15.y
					    mul_pp r0.w, r0.w, c15.x
					    rsq r1.w, r0.w
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.y, r1.y, c15.z, r1.w
					    abs r1.w, c8.w
					    cmp_pp r0.w, -r1.w, r1.y, r0.w
					    mul_pp r0.w, r2.w, r0.w
					    texld r4, v0, s2
					    mov r5, c7
					    mad_pp r2.xyz, r4, c12, -r5
					    mul_pp r3.yzw, r4.xxyz, c12.xxyz
					    mad_pp r2.xyz, c11.x, r2, r5
					    dp3_pp r1.y, r2, r2
					    cmp r1.y, -r1.y, c13.y, c13.x
					    mul_pp r1.y, r0.w, r1.y
					    cmp_pp r0.w, r0.w, r1.y, c13.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r3.x, c13.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c13.x, r2
					    mul_pp r2.xyz, r4, r5
					    mul_pp r0.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.z, r0.w
					    add_pp r1.y, r3.x, r3.x
					    mul_pp r1.y, r3.x, r1.y
					    mad_pp r1.x, r1.y, r1.x, -c13.z
					    mad_pp r0.w, r1.x, r0.w, c13.x
					    add_pp r1.y, -r2.w, c13.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c13.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c11.x, -r5.w, r5.w
					    mul_pp r1.xyz, r0.w, r3.yzww
					    mad_pp r0.xyz, r1, r0, r2
					    mul r0.w, c6.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c13.x
					
					// approximately 106 instruction slots used (3 texture, 103 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   unity_FogParams                c5       1
					//   unity_ColorSpaceDielectricSpec c6       1
					//   unity_ColorSpaceLuminance      c7       1
					//   _LightColor0                   c8       1
					//   _Glossiness                    c9       1
					//   _Metallic                      c10      1
					//   _Color                         c11      1
					//   _LightTexture0                 s0       1
					//   _LightTextureB0                s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c12, 1, 0, 0.00100000005, 31.622776
					    def c13, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c14, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c3, -v2
					    nrm_pp r1.xyz, r0
					    add r0.xyz, c4, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r2.xyz, r0, r0.w, r1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r2, r2
					    add r1.w, -r0.w, c12.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c12.w, r0.w
					    mul_pp r2.xyz, r0.w, r2
					    nrm_pp r3.xyz, v1
					    dp3_pp r0.w, r3, r2
					    dp3_pp r1.w, r0, r2
					    dp3_pp r0.x, v1, r0
					    max_pp r2.x, r0.x, c12.y
					    max_pp r0.x, r1.w, c12.y
					    dp3_pp r0.y, r3, r1
					    max_pp r1.x, r0.y, c12.y
					    max_pp r1.y, r0.w, c12.y
					    mul r0.y, r1.y, r1.y
					    mov r3.x, c12.x
					    add_pp r0.z, r3.x, -c9.x
					    mul_pp r0.w, r0.z, r0.z
					    mad r1.y, r0.w, r0.w, -c12.x
					    mad_pp r0.y, r0.y, r1.y, c12.x
					    mul r1.y, r0.y, c13.y
					    mad r0.y, r1.y, r0.y, c13.z
					    rcp r0.y, r0.y
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r0.y, r0.y, r1.y
					    mad_pp r1.y, r0.z, -r0.z, c12.x
					    mad_pp r1.z, r1.x, r1.y, r0.w
					    mad_pp r0.w, r2.x, r1.y, r0.w
					    mul_pp r0.w, r0.w, r1.x
					    add_pp r1.x, -r1.x, c12.x
					    mad r0.w, r2.x, r1.z, r0.w
					    add r0.w, r0.w, c13.x
					    rcp r0.w, r0.w
					    add_pp r0.w, r0.w, r0.w
					    mul r0.y, r0.y, r0.w
					    mad r0.w, r0.y, -c14.x, c14.y
					    mul_pp r0.y, r0.y, c14.x
					    rsq r1.y, r0.y
					    rcp_pp r1.y, r1.y
					    cmp_pp r0.w, r0.w, c14.z, r1.y
					    abs r1.y, c7.w
					    cmp_pp r0.y, -r1.y, r0.w, r0.y
					    mul_pp r0.y, r2.x, r0.y
					    texld r3, v0, s2
					    mov r4, c6
					    mad_pp r1.yzw, r3.xxyz, c11.xxyz, -r4.xxyz
					    mul_pp r2.yzw, r3.xxyz, c11.xxyz
					    mad_pp r1.yzw, c10.x, r1, r4.xxyz
					    dp3_pp r0.w, r1.yzww, r1.yzww
					    cmp r0.w, -r0.w, c12.y, c12.x
					    mul_pp r0.w, r0.w, r0.y
					    cmp_pp r0.y, r0.y, r0.w, c12.y
					    mad r3, v2.xyzx, c12.xxxy, c12.yyyx
					    dp4 r4.x, c0, r3
					    dp4 r4.y, c1, r3
					    dp4 r4.z, c2, r3
					    dp3 r0.w, r4, r4
					    texld r3, r4, s0
					    texld r5, r0.w, s1
					    mul_pp r0.w, r3.w, r5.x
					    mul_pp r3.xyz, r0.w, c8
					    mul_pp r4.xyz, r0.y, r3
					    add_pp r0.y, -r0.x, c12.x
					    mul_pp r0.x, r0.x, r0.x
					    dp2add_pp r0.x, r0.x, r0.z, c13.w
					    mul_pp r0.z, r0.y, r0.y
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    lrp_pp r5.xyz, r0.y, c12.x, r1.yzww
					    mul_pp r0.yzw, r4.xxyz, r5.xxyz
					    mul_pp r1.y, r1.x, r1.x
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.x, r1.y
					    mad_pp r1.x, r0.x, r1.x, c12.x
					    add_pp r1.y, -r2.x, c12.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.x, r0.x, r1.y, c12.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r1.xyz, r0.x, r3
					    mad_pp r0.x, c10.x, -r4.w, r4.w
					    mul_pp r2.xyz, r0.x, r2.yzww
					    mad_pp r0.xyz, r2, r1, r0.yzww
					    mul r0.w, c5.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c12.x
					
					// approximately 102 instruction slots used (3 texture, 99 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat14;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat1.w = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);
					    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat15 = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat15 + 1.0;
					    u_xlat15 = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat15 * u_xlat7.x + 1.00000001e-07;
					    u_xlat15 = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat15 / u_xlat7.x;
					    u_xlat15 = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat22 = u_xlat0.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat1.x * u_xlat15 + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.x * u_xlat22 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb15) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat4.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4 = texture(_LightTexture0, u_xlat4.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.y) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.y + u_xlat1.y;
					    u_xlat7.x = u_xlat1.y * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       2
					//   _WorldSpaceCameraPos           c2       1
					//   _WorldSpaceLightPos0           c3       1
					//   unity_FogParams                c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_ColorSpaceLuminance      c6       1
					//   _LightColor0                   c7       1
					//   _Glossiness                    c8       1
					//   _Metallic                      c9       1
					//   _Color                         c10      1
					//   _LightTexture0                 s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0.00100000005, 31.622776
					    def c12, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c13, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord4 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c2, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c3
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c11.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c11.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c3, r1
					    max_pp r2.w, r1.x, c11.y
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c11.y
					    max_pp r1.y, r0.w, c11.y
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c11.x
					    add_pp r0.y, r2.x, -c8.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c11.x
					    mad_pp r0.x, r0.x, r0.w, c11.x
					    mul r0.w, r0.x, c12.y
					    mad r0.x, r0.w, r0.x, c12.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c11.x
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c3
					    max_pp r2.x, r1.z, c11.y
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c11.x
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c12.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c13.x, c13.y
					    mul_pp r0.x, r0.x, c13.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c13.z, r1.x
					    abs r1.x, c6.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s1
					    mov r3, c5
					    mad_pp r4.xyz, r1, c10, -r3
					    mul_pp r1.xyz, r1, c10
					    mad_pp r3.xyz, c9.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c11.y, c11.x
					    mul_pp r0.z, r0.z, r0.x
					    cmp_pp r0.x, r0.x, r0.z, c11.y
					    mad r4, v2.xyzx, c11.xxxy, c11.yyyx
					    dp4 r5.x, c0, r4
					    dp4 r5.y, c1, r4
					    texld_pp r4, r5, s0
					    mul_pp r4.xyz, r4.w, c7
					    mul_pp r5.xyz, r0.x, r4
					    add_pp r0.x, -r2.w, c11.x
					    mul_pp r0.z, r2.w, r2.w
					    dp2add_pp r0.y, r0.z, r0.y, c12.w
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r2.yzw, r0.x, c11.x, r3.xxyz
					    mul_pp r2.yzw, r2, r5.xxyz
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    mad_pp r0.x, r0.y, r0.x, c11.x
					    add_pp r0.z, -r2.x, c11.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c11.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, r4
					    mad_pp r0.w, c9.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.xyz, r1, r0, r2.yzww
					    mul r0.w, c4.x, v3.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c11.x
					
					// approximately 94 instruction slots used (2 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat4.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       4
					//   _WorldSpaceCameraPos           c4       1
					//   _WorldSpaceLightPos0           c5       1
					//   _LightShadowData               c6       1
					//   unity_FogParams                c7       1
					//   unity_ColorSpaceDielectricSpec c8       1
					//   unity_ColorSpaceLuminance      c9       1
					//   _LightColor0                   c10      1
					//   _Glossiness                    c11      1
					//   _Metallic                      c12      1
					//   _Color                         c13      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c14, 1, 0, 0.5, 0.00100000005
					    def c15, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c16, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0, v2.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c3, r0
					    rcp r1.x, r1.x
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mad r0.xy, r2, r1.x, c14.z
					    dp3 r0.z, r2, r2
					    texld_pp r1, r0.z, s2
					    texld_pp r0, r0, s1
					    mul r0.x, r1.x, r0.w
					    cmp r0.x, -r2.z, c14.y, r0.x
					    texldp_pp r1, v3, s0
					    mov r2.x, c14.x
					    lrp_pp r0.y, r1.x, r2.x, c6.x
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, c10
					    add r1.xyz, c4, -v2
					    nrm_pp r3.xyz, r1
					    add r1.xyz, c5, -v2
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mad_pp r2.yzw, r1.xxyz, r0.w, r3.xxyz
					    mul_pp r1.xyz, r0.w, r1
					    dp3_pp r0.w, r2.yzww, r2.yzww
					    add r1.w, -r0.w, c14.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c15.x, r0.w
					    mul_pp r2.yzw, r0.w, r2
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r2.yzww
					    dp3_pp r1.w, r1, r2.yzww
					    dp3_pp r1.x, v1, r1
					    max_pp r2.y, r1.x, c14.y
					    max_pp r2.z, r1.w, c14.y
					    dp3_pp r1.x, r4, r3
					    max_pp r2.w, r1.x, c14.y
					    max_pp r1.x, r0.w, c14.y
					    mul r0.w, r1.x, r1.x
					    add_pp r1.x, r2.x, -c11.x
					    mul_pp r1.y, r1.x, r1.x
					    mad r1.z, r1.y, r1.y, -c14.x
					    mad_pp r0.w, r0.w, r1.z, c14.x
					    mul r1.z, r0.w, c15.z
					    mad r0.w, r1.z, r0.w, c15.w
					    rcp r0.w, r0.w
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.z
					    mad_pp r1.z, r1.x, -r1.x, c14.x
					    mad_pp r1.w, r2.w, r1.z, r1.y
					    mad_pp r1.y, r2.y, r1.z, r1.y
					    mul_pp r1.y, r1.y, r2.w
					    add_pp r1.z, -r2.w, c14.x
					    mad r1.y, r2.y, r1.w, r1.y
					    add r1.y, r1.y, c15.y
					    rcp r1.y, r1.y
					    add_pp r1.y, r1.y, r1.y
					    mul r0.w, r0.w, r1.y
					    mad r1.y, r0.w, -c16.x, c16.y
					    mul_pp r0.w, r0.w, c16.x
					    rsq r1.w, r0.w
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.y, r1.y, c16.z, r1.w
					    abs r1.w, c9.w
					    cmp_pp r0.w, -r1.w, r1.y, r0.w
					    mul_pp r0.w, r2.y, r0.w
					    texld r3, v0, s3
					    mov r4, c8
					    mad_pp r5.xyz, r3, c13, -r4
					    mul_pp r3.xyz, r3, c13
					    mad_pp r4.xyz, c12.x, r5, r4
					    dp3_pp r1.y, r4, r4
					    cmp r1.y, -r1.y, c14.y, c14.x
					    mul_pp r1.y, r0.w, r1.y
					    cmp_pp r0.w, r0.w, r1.y, c14.y
					    mul_pp r5.xyz, r0, r0.w
					    add_pp r0.w, -r2.z, c14.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r6.xyz, r0.w, c14.x, r4
					    mul_pp r4.xyz, r5, r6
					    mul_pp r0.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.z, r0.w
					    add_pp r1.y, r2.z, r2.z
					    mul_pp r1.y, r2.z, r1.y
					    mad_pp r1.x, r1.y, r1.x, -c14.z
					    mad_pp r0.w, r1.x, r0.w, c14.x
					    add_pp r1.y, -r2.y, c14.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c14.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r2.y, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c12.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r3
					    mad_pp r0.xyz, r1, r0, r4
					    mul r0.w, c7.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c14.x
					
					// approximately 109 instruction slots used (4 texture, 105 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _WorldSpaceCameraPos           c0       1
					//   _WorldSpaceLightPos0           c1       1
					//   unity_FogParams                c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _LightColor0                   c5       1
					//   _Glossiness                    c6       1
					//   _Metallic                      c7       1
					//   _Color                         c8       1
					//   _ShadowMapTexture              s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c9, 0, 1, 0.00100000005, 31.622776
					    def c10, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c11, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xyz, c0, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c1
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c9.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c1, r1
					    max_pp r2.w, r1.x, c9.x
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c9.x
					    max_pp r1.y, r0.w, c9.x
					    mul r0.x, r1.y, r1.y
					    mov r0.y, c9.y
					    add_pp r0.y, r0.y, -c6.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c9.y
					    mad_pp r0.x, r0.x, r0.w, c9.y
					    mul r0.w, r0.x, c10.y
					    mad r0.x, r0.w, r0.x, c10.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c9.y
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c1
					    max_pp r2.x, r1.z, c9.x
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c9.y
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c10.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c11.x, c11.y
					    mul_pp r0.x, r0.x, c11.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c11.z, r1.x
					    abs r1.x, c4.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s1
					    mov r3, c3
					    mad_pp r4.xyz, r1, c8, -r3
					    mul_pp r1.xyz, r1, c8
					    mad_pp r3.xyz, c7.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c9.x, c9.y
					    mul_pp r0.z, r0.z, r0.x
					    cmp_pp r0.x, r0.x, r0.z, c9.x
					    texldp_pp r4, v3, s0
					    mul_pp r4.xyz, r4.x, c5
					    mul_pp r5.xyz, r0.x, r4
					    add_pp r0.x, -r2.w, c9.y
					    mul_pp r0.z, r2.w, r2.w
					    dp2add_pp r0.y, r0.z, r0.y, c10.w
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r2.yzw, r0.x, c9.y, r3.xxyz
					    mul_pp r2.yzw, r2, r5.xxyz
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    mad_pp r0.x, r0.y, r0.x, c9.y
					    add_pp r0.z, -r2.x, c9.y
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c9.y
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, r4
					    mad_pp r0.w, c7.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.xyz, r1, r0, r2.yzww
					    mul r0.w, c2.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c9.y
					
					// approximately 91 instruction slots used (2 texture, 89 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7.x / u_xlat6.x;
					    u_xlat7.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7.x + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7.x + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat7.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xxx * u_xlat4.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = dot(vec2(u_xlat18), u_xlat0.zz);
					    u_xlat12 = u_xlat12 + -0.5;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
					    u_xlat6.x = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat12 * u_xlat6.x + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat6.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z + -1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat7.x + 1.0;
					    u_xlat7.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = u_xlat7.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat7.x = u_xlat6.z * u_xlat6.z;
					    u_xlat6.x = u_xlat7.x / u_xlat6.x;
					    u_xlat7.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat7.x + u_xlat6.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = u_xlat1.w * u_xlat7.x + u_xlat6.z;
					    u_xlat18 = u_xlat18 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat18 = u_xlat1.w * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 + 9.99999975e-06;
					    u_xlat18 = 2.0 / u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat6.x * 0.785398185;
					    u_xlat18 = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlatb7 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat6.x = (u_xlatb7) ? u_xlat18 : u_xlat6.x;
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat6.x = max(u_xlat6.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat18 * u_xlat6.x;
					    u_xlat7.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat7.xy);
					    u_xlat4.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat6.xxx * u_xlat4.xyz;
					    u_xlat6.x = (-u_xlat1.x) + 1.0;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = dot(vec2(u_xlat18), u_xlat0.zz);
					    u_xlat12 = u_xlat12 + -0.5;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat1.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat6.x = u_xlat0.x * u_xlat0.x;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat12 * u_xlat0.x + 1.0;
					    u_xlat6.x = (-u_xlat1.w) + 1.0;
					    u_xlat18 = u_xlat6.x * u_xlat6.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat6.x = u_xlat6.x * u_xlat18;
					    u_xlat6.x = u_xlat12 * u_xlat6.x + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       2
					//   _WorldSpaceCameraPos           c2       1
					//   _WorldSpaceLightPos0           c3       1
					//   unity_FogParams                c4       1
					//   unity_ColorSpaceDielectricSpec c5       1
					//   unity_ColorSpaceLuminance      c6       1
					//   _LightColor0                   c7       1
					//   _Glossiness                    c8       1
					//   _Metallic                      c9       1
					//   _Color                         c10      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0.00100000005, 31.622776
					    def c12, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c13, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    add r0.xyz, c2, -v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r1.xyz, r0, r0.w, c3
					    mul_pp r0.xyz, r0.w, r0
					    dp3_pp r0.w, r1, r1
					    add r1.w, -r0.w, c11.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r1.w, c11.w, r0.w
					    mul_pp r1.xyz, r0.w, r1
					    nrm_pp r2.xyz, v1
					    dp3_pp r0.w, r2, r1
					    dp3_pp r1.x, c3, r1
					    max_pp r2.w, r1.x, c11.y
					    dp3_pp r0.x, r2, r0
					    max_pp r1.x, r0.x, c11.y
					    max_pp r1.y, r0.w, c11.y
					    mul r0.x, r1.y, r1.y
					    mov r2.x, c11.x
					    add_pp r0.y, r2.x, -c8.x
					    mul_pp r0.z, r0.y, r0.y
					    mad r0.w, r0.z, r0.z, -c11.x
					    mad_pp r0.x, r0.x, r0.w, c11.x
					    mul r0.w, r0.x, c12.y
					    mad r0.x, r0.w, r0.x, c12.z
					    rcp r0.x, r0.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.w
					    mad_pp r0.w, r0.y, -r0.y, c11.x
					    mad_pp r1.y, r1.x, r0.w, r0.z
					    dp3_pp r1.z, v1, c3
					    max_pp r2.x, r1.z, c11.y
					    mad_pp r0.z, r2.x, r0.w, r0.z
					    mul_pp r0.z, r0.z, r1.x
					    add_pp r0.w, -r1.x, c11.x
					    mad r0.z, r2.x, r1.y, r0.z
					    add r0.z, r0.z, c12.x
					    rcp r0.z, r0.z
					    add_pp r0.z, r0.z, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.z, r0.x, -c13.x, c13.y
					    mul_pp r0.x, r0.x, c13.x
					    rsq r1.x, r0.x
					    rcp_pp r1.x, r1.x
					    cmp_pp r0.z, r0.z, c13.z, r1.x
					    abs r1.x, c6.w
					    cmp_pp r0.x, -r1.x, r0.z, r0.x
					    mul_pp r0.x, r2.x, r0.x
					    texld r1, v0, s2
					    mov r3, c5
					    mad_pp r4.xyz, r1, c10, -r3
					    mul_pp r1.xyz, r1, c10
					    mad_pp r3.xyz, c9.x, r4, r3
					    dp3_pp r0.z, r3, r3
					    cmp r0.z, -r0.z, c11.y, c11.x
					    mul_pp r0.z, r0.z, r0.x
					    cmp_pp r0.x, r0.x, r0.z, c11.y
					    mad r4, v2.xyzx, c11.xxxy, c11.yyyx
					    dp4 r5.x, c0, r4
					    dp4 r5.y, c1, r4
					    texld r4, r5, s1
					    texldp_pp r5, v3, s0
					    mul_pp r0.z, r4.w, r5.x
					    mul_pp r4.xyz, r0.z, c7
					    mul_pp r5.xyz, r0.x, r4
					    add_pp r0.x, -r2.w, c11.x
					    mul_pp r0.z, r0.x, r0.x
					    mul_pp r0.z, r0.z, r0.z
					    mul_pp r0.x, r0.x, r0.z
					    lrp_pp r6.xyz, r0.x, c11.x, r3
					    mul_pp r3.xyz, r5, r6
					    mul_pp r0.x, r0.w, r0.w
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.w, r0.x
					    add_pp r0.z, r2.w, r2.w
					    mul_pp r0.z, r2.w, r0.z
					    mad_pp r0.y, r0.z, r0.y, c12.w
					    mad_pp r0.x, r0.y, r0.x, c11.x
					    add_pp r0.z, -r2.x, c11.x
					    mul_pp r0.w, r0.z, r0.z
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.z, r0.z, r0.w
					    mad_pp r0.y, r0.y, r0.z, c11.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.x, r2.x, r0.x
					    mul_pp r0.xyz, r0.x, r4
					    mad_pp r0.w, c9.x, -r3.w, r3.w
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.xyz, r1, r0, r3
					    mul r0.w, c4.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c11.x
					
					// approximately 96 instruction slots used (3 texture, 93 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat14;
					float u_xlat15;
					float u_xlat21;
					bool u_xlatb21;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex;
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;
					    u_xlat0.w = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.xy = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat7.xz = u_xlat0.yz * u_xlat0.yz;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z + -1.0;
					    u_xlat7.x = u_xlat7.x * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat7.x * 3.14159274;
					    u_xlat7.x = u_xlat8.x * u_xlat7.x + 1.00000001e-07;
					    u_xlat8.x = u_xlat7.z * u_xlat7.z;
					    u_xlat7.x = u_xlat8.x / u_xlat7.x;
					    u_xlat8.x = (-u_xlat0.z) * u_xlat0.z + 1.0;
					    u_xlat15 = u_xlat0.x * u_xlat8.x + u_xlat7.z;
					    u_xlat1.w = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat21 = u_xlat1.w * u_xlat8.x + u_xlat7.z;
					    u_xlat21 = u_xlat21 * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat21 = u_xlat1.w * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 + 9.99999975e-06;
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat7.x = u_xlat7.x * 0.785398185;
					    u_xlat21 = max(u_xlat7.x, 9.99999975e-05);
					    u_xlat21 = sqrt(u_xlat21);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat7.x = (u_xlatb8) ? u_xlat21 : u_xlat7.x;
					    u_xlat7.x = u_xlat1.w * u_xlat7.x;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat2.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * _Color.xyz;
					    u_xlat3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat3.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21!=0.0;
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlat21 * u_xlat7.x;
					    u_xlat8.xy = vs_TEXCOORD2.yy * unity_WorldToLight[1].xy;
					    u_xlat8.xy = unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat8.xy;
					    u_xlat8.xy = unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat8.xy;
					    u_xlat8.xy = u_xlat8.xy + unity_WorldToLight[3].xy;
					    u_xlat4 = texture(_LightTexture0, u_xlat8.xy);
					    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat5 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat21 = u_xlat4.w * u_xlat5.x;
					    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat5.xyz = u_xlat7.xxx * u_xlat4.xyz;
					    u_xlat7.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat7.x * u_xlat7.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat21;
					    u_xlat6.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat7.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat7.x = u_xlat0.x * u_xlat0.x;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat7.x = u_xlat1.x * u_xlat7.x;
					    u_xlat7.x = u_xlat7.x * u_xlat0.z + -0.5;
					    u_xlat0.x = u_xlat7.x * u_xlat0.x + 1.0;
					    u_xlat14 = (-u_xlat1.w) + 1.0;
					    u_xlat21 = u_xlat14 * u_xlat14;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat14 = u_xlat14 * u_xlat21;
					    u_xlat7.x = u_xlat7.x * u_xlat14 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;
					    u_xlat21 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat21 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_FogParams                c7       1
					//   unity_ColorSpaceDielectricSpec c8       1
					//   unity_ColorSpaceLuminance      c9       1
					//   _LightColor0                   c10      1
					//   _Glossiness                    c11      1
					//   _Metallic                      c12      1
					//   _Color                         c13      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c14, 1, 0, 0.970000029, 0.00100000005
					    def c15, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c16, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dp3 r0.x, v3, v3
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c5.w
					    texld r1, v3, s0
					    mad r0.x, r0.x, -c14.z, r1.x
					    mov r1.x, c14.x
					    cmp_pp r0.x, r0.x, r1.x, c6.x
					    mad r2, v2.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp3 r0.y, r3, r3
					    texld r2, r0.y, s1
					    mul_pp r0.x, r0.x, r2.x
					    mul_pp r0.xyz, r0.x, c10
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c14.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c15.x, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c14.y
					    max_pp r1.y, r2.w, c14.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c14.y
					    max_pp r1.z, r0.w, c14.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c11.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c14.x
					    mad_pp r0.w, r0.w, r1.w, c14.x
					    mul r1.w, r0.w, c15.z
					    mad r0.w, r1.w, r0.w, c15.w
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c14.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c14.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c15.y
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c16.y, c16.z
					    mul_pp r0.w, r0.w, c16.y
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c16.w, r2.x
					    abs r2.x, c9.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s2
					    mov r4, c8
					    mad_pp r3.yzw, r2.xxyz, c13.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c13
					    mad_pp r3.yzw, c12.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c14.y, c14.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c14.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c14.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c16.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c14.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c14.x
					    add_pp r1.y, -r3.x, c14.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c14.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c12.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r0, r3.yzww
					    mul r0.w, c7.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c14.x
					
					// approximately 108 instruction slots used (3 texture, 105 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb0 = u_xlat1.x<u_xlat0.x;
					    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb0 = u_xlat1.x<u_xlat0.x;
					    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_FogParams                c7       1
					//   unity_ColorSpaceDielectricSpec c8       1
					//   unity_ColorSpaceLuminance      c9       1
					//   _LightColor0                   c10      1
					//   _Glossiness                    c11      1
					//   _Metallic                      c12      1
					//   _Color                         c13      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c14, 1, 0, 0.970000029, 0.00100000005
					    def c15, 31.622776, 9.99999975e-006, 3.14159274, 1.00000001e-007
					    def c16, -0.5, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    mad r0, v2.xyzx, c14.xxxy, c14.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp3 r0.x, r1, r1
					    texld r1, r1, s1
					    texld r0, r0.x, s2
					    mul r0.x, r1.w, r0.x
					    dp3 r0.y, v3, v3
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.w
					    texld r1, v3, s0
					    mad r0.y, r0.y, -c14.z, r1.x
					    mov r1.x, c14.x
					    cmp_pp r0.y, r0.y, r1.x, c6.x
					    mul_pp r0.x, r0.y, r0.x
					    mul_pp r0.xyz, r0.x, c10
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c14.w
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c15.x, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c14.y
					    max_pp r1.y, r2.w, c14.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c14.y
					    max_pp r1.z, r0.w, c14.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c11.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c14.x
					    mad_pp r0.w, r0.w, r1.w, c14.x
					    mul r1.w, r0.w, c15.z
					    mad r0.w, r1.w, r0.w, c15.w
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c14.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c14.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c15.y
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c16.y, c16.z
					    mul_pp r0.w, r0.w, c16.y
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c16.w, r2.x
					    abs r2.x, c9.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s3
					    mov r4, c8
					    mad_pp r3.yzw, r2.xxyz, c13.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c13
					    mad_pp r3.yzw, c12.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c14.y, c14.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c14.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c14.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c16.x
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c14.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c14.x
					    add_pp r1.y, -r3.x, c14.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c14.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c12.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r0, r3.yzww
					    mul r0.w, c7.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c14.x
					
					// approximately 110 instruction slots used (4 texture, 106 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat6 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = u_xlat6 * _LightPositionRange.w;
					    u_xlat6 = u_xlat6 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb6 = u_xlat1.x<u_xlat6;
					    u_xlat6 = (u_xlatb6) ? _LightShadowData.x : 1.0;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat0.xyz);
					    u_xlat0 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat6 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat6 = u_xlat6 * _LightPositionRange.w;
					    u_xlat6 = u_xlat6 * 0.970000029;
					    u_xlat1 = texture(_ShadowMapTexture, vs_TEXCOORD3.xyz);
					    u_xlatb6 = u_xlat1.x<u_xlat6;
					    u_xlat6 = (u_xlatb6) ? _LightShadowData.x : 1.0;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat1.x = u_xlat1.w + u_xlat1.w;
					    u_xlat1.x = u_xlat1.w * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowOffsets[4];
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   _ShadowOffsets                 c0       4
					//   unity_WorldToLight             c4       4
					//   _WorldSpaceCameraPos           c8       1
					//   _WorldSpaceLightPos0           c9       1
					//   _LightShadowData               c10      1
					//   unity_FogParams                c11      1
					//   unity_ColorSpaceDielectricSpec c12      1
					//   unity_ColorSpaceLuminance      c13      1
					//   _LightColor0                   c14      1
					//   _Glossiness                    c15      1
					//   _Metallic                      c16      1
					//   _Color                         c17      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c18, 1, 0, 0.5, 0.25
					    def c19, 0.00100000005, 31.622776, 9.99999975e-006, 3.14159274
					    def c20, 1.00000001e-007, 0.785398185, 9.99999975e-005, 0.00999999978
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.x, c18.x
					    rcp r0.y, v3.w
					    mad r1, v3, r0.y, c0
					    texldp_pp r1, r1, s0
					    mad r2, v3, r0.y, c1
					    texldp_pp r2, r2, s0
					    mov_pp r1.y, r2.x
					    mad r2, v3, r0.y, c2
					    mad r3, v3, r0.y, c3
					    texldp_pp r3, r3, s0
					    mov_pp r1.w, r3.x
					    texldp_pp r2, r2, s0
					    mov_pp r1.z, r2.x
					    lrp_pp r2, r1, r0.x, c10.x
					    dp4_pp r0.y, r2, c18.w
					    mad r1, v2.xyzx, c18.xxxy, c18.yyyx
					    dp4 r0.z, c7, r1
					    rcp r0.z, r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    mad r0.zw, r2.xyxy, r0.z, c18.z
					    dp3 r1.x, r2, r2
					    texld_pp r1, r1.x, s2
					    texld_pp r3, r0.zwzw, s1
					    mul r0.z, r1.x, r3.w
					    cmp r0.z, -r2.z, c18.y, r0.z
					    mul_pp r0.y, r0.y, r0.z
					    mul_pp r0.yzw, r0.y, c14.xxyz
					    add r1.xyz, c8, -v2
					    nrm_pp r2.xyz, r1
					    add r1.xyz, c9, -v2
					    dp3 r1.w, r1, r1
					    rsq r1.w, r1.w
					    mad_pp r3.xyz, r1, r1.w, r2
					    mul_pp r1.xyz, r1.w, r1
					    dp3_pp r1.w, r3, r3
					    add r2.w, -r1.w, c19.x
					    rsq_pp r1.w, r1.w
					    cmp_pp r1.w, r2.w, c19.y, r1.w
					    mul_pp r3.xyz, r1.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r1.w, r4, r3
					    dp3_pp r2.w, r1, r3
					    dp3_pp r1.x, v1, r1
					    max_pp r3.x, r1.x, c18.y
					    max_pp r1.x, r2.w, c18.y
					    dp3_pp r1.y, r4, r2
					    max_pp r2.x, r1.y, c18.y
					    max_pp r2.y, r1.w, c18.y
					    mul r1.y, r2.y, r2.y
					    add_pp r0.x, r0.x, -c15.x
					    mul_pp r1.z, r0.x, r0.x
					    mad r1.w, r1.z, r1.z, -c18.x
					    mad_pp r1.y, r1.y, r1.w, c18.x
					    mul r1.w, r1.y, c19.w
					    mad r1.y, r1.w, r1.y, c20.x
					    rcp r1.y, r1.y
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.w
					    mad_pp r1.w, r0.x, -r0.x, c18.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c18.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c19.z
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r1.y, r1.y, r1.z
					    mad r1.z, r1.y, -c20.y, c20.z
					    mul_pp r1.y, r1.y, c20.y
					    rsq r2.x, r1.y
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c20.w, r2.x
					    abs r2.x, c13.w
					    cmp_pp r1.y, -r2.x, r1.z, r1.y
					    mul_pp r1.y, r3.x, r1.y
					    texld r2, v0, s3
					    mov r4, c12
					    mad_pp r3.yzw, r2.xxyz, c17.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c17
					    mad_pp r3.yzw, c16.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c18.y, c18.x
					    mul_pp r1.z, r1.z, r1.y
					    cmp_pp r1.y, r1.y, r1.z, c18.y
					    mul_pp r4.xyz, r0.yzww, r1.y
					    add_pp r1.y, -r1.x, c18.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    lrp_pp r5.xyz, r1.y, c18.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r1.y, r1.w, r1.w
					    mul_pp r1.y, r1.y, r1.y
					    add_pp r1.z, r1.x, r1.x
					    mul_pp r1.xy, r1.xwzw, r1.zyzw
					    mad_pp r0.x, r1.x, r0.x, -c18.z
					    mad_pp r1.x, r0.x, r1.y, c18.x
					    add_pp r1.y, -r3.x, c18.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r0.x, r0.x, r1.y, c18.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r3.x, r0.x
					    mul_pp r0.xyz, r0.x, r0.yzww
					    mad_pp r0.w, c16.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r0, r3.yzww
					    mul r0.w, c11.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c18.x
					
					// approximately 120 instruction slots used (7 texture, 113 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_12;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat1.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[1].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * vec4(u_xlat6) + _LightShadowData.xxxx;
					    u_xlat6 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						vec4 _ShadowOffsets;
						vec4 unused_0_7[3];
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_12;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * unity_WorldToLight[1];
					    u_xlat0 = unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlatb18 = 0.0<u_xlat0.z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat2 = texture(_LightTextureB0, u_xlat0.xx);
					    u_xlat0.x = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat1.w * u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat1.xyz = vs_TEXCOORD3.xyz / vs_TEXCOORD3.www;
					    u_xlat2.xyz = u_xlat1.xyz + _ShadowOffsets.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[0].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat1.xyz + unused_0_7[1].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unused_0_7[2].xyz;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat2.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat2.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat1 = u_xlat2 * vec4(u_xlat6) + _LightShadowData.xxxx;
					    u_xlat6 = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_FogParams                c7       1
					//   unity_ColorSpaceDielectricSpec c8       1
					//   unity_ColorSpaceLuminance      c9       1
					//   _LightColor0                   c10      1
					//   _Glossiness                    c11      1
					//   _Metallic                      c12      1
					//   _Color                         c13      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c14, 0.970000029, 0.25, 0.00100000005, 31.622776
					    def c15, 1, 0, 0.0078125, -0.0078125
					    def c16, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c17, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dp3 r0.x, v3, v3
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c5.w
					    add r0.yzw, c15.z, v3.xxyz
					    texld r1, r0.yzww, s0
					    add r0.yzw, c15.xwwz, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.y, r2.x
					    add r0.yzw, c15.xwzw, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.z, r2.x
					    add r0.yzw, c15.xzww, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.w, r2.x
					    mad r0, r0.x, -c14.x, r1
					    mov r1.x, c15.x
					    cmp_pp r0, r0, r1.x, c6.x
					    dp4_pp r0.x, r0, c14.y
					    mad r2, v2.xyzx, c15.xxxy, c15.yyyx
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp3 r0.y, r3, r3
					    texld r2, r0.y, s1
					    mul_pp r0.x, r0.x, r2.x
					    mul_pp r0.xyz, r0.x, c10
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c14.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c14.w, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c15.y
					    max_pp r1.y, r2.w, c15.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c15.y
					    max_pp r1.z, r0.w, c15.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c11.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c15.x
					    mad_pp r0.w, r0.w, r1.w, c15.x
					    mul r1.w, r0.w, c16.y
					    mad r0.w, r1.w, r0.w, c16.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c15.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c15.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c16.x
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c17.x, c17.y
					    mul_pp r0.w, r0.w, c17.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c17.z, r2.x
					    abs r2.x, c9.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s2
					    mov r4, c8
					    mad_pp r3.yzw, r2.xxyz, c13.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c13
					    mad_pp r3.yzw, c12.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c15.y, c15.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c15.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c15.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c16.w
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c15.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c15.x
					    add_pp r1.y, -r3.x, c15.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c15.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c12.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r0, r3.yzww
					    mul r0.w, c7.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c15.x
					
					// approximately 119 instruction slots used (6 texture, 113 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   float4 _LightColor0;
					//   float4 _LightPositionRange;
					//   float4 _LightShadowData;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   samplerCUBE _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_WorldToLight             c0       3
					//   _WorldSpaceCameraPos           c3       1
					//   _WorldSpaceLightPos0           c4       1
					//   _LightPositionRange            c5       1
					//   _LightShadowData               c6       1
					//   unity_FogParams                c7       1
					//   unity_ColorSpaceDielectricSpec c8       1
					//   unity_ColorSpaceLuminance      c9       1
					//   _LightColor0                   c10      1
					//   _Glossiness                    c11      1
					//   _Metallic                      c12      1
					//   _Color                         c13      1
					//   _ShadowMapTexture              s0       1
					//   _LightTexture0                 s1       1
					//   _LightTextureB0                s2       1
					//   _MainTex                       s3       1
					//
					
					    ps_3_0
					    def c14, 0.970000029, 0.25, 0.00100000005, 31.622776
					    def c15, 1, 0, 0.0078125, -0.0078125
					    def c16, 9.99999975e-006, 3.14159274, 1.00000001e-007, -0.5
					    def c17, 0.785398185, 9.99999975e-005, 0.00999999978, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.x
					    dcl_cube s0
					    dcl_cube s1
					    dcl_2d s2
					    dcl_2d s3
					    dp3 r0.x, v3, v3
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, c5.w
					    add r0.yzw, c15.z, v3.xxyz
					    texld r1, r0.yzww, s0
					    add r0.yzw, c15.xwwz, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.y, r2.x
					    add r0.yzw, c15.xwzw, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.z, r2.x
					    add r0.yzw, c15.xzww, v3.xxyz
					    texld r2, r0.yzww, s0
					    mov r1.w, r2.x
					    mad r0, r0.x, -c14.x, r1
					    mov r1.x, c15.x
					    cmp_pp r0, r0, r1.x, c6.x
					    dp4_pp r0.x, r0, c14.y
					    mad r2, v2.xyzx, c15.xxxy, c15.yyyx
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp3 r0.y, r3, r3
					    texld r2, r3, s1
					    texld r3, r0.y, s2
					    mul r0.y, r2.w, r3.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.xyz, r0.x, c10
					    add r1.yzw, c3.xxyz, -v2.xxyz
					    nrm_pp r2.xyz, r1.yzww
					    add r1.yzw, c4.xxyz, -v2.xxyz
					    dp3 r0.w, r1.yzww, r1.yzww
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r1.yzww, r0.w, r2
					    mul_pp r1.yzw, r0.w, r1
					    dp3_pp r0.w, r3, r3
					    add r2.w, -r0.w, c14.z
					    rsq_pp r0.w, r0.w
					    cmp_pp r0.w, r2.w, c14.w, r0.w
					    mul_pp r3.xyz, r0.w, r3
					    nrm_pp r4.xyz, v1
					    dp3_pp r0.w, r4, r3
					    dp3_pp r2.w, r1.yzww, r3
					    dp3_pp r1.y, v1, r1.yzww
					    max_pp r3.x, r1.y, c15.y
					    max_pp r1.y, r2.w, c15.y
					    dp3_pp r1.z, r4, r2
					    max_pp r2.x, r1.z, c15.y
					    max_pp r1.z, r0.w, c15.y
					    mul r0.w, r1.z, r1.z
					    add_pp r1.x, r1.x, -c11.x
					    mul_pp r1.z, r1.x, r1.x
					    mad r1.w, r1.z, r1.z, -c15.x
					    mad_pp r0.w, r0.w, r1.w, c15.x
					    mul r1.w, r0.w, c16.y
					    mad r0.w, r1.w, r0.w, c16.z
					    rcp r0.w, r0.w
					    mul_pp r1.w, r1.z, r1.z
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r1.x, -r1.x, c15.x
					    mad_pp r2.y, r2.x, r1.w, r1.z
					    mad_pp r1.z, r3.x, r1.w, r1.z
					    mul_pp r1.z, r1.z, r2.x
					    add_pp r1.w, -r2.x, c15.x
					    mad r1.z, r3.x, r2.y, r1.z
					    add r1.z, r1.z, c16.x
					    rcp r1.z, r1.z
					    add_pp r1.z, r1.z, r1.z
					    mul r0.w, r0.w, r1.z
					    mad r1.z, r0.w, -c17.x, c17.y
					    mul_pp r0.w, r0.w, c17.x
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.z, r1.z, c17.z, r2.x
					    abs r2.x, c9.w
					    cmp_pp r0.w, -r2.x, r1.z, r0.w
					    mul_pp r0.w, r3.x, r0.w
					    texld r2, v0, s3
					    mov r4, c8
					    mad_pp r3.yzw, r2.xxyz, c13.xxyz, -r4.xxyz
					    mul_pp r2.xyz, r2, c13
					    mad_pp r3.yzw, c12.x, r3, r4.xxyz
					    dp3_pp r1.z, r3.yzww, r3.yzww
					    cmp r1.z, -r1.z, c15.y, c15.x
					    mul_pp r1.z, r0.w, r1.z
					    cmp_pp r0.w, r0.w, r1.z, c15.y
					    mul_pp r4.xyz, r0, r0.w
					    add_pp r0.w, -r1.y, c15.x
					    mul_pp r1.y, r1.y, r1.y
					    dp2add_pp r1.x, r1.y, r1.x, c16.w
					    mul_pp r1.y, r0.w, r0.w
					    mul_pp r1.y, r1.y, r1.y
					    mul_pp r0.w, r0.w, r1.y
					    lrp_pp r5.xyz, r0.w, c15.x, r3.yzww
					    mul_pp r3.yzw, r4.xxyz, r5.xxyz
					    mul_pp r0.w, r1.w, r1.w
					    mul_pp r0.w, r0.w, r0.w
					    mul_pp r0.w, r1.w, r0.w
					    mad_pp r0.w, r1.x, r0.w, c15.x
					    add_pp r1.y, -r3.x, c15.x
					    mul_pp r1.z, r1.y, r1.y
					    mul_pp r1.z, r1.z, r1.z
					    mul_pp r1.y, r1.y, r1.z
					    mad_pp r1.x, r1.x, r1.y, c15.x
					    mul_pp r0.w, r0.w, r1.x
					    mul_pp r0.w, r3.x, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mad_pp r0.w, c12.x, -r4.w, r4.w
					    mul_pp r1.xyz, r0.w, r2
					    mad_pp r0.xyz, r1, r0, r3.yzww
					    mul r0.w, c7.x, v4.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c15.x
					
					// approximately 121 instruction slots used (7 texture, 114 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_2_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat2.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[2];
						vec4 _LightColor0;
						vec4 unused_0_5;
						mat4x4 unity_WorldToLight;
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_10;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[24];
						vec4 _LightShadowData;
						vec4 unused_2_2;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[64];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_5_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  samplerCube _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					vec3 u_xlat8;
					bool u_xlatb8;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat14;
					float u_xlat18;
					int u_xlati18;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = u_xlat0.x * 0.970000029;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat1 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.y = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.z = u_xlat2.x;
					    u_xlat6.xyz = vs_TEXCOORD3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat6.xyz);
					    u_xlat1.w = u_xlat2.x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.xyz = vs_TEXCOORD2.yyy * unity_WorldToLight[1].xyz;
					    u_xlat6.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat6.xyz;
					    u_xlat6.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat6.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat6.x = u_xlat2.w * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlati18 = unity_StereoEyeIndex;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat4.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;
					    u_xlat18 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat7 = (-_Glossiness) + 1.0;
					    u_xlat13 = u_xlat7 * u_xlat7;
					    u_xlat8.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat8.x + 1.0;
					    u_xlat8.x = u_xlat18 * 3.14159274;
					    u_xlat18 = u_xlat8.x * u_xlat18 + 1.00000001e-07;
					    u_xlat8.x = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat8.x / u_xlat18;
					    u_xlat8.x = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat2.x * u_xlat8.x + u_xlat13;
					    u_xlat13 = u_xlat13 * u_xlat1.x;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat2.x * u_xlat14 + u_xlat13;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 2.0 / u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat18 = u_xlat18 * 0.785398185;
					    u_xlat13 = max(u_xlat18, 9.99999975e-05);
					    u_xlat13 = sqrt(u_xlat13);
					    u_xlatb8 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat18 = (u_xlatb8) ? u_xlat13 : u_xlat18;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8.xyz = u_xlat3.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat8.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat13 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlatb13 = u_xlat13!=0.0;
					    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-u_xlat1.w) + 1.0;
					    u_xlat13 = u_xlat1.w * u_xlat1.w;
					    u_xlat7 = dot(vec2(u_xlat13), vec2(u_xlat7));
					    u_xlat7 = u_xlat7 + -0.5;
					    u_xlat13 = u_xlat18 * u_xlat18;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat18 = u_xlat18 * u_xlat13;
					    u_xlat5.xyz = (-u_xlat8.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat8.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat1.x * u_xlat1.x;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat1.x * u_xlat18;
					    u_xlat18 = u_xlat7 * u_xlat18 + 1.0;
					    u_xlat1.x = (-u_xlat2.x) + 1.0;
					    u_xlat13 = u_xlat1.x * u_xlat1.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat7 * u_xlat1.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz + u_xlat8.xyz;
					    u_xlat18 = vs_TEXCOORD4 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 157749
Program "vp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_SHBr          c10      1
					//   unity_SHBg          c11      1
					//   unity_SHBb          c12      1
					//   unity_SHC           c13      1
					//   _MainTex_ST         c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.xyz
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c10, r2
					    dp4 r1.y, c11, r2
					    dp4 r1.z, c12, r2
					    mad o5.xyz, c13, r0.x, r1
					    mov o4, c15.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   _MainTex_ST                   c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.xy, v3, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o3.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r1.x, c16.x
					    add r0.y, r1.x, -c13.w
					    mul o5.w, r0.y, -r0.x
					    mov o4.zw, c16.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   unity_DynamicLightmapST       c15      1
					//   _MainTex_ST                   c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c16, c16.zwzw
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.zw, v4.xyxy, c15.xyxy, c15
					    mad o4.xy, v3, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o3.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r1.x, c17.x
					    add r0.y, r1.x, -c13.w
					    mul o5.w, r0.y, -r0.x
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _WorldSpaceCameraPos    c10      1
					//   unity_DynamicLightmapST c11      1
					//   _MainTex_ST             c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, -r0, c10
					    mov o3.xyz, r0
					    mad o5.zw, v3.xyxy, c11.xyxy, c11
					    mov o5.xy, c13.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   unity_SHBr          c10      1
					//   unity_SHBg          c11      1
					//   unity_SHBb          c12      1
					//   unity_SHC           c13      1
					//   _MainTex_ST         c14      1
					//
					
					    vs_3_0
					    def c15, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5.xyz
					    mad r0, v0.xyzx, c15.xxxy, c15.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c14, c14.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    mov o2.xyz, r1
					    dp4 r1.x, c10, r2
					    dp4 r1.y, c11, r2
					    dp4 r1.z, c12, r2
					    mad o5.xyz, c13, r0.x, r1
					    mov o4, c15.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat6 = u_xlat0.y * u_xlat0.y;
					    u_xlat6 = u_xlat0.x * u_xlat0.x + (-u_xlat6);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat6) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat9 = u_xlat0.y * u_xlat0.y;
					    u_xlat9 = u_xlat0.x * u_xlat0.x + (-u_xlat9);
					    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat0.x = dot(unity_SHBr, u_xlat1);
					    u_xlat0.y = dot(unity_SHBg, u_xlat1);
					    u_xlat0.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat9) + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   unity_DynamicLightmapST c10      1
					//   _MainTex_ST             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c11, c11.zwzw
					    dp4 o3.x, c4, v0
					    dp4 o3.y, c5, v0
					    dp4 o3.z, c6, v0
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mad o4.zw, v3.xyxy, c10.xyxy, c10
					    mov o4.xy, c12.y
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_2_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   _MainTex_ST                   c15      1
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.xy, v3, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o3.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r1.x, c16.x
					    add r0.y, r1.x, -c13.w
					    mul o5.w, r0.y, -r0.x
					    mov o4.zw, c16.y
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   glstate_matrix_mvp            c0       4
					//   glstate_matrix_modelview0     c4       3
					//   unity_ObjectToWorld           c7       3
					//   unity_WorldToObject           c10      3
					//   unity_ShadowFadeCenterAndType c13      1
					//   unity_LightmapST              c14      1
					//   unity_DynamicLightmapST       c15      1
					//   _MainTex_ST                   c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4
					    dcl_texcoord5 o5
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v2, c16, c16.zwzw
					    mul r0.yzw, c11.xxyz, v1.y
					    mad r0.yzw, c10.xxyz, v1.x, r0
					    mad r0.yzw, c12.xxyz, v1.z, r0
					    dp3 r1.x, r0.yzww, r0.yzww
					    rsq r1.x, r1.x
					    mul o2.xyz, r0.yzww, r1.x
					    mad o4.zw, v4.xyxy, c15.xyxy, c15
					    mad o4.xy, v3, c14, c14.zwzw
					    dp4 r1.x, c7, v0
					    dp4 r1.y, c8, v0
					    dp4 r1.z, c9, v0
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    mov o3.xyz, r1
					    mul o5.xyz, r0.yzww, c13.w
					    mov r1.x, c17.x
					    add r0.y, r1.x, -c13.w
					    mul o5.w, r0.y, -r0.x
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_2_2[4];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat2 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat2 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[25];
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_3_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_3_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_3_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					int u_xlati12;
					float u_xlat14;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati12 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati12 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati12] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati12 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati12 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat2.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat2.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat2.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat3.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat3.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat3.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat3.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat3.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat3.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    vs_TEXCOORD1.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * unity_ShadowFadeCenterAndType.www;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.x = u_xlat1.y * unity_StereoMatrixV[(u_xlati12 + 1)].z;
					    u_xlat0.x = unity_StereoMatrixV[u_xlati12].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 2)].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = unity_StereoMatrixV[(u_xlati12 + 3)].z * u_xlat1.w + u_xlat0.x;
					    u_xlat4 = (-unity_ShadowFadeCenterAndType.w) + 1.0;
					    vs_TEXCOORD5.w = u_xlat4 * (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_WorldToObject     c7       3
					//   _WorldSpaceCameraPos    c10      1
					//   unity_DynamicLightmapST c11      1
					//   _MainTex_ST             c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    mad o1.xy, v2, c12, c12.zwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, c7, v1.x, r0
					    mad r0.xyz, c9, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o4.xyz, -r0, c10
					    mov o3.xyz, r0
					    mad o5.zw, v3.xyxy, c11.xyxy, c11
					    mov o5.xy, c13.y
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_3_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat0.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat0.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat1.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat1.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat1.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat1.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat1.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[36];
						vec3 unity_StereoWorldSpaceCameraPos;
						vec4 unused_2_4[3];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unused_4_0;
						vec4 unity_DynamicLightmapST;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					int u_xlati9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati9 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati9] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati9 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati9 + 3)] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = in_NORMAL0.x * unity_WorldToObject[0].x;
					    u_xlat1.y = in_NORMAL0.x * unity_WorldToObject[1].x;
					    u_xlat1.z = in_NORMAL0.x * unity_WorldToObject[2].x;
					    u_xlat2.x = in_NORMAL0.y * unity_WorldToObject[0].y;
					    u_xlat2.y = in_NORMAL0.y * unity_WorldToObject[1].y;
					    u_xlat2.z = in_NORMAL0.y * unity_WorldToObject[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * unity_WorldToObject[0].z;
					    u_xlat2.y = in_NORMAL0.z * unity_WorldToObject[1].z;
					    u_xlat2.z = in_NORMAL0.z * unity_WorldToObject[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlati9 = unity_StereoEyeIndex;
					    vs_TEXCOORD3.xyz = (-u_xlat0.xyz) + unity_StereoWorldSpaceCameraPos.xyz;
					    vs_TEXCOORD4.zw = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Glossiness                    c5       1
					//   _Metallic                      c6       1
					//   _Color                         c7       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    def c9, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c7, -r1
					    mul_pp r0.xyz, r0, c7
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r2, v1.xyzx, c9.xxxy, c9.yyyx
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c9.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c9.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c8.x, c8.y
					    max_pp r3.xyz, r1, c9.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r1.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c9.x
					    mov_pp oC1.w, c5.x
					    mad_pp oC2, v1.xyzx, c9.wwwy, c9.wwwx
					    mov_pp oC3.w, c9.x
					
					// approximately 33 instruction slots used (1 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat8;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat5);
					        u_xlat3.y = dot(u_xlat4, u_xlat5);
					        u_xlat3.z = dot(u_xlat2, u_xlat5);
					    } else {
					        u_xlat2.xyz = vs_TEXCOORD1.xyz;
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat2.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat1.xyz));
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat8;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat5);
					        u_xlat3.y = dot(u_xlat4, u_xlat5);
					        u_xlat3.z = dot(u_xlat2, u_xlat5);
					    } else {
					        u_xlat2.xyz = vs_TEXCOORD1.xyz;
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat2.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    SV_Target3.xyz = exp2((-u_xlat1.xyz));
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Glossiness                    c2       1
					//   _Metallic                      c3       1
					//   _Color                         c4       1
					//   unity_DynamicLightmap          s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c5, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mov r1, c0
					    mad_pp r2.xyz, r0, c4, -r1
					    mul_pp r0.xyz, r0, c4
					    mad_pp oC1.xyz, c3.x, r2, r1
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v2.zwzw, s0
					    mul_pp r0.w, r1.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mul_pp r1.xyz, r0, r2
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c5.x
					    mov_pp oC1.w, c2.x
					    mad_pp oC2, v1.xyzx, c5.yyyz, c5.yyyx
					    mov_pp oC3.w, c5.x
					
					// approximately 26 instruction slots used (2 texture, 24 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   _Glossiness                    c2       1
					//   _Metallic                      c3       1
					//   _Color                         c4       1
					//   unity_Lightmap                 s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c5, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mov r1, c0
					    mad_pp r2.xyz, r0, c4, -r1
					    mul_pp r0.xyz, r0, c4
					    mad_pp oC1.xyz, c3.x, r2, r1
					    texld_pp r2, v2, s0
					    pow_pp r0.w, r2.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r2, r0.w
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r1.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c5.x
					    mov_pp oC1.w, c2.x
					    mad_pp oC2, v1.xyzx, c5.yyyz, c5.yyyx
					    mov_pp oC3.w, c5.x
					
					// approximately 22 instruction slots used (2 texture, 20 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   unity_DynamicLightmap_HDR      c2       1
					//   _Glossiness                    c3       1
					//   _Metallic                      c4       1
					//   _Color                         c5       1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s2
					    mov r1, c0
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c4.x, r2, r1
					    texld_pp r2, v2.zwzw, s1
					    mul_pp r0.w, r2.w, c2.x
					    mul_pp r1.xyz, r2, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c2.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r3, v2, s0
					    pow_pp r0.w, r3.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mad_pp r1.xyz, r0.w, r3, r2
					    mad_pp r0.w, c4.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r1.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c6.x
					    mov_pp oC1.w, c3.x
					    mad_pp oC2, v1.xyzx, c6.yyyz, c6.yyyx
					    mov_pp oC3.w, c6.x
					
					// approximately 32 instruction slots used (3 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Glossiness                    c2       1
					//   _Metallic                      c3       1
					//   _Color                         c4       1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 9.99999975e-005, 10000
					    def c6, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s2
					    mov r1, c0
					    mad_pp r2.xyz, r0, c4, -r1
					    mul_pp r0.xyz, r0, c4
					    mad_pp oC1.xyz, c3.x, r2, r1
					    texld_pp r2, v2.zwzw, s0
					    mul_pp r0.w, r2.w, c1.x
					    mul_pp r1.xyz, r2, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r3, v2.zwzw, s1
					    add_pp r1.xyz, r3, c5.x
					    dp3_pp r0.w, v1, r1
					    add_pp r0.w, r0.w, c5.y
					    mul_pp r1.xyz, r0.w, r2
					    add r0.w, -r3.w, c5.z
					    rcp r2.x, r3.w
					    cmp r0.w, r0.w, c5.w, r2.x
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r1.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c6.x
					    mov_pp oC1.w, c2.x
					    mad_pp oC2, v1.xyzx, c6.yyyz, c6.yyyx
					    mov_pp oC3.w, c6.x
					
					// approximately 35 instruction slots used (3 texture, 32 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   float4 unity_ColorSpaceLuminance;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_SHAr                     c0       1
					//   unity_SHAg                     c1       1
					//   unity_SHAb                     c2       1
					//   unity_ColorSpaceDielectricSpec c3       1
					//   unity_ColorSpaceLuminance      c4       1
					//   _Glossiness                    c5       1
					//   _Metallic                      c6       1
					//   _Color                         c7       1
					//   _MainTex                       s0       1
					//
					
					    ps_3_0
					    def c8, 1.05499995, -0.0549999997, 0, 0
					    def c9, 1, 0, 0.416666657, 0.5
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord5_pp v2.xyz
					    dcl_2d s0
					    texld r0, v0, s0
					    mov r1, c3
					    mad_pp r2.xyz, r0, c7, -r1
					    mul_pp r0.xyz, r0, c7
					    mad_pp oC1.xyz, c6.x, r2, r1
					    mad_pp r2, v1.xyzx, c9.xxxy, c9.yyyx
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    add_pp r1.xyz, r1, v2
					    max_pp r2.xyz, r1, c9.y
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c9.z
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    mad_pp r1.xyz, r3, c8.x, c8.y
					    max_pp r3.xyz, r1, c9.y
					    abs r0.w, c4.w
					    cmp_pp r1.xyz, -r0.w, r3, r2
					    mad_pp r0.w, c6.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c9.x
					    mov_pp oC1.w, c5.x
					    mad_pp oC2, v1.xyzx, c9.wwwy, c9.wwwx
					    mov_pp oC3.w, c9.x
					
					// approximately 30 instruction slots used (1 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat8;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat5);
					        u_xlat3.y = dot(u_xlat4, u_xlat5);
					        u_xlat3.z = dot(u_xlat2, u_xlat5);
					    } else {
					        u_xlat2.xyz = vs_TEXCOORD1.xyz;
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat2.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unity_ColorSpaceLuminance;
						vec4 unused_0_3[4];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_7[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat8;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb18){
					        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD2.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat18 = u_xlat2.y * 0.25;
					        u_xlat19 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat18 = max(u_xlat18, u_xlat19);
					        u_xlat2.x = min(u_xlat8, u_xlat18);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat5.xyz = vs_TEXCOORD1.xyz;
					        u_xlat5.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat5);
					        u_xlat3.y = dot(u_xlat4, u_xlat5);
					        u_xlat3.z = dot(u_xlat2, u_xlat5);
					    } else {
					        u_xlat2.xyz = vs_TEXCOORD1.xyz;
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlatb18 = unity_ColorSpaceLuminance.w==0.0;
					    u_xlat3.xyz = log2(u_xlat2.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Glossiness                    c2       1
					//   _Metallic                      c3       1
					//   _Color                         c4       1
					//   unity_DynamicLightmap          s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c5, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mov r1, c0
					    mad_pp r2.xyz, r0, c4, -r1
					    mul_pp r0.xyz, r0, c4
					    mad_pp oC1.xyz, c3.x, r2, r1
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    texld_pp r1, v2.zwzw, s0
					    mul_pp r0.w, r1.w, c1.x
					    mul_pp r1.xyz, r1, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mul_pp oC3.xyz, r0, r2
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c5.x
					    mov_pp oC1.w, c2.x
					    mad_pp oC2, v1.xyzx, c5.yyyz, c5.yyyx
					    mov_pp oC3.w, c5.x
					
					// approximately 23 instruction slots used (2 texture, 21 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat6 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   _Glossiness                    c2       1
					//   _Metallic                      c3       1
					//   _Color                         c4       1
					//   unity_Lightmap                 s0       1
					//   _MainTex                       s1       1
					//
					
					    ps_3_0
					    def c5, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mov r1, c0
					    mad_pp r2.xyz, r0, c4, -r1
					    mul_pp r0.xyz, r0, c4
					    mad_pp oC1.xyz, c3.x, r2, r1
					    texld_pp r2, v2, s0
					    pow_pp r0.w, r2.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mul_pp r1.xyz, r2, r0.w
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c5.x
					    mov_pp oC1.w, c2.x
					    mad_pp oC2, v1.xyzx, c5.yyyz, c5.yyyx
					    mov_pp oC3.w, c5.x
					
					// approximately 19 instruction slots used (2 texture, 17 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unused_0_4[3];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat6 = log2(u_xlat1.w);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.y;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat6);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//   sampler2D unity_Lightmap;
					//   float4 unity_Lightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_Lightmap_HDR             c1       1
					//   unity_DynamicLightmap_HDR      c2       1
					//   _Glossiness                    c3       1
					//   _Metallic                      c4       1
					//   _Color                         c5       1
					//   unity_Lightmap                 s0       1
					//   unity_DynamicLightmap          s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c6, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s2
					    mov r1, c0
					    mad_pp r2.xyz, r0, c5, -r1
					    mul_pp r0.xyz, r0, c5
					    mad_pp oC1.xyz, c4.x, r2, r1
					    texld_pp r2, v2.zwzw, s1
					    mul_pp r0.w, r2.w, c2.x
					    mul_pp r1.xyz, r2, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c2.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r3, v2, s0
					    pow_pp r0.w, r3.w, c1.y
					    mul_pp r0.w, r0.w, c1.x
					    mad_pp r1.xyz, r0.w, r3, r2
					    mad_pp r0.w, c4.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c6.x
					    mov_pp oC1.w, c3.x
					    mad_pp oC2, v1.xyzx, c6.yyyz, c6.yyyx
					    mov_pp oC3.w, c6.x
					
					// approximately 29 instruction slots used (3 texture, 26 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_ON" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2;
						vec4 unity_Lightmap_HDR;
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_5[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_9[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_Lightmap;
					uniform  sampler2D unity_DynamicLightmap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_Lightmap, vs_TEXCOORD4.xy);
					    u_xlat9 = log2(u_xlat2.w);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.y;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_Lightmap_HDR.x;
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat2.xyz + u_xlat1.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Glossiness;
					//   sampler2D _MainTex;
					//   float _Metallic;
					//   float4 unity_ColorSpaceDielectricSpec;
					//   sampler2D unity_DynamicDirectionality;
					//   sampler2D unity_DynamicLightmap;
					//   float4 unity_DynamicLightmap_HDR;
					//
					//
					// Registers:
					//
					//   Name                           Reg   Size
					//   ------------------------------ ----- ----
					//   unity_ColorSpaceDielectricSpec c0       1
					//   unity_DynamicLightmap_HDR      c1       1
					//   _Glossiness                    c2       1
					//   _Metallic                      c3       1
					//   _Color                         c4       1
					//   unity_DynamicLightmap          s0       1
					//   unity_DynamicDirectionality    s1       1
					//   _MainTex                       s2       1
					//
					
					    ps_3_0
					    def c5, -0.5, 0.5, 9.99999975e-005, 10000
					    def c6, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord4 v2.zw
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s2
					    mov r1, c0
					    mad_pp r2.xyz, r0, c4, -r1
					    mul_pp r0.xyz, r0, c4
					    mad_pp oC1.xyz, c3.x, r2, r1
					    texld_pp r2, v2.zwzw, s0
					    mul_pp r0.w, r2.w, c1.x
					    mul_pp r1.xyz, r2, r0.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mul_pp r1.xyz, r2, c1.y
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    texld_pp r3, v2.zwzw, s1
					    add_pp r1.xyz, r3, c5.x
					    dp3_pp r0.w, v1, r1
					    add_pp r0.w, r0.w, c5.y
					    mul_pp r1.xyz, r0.w, r2
					    add r0.w, -r3.w, c5.z
					    rcp r2.x, r3.w
					    cmp r0.w, r0.w, c5.w, r2.x
					    mul_pp r1.xyz, r0.w, r1
					    mad_pp r0.w, c3.x, -r1.w, r1.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp oC3.xyz, r1, r0
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c6.x
					    mov_pp oC1.w, c2.x
					    mad_pp oC2, v1.xyzx, c6.yyyz, c6.yyyx
					    mov_pp oC3.w, c6.x
					
					// approximately 32 instruction slots used (3 texture, 29 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_ON" "UNITY_HDR_ON" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 unity_ColorSpaceDielectricSpec;
						vec4 unused_0_2[2];
						vec4 unity_DynamicLightmap_HDR;
						vec4 unused_0_4[2];
						float _Glossiness;
						float _Metallic;
						vec4 _Color;
						vec4 unused_0_8[2];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D unity_DynamicLightmap;
					uniform  sampler2D unity_DynamicDirectionality;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0.x = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = u_xlat1.xyz * _Color.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _Color.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
					    SV_Target1.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat1.xyz + unity_ColorSpaceDielectricSpec.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Glossiness;
					    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 1.0;
					    u_xlat1 = texture(unity_DynamicLightmap, vs_TEXCOORD4.zw);
					    u_xlat9 = u_xlat1.w * unity_DynamicLightmap_HDR.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat9);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * unity_DynamicLightmap_HDR.yyy;
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2 = texture(unity_DynamicDirectionality, vs_TEXCOORD4.zw);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat9 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat10 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat9);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.w = 1.0;
					    return;
					}"
}
}
 }
 Pass {
  Name "META"
  Tags { "LIGHTMODE"="Meta" "RenderType"="Opaque" }
  Cull Off
  GpuProgramID 252173
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   glstate_matrix_mvp      c0       4
					//   unity_ObjectToWorld     c4       3
					//   unity_LightmapST        c7       1
					//   unity_DynamicLightmapST c8       1
					//   unity_MetaVertexControl c9       1
					//   _MainTex_ST             c10      1
					//
					
					    vs_3_0
					    def c11, 0, 9.99999975e-005, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_texcoord2 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    slt r0.x, c11.x, v0.z
					    mul r0.z, r0.x, c11.y
					    mad r0.xy, v2, c7, c7.zwzw
					    lrp r1.xyz, c9.x, r0, v0
					    slt r0.x, c11.x, r1.z
					    mul r0.z, r0.x, c11.y
					    mad r0.xy, v3, c8, c8.zwzw
					    lrp r2.xyz, c9.y, r0, r1
					    mov r2.w, c11.z
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    mad o1.xy, v1, c10, c10.zwzw
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_3[6];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bool u_xlatb6;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb6 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb6 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_5_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb9 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb9 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler2D _MainTex;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Color                    c0       1
					//   unity_MetaFragmentControl c1       1
					//   unity_OneOverOutputBoost  c2       1
					//   unity_MaxOutputValue      c3       1
					//   _MainTex                  s0       1
					//
					
					    ps_3_0
					    def c4, 0, 0.0235294141, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov_sat r0.x, c2.x
					    texld r1, v0, s0
					    mul_pp r0.yzw, r1.xxyz, c0.xxyz
					    log r1.x, r0.y
					    log r1.y, r0.z
					    log r1.z, r0.w
					    mul r0.xyz, r0.x, r1
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    min_pp r0.xyz, c3.x, r1
					    mov r1.xy, c1
					    cmp_pp r0.xyz, -r1.x, c4.x, r0
					    mov r0.w, c1.x
					    cmp_pp oC0, -r1.y, r0, c4.xxxy
					
					// approximately 15 instruction slots used (1 texture, 14 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _Color;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat3 = unity_OneOverOutputBoost;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _Color;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat3 = unity_OneOverOutputBoost;
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat3);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
}
}
 }
}
Fallback "Diffuse"
}