Shader "FX/Glass/Stained BumpDistort" {
Properties {
 _BumpAmt ("Distortion", Range(0.000000,128.000000)) = 10.000000
 _MainTex ("Tint Color (RGB)", 2D) = "white" { }
 _BumpMap ("Normalmap", 2D) = "bump" { }
}
SubShader { 
 Tags { "QUEUE"="Transparent" "RenderType"="Opaque" }
 GrabPass {
  Name "BASE"
  Tags { "LIGHTMODE"="Always" }
 }
 Pass {
  Name "BASE"
  Tags { "LIGHTMODE"="Always" "QUEUE"="Transparent" "RenderType"="Opaque" }
  GpuProgramID 37032
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BumpMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _BumpMap_ST        c4       1
					//   _MainTex_ST        c5       1
					//
					
					    vs_3_0
					    def c6, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    dp4 r0.y, c1, v0
					    mov r1.y, -r0.y
					    dp4 r1.x, c0, v0
					    dp4 r0.w, c3, v0
					    add r1.yz, r0.w, r1.xxyw
					    mov o0.x, r1.x
					    mul o1.xy, r1.yzzw, c6.x
					    mad o2.xy, v1, c4, c4.zwzw
					    mad o3.xy, v1, c5, c5.zwzw
					    dp4 r0.z, c2, v0
					    mov o0.yzw, r0
					    mov o1.zw, r0
					
					// approximately 12 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _BumpMap_ST;
						vec4 _MainTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.0, -1.0) + u_xlat0.ww;
					    vs_TEXCOORD0.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _BumpMap_ST;
						vec4 _MainTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat0 = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.0, -1.0) + u_xlat0.ww;
					    vs_TEXCOORD0.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _BumpMap_ST;
						vec4 _MainTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.0, -1.0) + u_xlat0.ww;
					    vs_TEXCOORD0.zw = u_xlat0.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _BumpMap_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   unity_FogParams    c4       1
					//   _BumpMap_ST        c5       1
					//   _MainTex_ST        c6       1
					//
					
					    vs_3_0
					    def c7, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.x
					    dp4 r0.y, c1, v0
					    mov r1.y, -r0.y
					    dp4 r1.x, c0, v0
					    dp4 r0.w, c3, v0
					    add r1.yz, r0.w, r1.xxyw
					    mov o0.x, r1.x
					    mul o1.xy, r1.yzzw, c7.x
					    mad o2.xy, v1, c5, c5.zwzw
					    mad o3.xy, v1, c6, c6.zwzw
					    dp4 r0.z, c2, v0
					    mul r0.x, r0.z, c4.x
					    mul r0.x, r0.x, -r0.x
					    exp o4.x, r0.x
					    mov o0.yzw, r0
					    mov o1.zw, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _BumpMap_ST;
						vec4 _MainTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD3;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.0, -1.0) + u_xlat0.ww;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    vs_TEXCOORD0.zw = u_xlat0.zw;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD3 = exp2(u_xlat0.x);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _BumpMap_ST;
						vec4 _MainTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD3;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat1 = unity_ObjectToWorld[1].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat1 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[1].xxxx + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[1].zzzz + u_xlat1;
					    u_xlat1 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[1].wwww + u_xlat1;
					    u_xlat1 = u_xlat1 * in_POSITION0.yyyy;
					    u_xlat2 = unity_ObjectToWorld[0].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[0].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[0].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[0].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.xxxx + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[2].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[2].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[2].zzzz + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[2].wwww + u_xlat2;
					    u_xlat1 = u_xlat2 * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = unity_ObjectToWorld[3].yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * unity_ObjectToWorld[3].xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * unity_ObjectToWorld[3].zzzz + u_xlat2;
					    u_xlat0 = unity_StereoMatrixVP[(u_xlati0 + 3)] * unity_ObjectToWorld[3].wwww + u_xlat2;
					    u_xlat0 = u_xlat0 * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.0, -1.0) + u_xlat0.ww;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    vs_TEXCOORD0.zw = u_xlat0.zw;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD3 = exp2(u_xlat0.x);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _BumpMap_ST;
						vec4 _MainTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD3;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.0, -1.0) + u_xlat0.ww;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    vs_TEXCOORD0.zw = u_xlat0.zw;
					    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD3 = exp2(u_xlat0.x);
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BumpAmt;
					//   sampler2D _BumpMap;
					//   sampler2D _GrabTexture;
					//   float4 _GrabTexture_TexelSize;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _BumpAmt               c0       1
					//   _GrabTexture_TexelSize c1       1
					//   _GrabTexture           s0       1
					//   _BumpMap               s1       1
					//   _MainTex               s2       1
					//
					
					    ps_3_0
					    def c2, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v1, s1
					    mad_pp r0.xy, r0.wyzw, c2.x, c2.y
					    mul r0.xy, r0, c0.x
					    mul r0.xy, r0, c1
					    mad r0.xy, r0, v0.z, v0
					    mov r0.zw, v0
					    texldp_pp r0, r0, s0
					    texld_pp r1, v2, s2
					    mul_pp oC0, r0, r1
					
					// approximately 9 instruction slots used (3 texture, 6 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _BumpAmt;
						vec4 unused_0_2[2];
						vec4 _GrabTexture_TexelSize;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD1.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpAmt);
					    u_xlat0.xy = u_xlat0.xy * _GrabTexture_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_GrabTexture, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    SV_Target0 = u_xlat0 * u_xlat1;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _BumpAmt;
						vec4 unused_0_2[2];
						vec4 _GrabTexture_TexelSize;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[66];
						vec4 unity_StereoScaleOffset;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati4;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD1.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpAmt);
					    u_xlat0.xy = u_xlat0.xy * _GrabTexture_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.zz + vs_TEXCOORD0.xy;
					    u_xlati4 = unity_StereoEyeIndex;
					    u_xlat1.xy = vs_TEXCOORD0.ww * unity_StereoScaleOffset.zw;
					    u_xlat0.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_GrabTexture, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    SV_Target0 = u_xlat0 * u_xlat1;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _BumpAmt;
						vec4 unused_0_2[2];
						vec4 _GrabTexture_TexelSize;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD1.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpAmt);
					    u_xlat0.xy = u_xlat0.xy * _GrabTexture_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_GrabTexture, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    SV_Target0 = u_xlat0 * u_xlat1;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _BumpAmt;
					//   sampler2D _BumpMap;
					//   sampler2D _GrabTexture;
					//   float4 _GrabTexture_TexelSize;
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   unity_FogColor         c0       1
					//   _BumpAmt               c1       1
					//   _GrabTexture_TexelSize c2       1
					//   _GrabTexture           s0       1
					//   _BumpMap               s1       1
					//   _MainTex               s2       1
					//
					
					    ps_3_0
					    def c3, 2, -1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v1, s1
					    mad_pp r0.xy, r0.wyzw, c3.x, c3.y
					    mul r0.xy, r0, c1.x
					    mul r0.xy, r0, c2
					    mad r0.xy, r0, v0.z, v0
					    mov r0.zw, v0
					    texldp_pp r0, r0, s0
					    texld_pp r1, v2, s2
					    mad r0.xyz, r0, r1, -c0
					    mul_pp r0.w, r0.w, r1.w
					    mov_pp oC0.w, r0.w
					    mov_sat r0.w, v3.x
					    mad_pp oC0.xyz, r0.w, r0, c0
					
					// approximately 13 instruction slots used (3 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _BumpAmt;
						vec4 unused_0_2[2];
						vec4 _GrabTexture_TexelSize;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_1_1;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD1.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpAmt);
					    u_xlat0.xy = u_xlat0.xy * _GrabTexture_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_GrabTexture, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat6 = u_xlat0.w * u_xlat1.w;
					    SV_Target0.w = u_xlat6;
					    u_xlat6 = vs_TEXCOORD3;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _BumpAmt;
						vec4 unused_0_2[2];
						vec4 _GrabTexture_TexelSize;
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_1_0[66];
						vec4 unity_StereoScaleOffset;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD1.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpAmt);
					    u_xlat0.xy = u_xlat0.xy * _GrabTexture_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.zz + vs_TEXCOORD0.xy;
					    u_xlati4 = unity_StereoEyeIndex;
					    u_xlat1.xy = vs_TEXCOORD0.ww * unity_StereoScaleOffset.zw;
					    u_xlat0.xy = u_xlat0.xy * unity_StereoScaleOffset.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_GrabTexture, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat6 = u_xlat0.w * u_xlat1.w;
					    SV_Target0.w = u_xlat6;
					    u_xlat6 = vs_TEXCOORD3;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						float _BumpAmt;
						vec4 unused_0_2[2];
						vec4 _GrabTexture_TexelSize;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_1_1;
					};
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _GrabTexture;
					uniform  sampler2D _MainTex;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_BumpMap, vs_TEXCOORD1.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(_BumpAmt);
					    u_xlat0.xy = u_xlat0.xy * _GrabTexture_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.zz + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy / vs_TEXCOORD0.ww;
					    u_xlat0 = texture(_GrabTexture, u_xlat0.xy);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    u_xlat6 = u_xlat0.w * u_xlat1.w;
					    SV_Target0.w = u_xlat6;
					    u_xlat6 = vs_TEXCOORD3;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "QUEUE"="Transparent" "RenderType"="Opaque" }
 Pass {
  Name "BASE"
  Tags { "QUEUE"="Transparent" "RenderType"="Opaque" }
  Blend DstColor Zero
  GpuProgramID 75471
Program "vp" {
SubProgram "d3d9 hw_tier01 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_ST        c4       1
					//
					
					    vs_2_0
					    def c5, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mad oT0.xy, v1, c4, c4.zwzw
					    mad r0, v0.xyzx, c5.xxxy, c5.yyyx
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					    mov oD0, c5.yyyx
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d9 hw_tier02 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_ST        c4       1
					//
					
					    vs_2_0
					    def c5, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mad oT0.xy, v1, c4, c4.zwzw
					    mad r0, v0.xyzx, c5.xxxy, c5.yyyx
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					    mov oD0, c5.yyyx
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d9 hw_tier03 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_ST        c4       1
					//
					
					    vs_2_0
					    def c5, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mad oT0.xy, v1, c4, c4.zwzw
					    mad r0, v0.xyzx, c5.xxxy, c5.yyyx
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					    mov oD0, c5.yyyx
					
					// approximately 7 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = vec4(0.0, 0.0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[24];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_2[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					int u_xlati1;
					vec4 u_xlat2;
					void main()
					{
					    vs_COLOR0 = vec4(0.0, 0.0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlati1 = unity_StereoEyeIndex << 2;
					    u_xlat2 = u_xlat0.yyyy * unity_StereoMatrixVP[(u_xlati1 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati1] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati1 + 3)] * u_xlat0.wwww + u_xlat2;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = vec4(0.0, 0.0, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
SubProgram "d3d9 hw_tier01 " {
Keywords { "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   unity_FogParams           c7       1
					//   _MainTex_ST               c8       1
					//
					
					    vs_2_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mad oT0.xy, v1, c8, c8.zwzw
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c7.x
					    mul r1.x, r1.x, -r1.x
					    expp oT1.x, r1.x
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					    mov oD0, c9.yyyx
					
					// approximately 16 instruction slots used"
}
SubProgram "d3d9 hw_tier02 " {
Keywords { "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   unity_FogParams           c7       1
					//   _MainTex_ST               c8       1
					//
					
					    vs_2_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mad oT0.xy, v1, c8, c8.zwzw
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c7.x
					    mul r1.x, r1.x, -r1.x
					    expp oT1.x, r1.x
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					    mov oD0, c9.yyyx
					
					// approximately 16 instruction slots used"
}
SubProgram "d3d9 hw_tier03 " {
Keywords { "FOG_EXP2" }
					"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   unity_FogParams           c7       1
					//   _MainTex_ST               c8       1
					//
					
					    vs_2_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    mad oT0.xy, v1, c8, c8.zwzw
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c7.x
					    mul r1.x, r1.x, -r1.x
					    expp oT1.x, r1.x
					    dp4 oPos.x, c0, r0
					    dp4 oPos.y, c1, r0
					    dp4 oPos.z, c2, r0
					    dp4 oPos.w, c3, r0
					    mov oD0, c9.yyyx
					
					// approximately 16 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + glstate_matrix_modelview0[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD1 = exp2(u_xlat0.x);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityStereoGlobals {
						vec4 unused_2_0[8];
						mat4x4 unity_StereoMatrixV;
						vec4 unused_2_2[12];
						mat4x4 unity_StereoMatrixVP;
						vec4 unused_2_4[40];
					};
					layout(std140) uniform UnityStereoEyeIndex {
						int unity_StereoEyeIndex;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    vs_COLOR0 = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlati0 = unity_StereoEyeIndex << 2;
					    u_xlat3.xyz = unity_ObjectToWorld[1].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat3.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[1].xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[1].zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[1].www + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[0].www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[2].www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].yyy * unity_StereoMatrixV[(u_xlati0 + 1)].xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[u_xlati0].xyz * unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 2)].xyz * unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_StereoMatrixV[(u_xlati0 + 3)].xyz * unity_ObjectToWorld[3].www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * unity_FogParams.x;
					    u_xlat3.x = u_xlat3.x * (-u_xlat3.x);
					    vs_TEXCOORD1 = exp2(u_xlat3.x);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * unity_StereoMatrixVP[(u_xlati0 + 1)];
					    u_xlat2 = unity_StereoMatrixVP[u_xlati0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_StereoMatrixVP[(u_xlati0 + 2)] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_StereoMatrixVP[(u_xlati0 + 3)] * u_xlat1.wwww + u_xlat2;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "FOG_EXP2" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec3 in_POSITION0;
					in  vec3 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    vs_COLOR0 = vec4(0.0, 0.0, 0.0, 1.0);
					    u_xlat0.xyz = in_POSITION0.yyy * glstate_matrix_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + glstate_matrix_modelview0[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * unity_FogParams.x;
					    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
					    vs_TEXCOORD1 = exp2(u_xlat0.x);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 hw_tier01 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mov_pp oC0, r0
					
					// approximately 2 instruction slots used (1 texture, 1 arithmetic)"
}
SubProgram "d3d9 hw_tier02 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mov_pp oC0, r0
					
					// approximately 2 instruction slots used (1 texture, 1 arithmetic)"
}
SubProgram "d3d9 hw_tier03 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    dcl t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mov_pp oC0, r0
					
					// approximately 2 instruction slots used (1 texture, 1 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    return;
					}"
}
SubProgram "d3d9 hw_tier01 " {
Keywords { "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   unity_FogColor c0       1
					//   _MainTex       s0       1
					//
					
					    ps_2_0
					    dcl t0.xy
					    dcl_pp t1.x
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    lrp_pp r1.xyz, t1.x, r0, c0
					    mov_pp r1.w, r0.w
					    mov_pp oC0, r1
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d9 hw_tier02 " {
Keywords { "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   unity_FogColor c0       1
					//   _MainTex       s0       1
					//
					
					    ps_2_0
					    dcl t0.xy
					    dcl_pp t1.x
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    lrp_pp r1.xyz, t1.x, r0, c0
					    mov_pp r1.w, r0.w
					    mov_pp oC0, r1
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d9 hw_tier03 " {
Keywords { "FOG_EXP2" }
					"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   unity_FogColor c0       1
					//   _MainTex       s0       1
					//
					
					    ps_2_0
					    dcl t0.xy
					    dcl_pp t1.x
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    lrp_pp r1.xyz, t1.x, r0, c0
					    mov_pp r1.w, r0.w
					    mov_pp oC0, r1
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_0_1;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11 " {
Keywords { "FOG_EXP2" "UNITY_SINGLE_PASS_STEREO" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_0_1;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "FOG_EXP2" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_0_1;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = vec3(vs_TEXCOORD1) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
}
}
 }
}
}